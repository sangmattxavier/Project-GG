%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1512.i118.053.S.m005.c10.social media illustration.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: lena
%%CreationDate: 2/29/2016
%%BoundingBox: 0 0 450 426
%%HiResBoundingBox: 0 0 450 425.5625
%%CropBox: 0 0 450 425.5625
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.2 x682 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=300 GradRes=300 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2016-02-29T11:38:02+06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-02-29T11:38:02+06:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-02-29T11:38:02+06:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>244</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4xm9cJHaRoWtaxM8GlWM&#xA;99LGvOVYI2k4J/M3EfCPc4JSA5qBaaf8q788/wDVju/+RRyPix708JQ2o+TPNmm2j3l9pF1b2kZA&#xA;kuHiYRqWNF5NSi1PSuEZInkVMSk2SQ7FVa1itpHP1if0EArUIXJPgAKficqzTnEeiPEffTdhhCR9&#xA;cuEe6/x80XcaLder/occtzbNGkqz+mQOLKCeVCyrQ1B+LMbHr4V+8MYTsir7j05E3z5OTl7Pnxfu&#xA;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&#xA;0LgOxV2KuxV2KuxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:B0FC9DDA8CDEE5118700FDAD1E97CA05</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:B0FC9DDA8CDEE5118700FDAD1E97CA05</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:54FCA332E5A3E51191338F01A2138184</stRef:instanceID>
            <stRef:documentID>xmp.did:54FCA332E5A3E51191338F01A2138184</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7e86dabd-0cfa-477f-937c-e409ce33c39e</stEvt:instanceID>
                  <stEvt:when>2015-11-23T19:46:04+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:42e3f302-3abc-48b7-9e25-863bece44a93</stEvt:instanceID>
                  <stEvt:when>2015-12-16T13:47:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:54FCA332E5A3E51191338F01A2138184</stEvt:instanceID>
                  <stEvt:when>2015-12-16T17:07:29+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B0FC9DDA8CDEE5118700FDAD1E97CA05</stEvt:instanceID>
                  <stEvt:when>2016-02-29T11:38:02+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -425.563 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 425.563 li
450 425.563 li
450 0 li
cp
clp
280.337 341.561 mo
280.337 339.025 li
169.623 339.025 li
169.623 342.253 li
169.653 342.253 li
169.801 343.055 170.487 343.732 171.423 343.732 cv
278.577 343.732 li
279.776 343.732 280.565 342.619 280.337 341.561 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.0941176 .156863 .309804 rgb
f
278.577 341.202 mo
171.423 341.202 li
169.971 341.202 169.118 339.569 169.949 338.378 cv
179.144 325.188 li
270.856 325.188 li
280.051 338.378 li
280.882 339.569 280.029 341.202 278.577 341.202 cv
cp
.141176 .243137 .498039 rgb
f
176.984 335.879 mo
181.223 329.798 li
181.34 329.63 181.531 329.53 181.735 329.53 cv
268.265 329.53 li
268.469 329.53 268.66 329.63 268.776 329.798 cv
273.017 335.879 li
273.305 336.293 273.009 336.86 272.504 336.86 cv
177.496 336.86 li
176.991 336.86 176.695 336.293 176.984 335.879 cv
cp
.0941176 .156863 .309804 rgb
f
269.287 327.72 mo
180.713 327.72 li
178.476 327.72 176.663 325.906 176.663 323.67 cv
176.663 268.671 li
176.663 266.434 178.476 264.621 180.713 264.621 cv
269.287 264.621 li
271.523 264.621 273.337 266.434 273.337 268.671 cv
273.337 323.67 li
273.337 325.906 271.523 327.72 269.287 327.72 cv
cp
.133333 .196078 .376471 rgb
f
267.755 270.202 mo
267.755 322.138 li
182.245 322.138 li
182.245 270.202 li
267.755 270.202 li
cp
.152941 .666667 .882353 rgb
f
267.755 270.202 mo
267.755 322.138 li
199.829 322.138 li
253.696 270.202 li
267.755 270.202 li
cp
.188235 .780392 .937255 rgb
f
224.29 307.654 mo
224.779 307.654 li
224.779 307.654 244.166 224.069 350.999 214.222 cv
391.518 210.488 423.987 201.375 450 188.993 cv
450 0 li
0 0 li
0 189.433 li
25.8555 201.591 58.0327 210.532 98.0693 214.222 cv
204.902 224.069 224.29 307.654 224.29 307.654 cv
cp
.133333 .196078 .376471 rgb
f
225 366.333 mo
189.828 366.333 161.315 363.137 161.315 359.193 cv
161.315 355.251 189.828 352.055 225 352.055 cv
260.172 352.055 288.685 355.251 288.685 359.193 cv
288.685 363.137 260.172 366.333 225 366.333 cv
225 352.133 mo
190.291 352.133 162.154 355.294 162.154 359.193 cv
162.154 363.094 190.291 366.255 225 366.255 cv
259.709 366.255 287.846 363.094 287.846 359.193 cv
287.846 355.294 259.709 352.133 225 352.133 cv
1 1 1 rgb
f
225 366.255 mo
190.291 366.255 162.154 363.094 162.154 359.193 cv
162.154 355.294 190.291 352.133 225 352.133 cv
259.709 352.133 287.846 355.294 287.846 359.193 cv
287.846 363.094 259.709 366.255 225 366.255 cv
225 352.211 mo
190.754 352.211 162.992 355.337 162.992 359.193 cv
162.992 363.051 190.754 366.177 225 366.177 cv
259.246 366.177 287.008 363.051 287.008 359.193 cv
287.008 355.337 259.246 352.211 225 352.211 cv
.996078 .996078 .996078 rgb
f
225 366.177 mo
190.754 366.177 162.992 363.051 162.992 359.193 cv
162.992 355.337 190.754 352.211 225 352.211 cv
259.246 352.211 287.008 355.337 287.008 359.193 cv
287.008 363.051 259.246 366.177 225 366.177 cv
225 352.289 mo
191.217 352.289 163.831 355.38 163.831 359.193 cv
163.831 363.008 191.217 366.099 225 366.099 cv
258.783 366.099 286.169 363.008 286.169 359.193 cv
286.169 355.38 258.783 352.289 225 352.289 cv
.992157 .992157 .992157 rgb
f
225 366.099 mo
191.217 366.099 163.831 363.008 163.831 359.193 cv
163.831 355.38 191.217 352.289 225 352.289 cv
258.783 352.289 286.169 355.38 286.169 359.193 cv
286.169 363.008 258.783 366.099 225 366.099 cv
225 352.366 mo
191.68 352.366 164.669 355.423 164.669 359.193 cv
164.669 362.965 191.68 366.021 225 366.021 cv
258.319 366.021 285.331 362.965 285.331 359.193 cv
285.331 355.423 258.319 352.366 225 352.366 cv
.988235 .988235 .988235 rgb
f
225 366.021 mo
191.68 366.021 164.669 362.965 164.669 359.193 cv
164.669 355.423 191.68 352.366 225 352.366 cv
258.319 352.366 285.331 355.423 285.331 359.193 cv
285.331 362.965 258.319 366.021 225 366.021 cv
225 352.444 mo
192.143 352.444 165.507 355.466 165.507 359.193 cv
165.507 362.921 192.143 365.943 225 365.943 cv
257.856 365.943 284.492 362.921 284.492 359.193 cv
284.492 355.466 257.856 352.444 225 352.444 cv
.984314 .984314 .984314 rgb
f
225 365.943 mo
192.143 365.943 165.507 362.921 165.507 359.193 cv
165.507 355.466 192.143 352.444 225 352.444 cv
257.856 352.444 284.492 355.466 284.492 359.193 cv
284.492 362.921 257.856 365.943 225 365.943 cv
225 352.522 mo
192.606 352.522 166.346 355.51 166.346 359.193 cv
166.346 362.878 192.606 365.865 225 365.865 cv
257.393 365.865 283.654 362.878 283.654 359.193 cv
283.654 355.51 257.393 352.522 225 352.522 cv
.980392 .980392 .980392 rgb
f
225 365.865 mo
192.606 365.865 166.346 362.878 166.346 359.193 cv
166.346 355.51 192.606 352.522 225 352.522 cv
257.393 352.522 283.654 355.51 283.654 359.193 cv
283.654 362.878 257.393 365.865 225 365.865 cv
225 352.601 mo
193.069 352.601 167.184 355.553 167.184 359.193 cv
167.184 362.835 193.069 365.787 225 365.787 cv
256.931 365.787 282.815 362.835 282.815 359.193 cv
282.815 355.553 256.931 352.601 225 352.601 cv
.976471 .976471 .976471 rgb
f
225 365.787 mo
193.069 365.787 167.184 362.835 167.184 359.193 cv
167.184 355.553 193.069 352.601 225 352.601 cv
256.931 352.601 282.815 355.553 282.815 359.193 cv
282.815 362.835 256.931 365.787 225 365.787 cv
225 352.679 mo
193.532 352.679 168.022 355.596 168.022 359.193 cv
168.022 362.792 193.532 365.709 225 365.709 cv
256.468 365.709 281.978 362.792 281.978 359.193 cv
281.978 355.596 256.468 352.679 225 352.679 cv
.972549 .972549 .976471 rgb
f
225 365.709 mo
193.532 365.709 168.022 362.792 168.022 359.193 cv
168.022 355.596 193.532 352.679 225 352.679 cv
256.468 352.679 281.978 355.596 281.978 359.193 cv
281.978 362.792 256.468 365.709 225 365.709 cv
225 352.757 mo
193.995 352.757 168.861 355.639 168.861 359.193 cv
168.861 362.749 193.995 365.631 225 365.631 cv
256.005 365.631 281.139 362.749 281.139 359.193 cv
281.139 355.639 256.005 352.757 225 352.757 cv
.968627 .968627 .972549 rgb
f
225 365.631 mo
193.995 365.631 168.861 362.749 168.861 359.193 cv
168.861 355.639 193.995 352.757 225 352.757 cv
256.005 352.757 281.139 355.639 281.139 359.193 cv
281.139 362.749 256.005 365.631 225 365.631 cv
225 352.834 mo
194.458 352.834 169.699 355.682 169.699 359.193 cv
169.699 362.706 194.458 365.553 225 365.553 cv
255.542 365.553 280.301 362.706 280.301 359.193 cv
280.301 355.682 255.542 352.834 225 352.834 cv
.964706 .964706 .968627 rgb
f
225 365.553 mo
194.458 365.553 169.699 362.706 169.699 359.193 cv
169.699 355.682 194.458 352.834 225 352.834 cv
255.542 352.834 280.301 355.682 280.301 359.193 cv
280.301 362.706 255.542 365.553 225 365.553 cv
225 352.912 mo
194.921 352.912 170.538 355.725 170.538 359.193 cv
170.538 362.663 194.921 365.475 225 365.475 cv
255.079 365.475 279.462 362.663 279.462 359.193 cv
279.462 355.725 255.079 352.912 225 352.912 cv
.960784 .960784 .964706 rgb
f
225 365.475 mo
194.921 365.475 170.538 362.663 170.538 359.193 cv
170.538 355.725 194.921 352.912 225 352.912 cv
255.079 352.912 279.462 355.725 279.462 359.193 cv
279.462 362.663 255.079 365.475 225 365.475 cv
225 352.99 mo
195.384 352.99 171.376 355.768 171.376 359.193 cv
171.376 362.62 195.384 365.397 225 365.397 cv
254.615 365.397 278.624 362.62 278.624 359.193 cv
278.624 355.768 254.615 352.99 225 352.99 cv
.956863 .956863 .960784 rgb
f
225 365.397 mo
195.384 365.397 171.376 362.62 171.376 359.193 cv
171.376 355.768 195.384 352.99 225 352.99 cv
254.615 352.99 278.624 355.768 278.624 359.193 cv
278.624 362.62 254.615 365.397 225 365.397 cv
225 353.068 mo
195.847 353.068 172.214 355.81 172.214 359.193 cv
172.214 362.577 195.847 365.319 225 365.319 cv
254.152 365.319 277.785 362.577 277.785 359.193 cv
277.785 355.81 254.152 353.068 225 353.068 cv
.952941 .956863 .956863 rgb
f
225 365.319 mo
195.847 365.319 172.214 362.577 172.214 359.193 cv
172.214 355.81 195.847 353.068 225 353.068 cv
254.152 353.068 277.785 355.81 277.785 359.193 cv
277.785 362.577 254.152 365.319 225 365.319 cv
225 353.146 mo
196.311 353.146 173.053 355.854 173.053 359.193 cv
173.053 362.533 196.311 365.241 225 365.241 cv
253.689 365.241 276.947 362.533 276.947 359.193 cv
276.947 355.854 253.689 353.146 225 353.146 cv
.94902 .952941 .952941 rgb
f
225 365.241 mo
196.311 365.241 173.053 362.533 173.053 359.193 cv
173.053 355.854 196.311 353.146 225 353.146 cv
253.689 353.146 276.947 355.854 276.947 359.193 cv
276.947 362.533 253.689 365.241 225 365.241 cv
225 353.225 mo
196.773 353.225 173.891 355.896 173.891 359.193 cv
173.891 362.49 196.773 365.163 225 365.163 cv
253.227 365.163 276.108 362.49 276.108 359.193 cv
276.108 355.896 253.227 353.225 225 353.225 cv
.945098 .94902 .94902 rgb
f
225 365.163 mo
196.773 365.163 173.891 362.49 173.891 359.193 cv
173.891 355.896 196.773 353.225 225 353.225 cv
253.227 353.225 276.108 355.896 276.108 359.193 cv
276.108 362.49 253.227 365.163 225 365.163 cv
225 353.303 mo
197.236 353.303 174.729 355.94 174.729 359.193 cv
174.729 362.447 197.236 365.085 225 365.085 cv
252.764 365.085 275.27 362.447 275.27 359.193 cv
275.27 355.94 252.764 353.303 225 353.303 cv
.941176 .945098 .945098 rgb
f
225 365.085 mo
197.236 365.085 174.729 362.447 174.729 359.193 cv
174.729 355.94 197.236 353.303 225 353.303 cv
252.764 353.303 275.27 355.94 275.27 359.193 cv
275.27 362.447 252.764 365.085 225 365.085 cv
225 353.38 mo
197.7 353.38 175.568 355.983 175.568 359.193 cv
175.568 362.404 197.7 365.007 225 365.007 cv
252.301 365.007 274.432 362.404 274.432 359.193 cv
274.432 355.983 252.301 353.38 225 353.38 cv
.937255 .941176 .941176 rgb
f
225 365.007 mo
197.7 365.007 175.568 362.404 175.568 359.193 cv
175.568 355.983 197.7 353.38 225 353.38 cv
252.301 353.38 274.432 355.983 274.432 359.193 cv
274.432 362.404 252.301 365.007 225 365.007 cv
225 353.458 mo
198.163 353.458 176.406 356.026 176.406 359.193 cv
176.406 362.361 198.163 364.929 225 364.929 cv
251.838 364.929 273.594 362.361 273.594 359.193 cv
273.594 356.026 251.838 353.458 225 353.458 cv
.933333 .937255 .937255 rgb
f
225 364.929 mo
198.163 364.929 176.406 362.361 176.406 359.193 cv
176.406 356.026 198.163 353.458 225 353.458 cv
251.838 353.458 273.594 356.026 273.594 359.193 cv
273.594 362.361 251.838 364.929 225 364.929 cv
225 353.536 mo
198.625 353.536 177.245 356.069 177.245 359.193 cv
177.245 362.318 198.625 364.852 225 364.852 cv
251.374 364.852 272.755 362.318 272.755 359.193 cv
272.755 356.069 251.374 353.536 225 353.536 cv
.929412 .933333 .933333 rgb
f
225 364.852 mo
198.625 364.852 177.245 362.318 177.245 359.193 cv
177.245 356.069 198.625 353.536 225 353.536 cv
251.374 353.536 272.755 356.069 272.755 359.193 cv
272.755 362.318 251.374 364.852 225 364.852 cv
225 353.614 mo
199.088 353.614 178.083 356.112 178.083 359.193 cv
178.083 362.275 199.088 364.773 225 364.773 cv
250.911 364.773 271.917 362.275 271.917 359.193 cv
271.917 356.112 250.911 353.614 225 353.614 cv
.92549 .929412 .933333 rgb
f
225 364.773 mo
199.088 364.773 178.083 362.275 178.083 359.193 cv
178.083 356.112 199.088 353.614 225 353.614 cv
250.911 353.614 271.917 356.112 271.917 359.193 cv
271.917 362.275 250.911 364.773 225 364.773 cv
225 353.692 mo
199.552 353.692 178.921 356.155 178.921 359.193 cv
178.921 362.232 199.552 364.695 225 364.695 cv
250.448 364.695 271.078 362.232 271.078 359.193 cv
271.078 356.155 250.448 353.692 225 353.692 cv
.921569 .92549 .929412 rgb
f
225 364.695 mo
199.552 364.695 178.921 362.232 178.921 359.193 cv
178.921 356.155 199.552 353.692 225 353.692 cv
250.448 353.692 271.078 356.155 271.078 359.193 cv
271.078 362.232 250.448 364.695 225 364.695 cv
225 353.77 mo
200.015 353.77 179.76 356.198 179.76 359.193 cv
179.76 362.189 200.015 364.617 225 364.617 cv
249.985 364.617 270.24 362.189 270.24 359.193 cv
270.24 356.198 249.985 353.77 225 353.77 cv
.917647 .921569 .92549 rgb
f
225 364.617 mo
200.015 364.617 179.76 362.189 179.76 359.193 cv
179.76 356.198 200.015 353.77 225 353.77 cv
249.985 353.77 270.24 356.198 270.24 359.193 cv
270.24 362.189 249.985 364.617 225 364.617 cv
225 353.849 mo
200.477 353.849 180.598 356.241 180.598 359.193 cv
180.598 362.146 200.477 364.539 225 364.539 cv
249.522 364.539 269.401 362.146 269.401 359.193 cv
269.401 356.241 249.522 353.849 225 353.849 cv
.913725 .917647 .921569 rgb
f
225 364.539 mo
200.477 364.539 180.598 362.146 180.598 359.193 cv
180.598 356.241 200.477 353.849 225 353.849 cv
249.522 353.849 269.401 356.241 269.401 359.193 cv
269.401 362.146 249.522 364.539 225 364.539 cv
225 353.926 mo
200.94 353.926 181.437 356.284 181.437 359.193 cv
181.437 362.102 200.94 364.461 225 364.461 cv
249.06 364.461 268.563 362.102 268.563 359.193 cv
268.563 356.284 249.06 353.926 225 353.926 cv
.909804 .913725 .917647 rgb
f
225 364.461 mo
200.94 364.461 181.437 362.102 181.437 359.193 cv
181.437 356.284 200.94 353.926 225 353.926 cv
249.06 353.926 268.563 356.284 268.563 359.193 cv
268.563 362.102 249.06 364.461 225 364.461 cv
225 354.004 mo
201.404 354.004 182.275 356.327 182.275 359.193 cv
182.275 362.06 201.404 364.383 225 364.383 cv
248.597 364.383 267.725 362.06 267.725 359.193 cv
267.725 356.327 248.597 354.004 225 354.004 cv
.905882 .909804 .913725 rgb
f
225 364.383 mo
201.404 364.383 182.275 362.06 182.275 359.193 cv
182.275 356.327 201.404 354.004 225 354.004 cv
248.597 354.004 267.725 356.327 267.725 359.193 cv
267.725 362.06 248.597 364.383 225 364.383 cv
225 354.082 mo
201.867 354.082 183.113 356.37 183.113 359.193 cv
183.113 362.017 201.867 364.305 225 364.305 cv
248.134 364.305 266.887 362.017 266.887 359.193 cv
266.887 356.37 248.134 354.082 225 354.082 cv
.901961 .905882 .909804 rgb
f
225 364.305 mo
201.867 364.305 183.113 362.017 183.113 359.193 cv
183.113 356.37 201.867 354.082 225 354.082 cv
248.134 354.082 266.887 356.37 266.887 359.193 cv
266.887 362.017 248.134 364.305 225 364.305 cv
225 354.16 mo
202.33 354.16 183.952 356.414 183.952 359.193 cv
183.952 361.974 202.33 364.228 225 364.228 cv
247.67 364.228 266.048 361.974 266.048 359.193 cv
266.048 356.414 247.67 354.16 225 354.16 cv
.898039 .901961 .905882 rgb
f
225 364.228 mo
202.33 364.228 183.952 361.974 183.952 359.193 cv
183.952 356.414 202.33 354.16 225 354.16 cv
247.67 354.16 266.048 356.414 266.048 359.193 cv
266.048 361.974 247.67 364.228 225 364.228 cv
225 354.238 mo
202.792 354.238 184.79 356.457 184.79 359.193 cv
184.79 361.931 202.792 364.149 225 364.149 cv
247.207 364.149 265.21 361.931 265.21 359.193 cv
265.21 356.457 247.207 354.238 225 354.238 cv
.894118 .898039 .901961 rgb
f
225 364.149 mo
202.792 364.149 184.79 361.931 184.79 359.193 cv
184.79 356.457 202.792 354.238 225 354.238 cv
247.207 354.238 265.21 356.457 265.21 359.193 cv
265.21 361.931 247.207 364.149 225 364.149 cv
225 354.316 mo
203.256 354.316 185.628 356.5 185.628 359.193 cv
185.628 361.888 203.256 364.071 225 364.071 cv
246.744 364.071 264.371 361.888 264.371 359.193 cv
264.371 356.5 246.744 354.316 225 354.316 cv
.890196 .894118 .898039 rgb
f
225 364.071 mo
203.256 364.071 185.628 361.888 185.628 359.193 cv
185.628 356.5 203.256 354.316 225 354.316 cv
246.744 354.316 264.371 356.5 264.371 359.193 cv
264.371 361.888 246.744 364.071 225 364.071 cv
225 354.394 mo
203.719 354.394 186.467 356.543 186.467 359.193 cv
186.467 361.845 203.719 363.993 225 363.993 cv
246.281 363.993 263.533 361.845 263.533 359.193 cv
263.533 356.543 246.281 354.394 225 354.394 cv
.886274 .890196 .894118 rgb
f
225 363.993 mo
203.719 363.993 186.467 361.845 186.467 359.193 cv
186.467 356.543 203.719 354.394 225 354.394 cv
246.281 354.394 263.533 356.543 263.533 359.193 cv
263.533 361.845 246.281 363.993 225 363.993 cv
225 354.472 mo
204.182 354.472 187.305 356.586 187.305 359.193 cv
187.305 361.801 204.182 363.915 225 363.915 cv
245.818 363.915 262.694 361.801 262.694 359.193 cv
262.694 356.586 245.818 354.472 225 354.472 cv
.882353 .886274 .890196 rgb
f
225 363.915 mo
204.182 363.915 187.305 361.801 187.305 359.193 cv
187.305 356.586 204.182 354.472 225 354.472 cv
245.818 354.472 262.694 356.586 262.694 359.193 cv
262.694 361.801 245.818 363.915 225 363.915 cv
225 354.55 mo
204.645 354.55 188.144 356.629 188.144 359.193 cv
188.144 361.758 204.645 363.837 225 363.837 cv
245.355 363.837 261.856 361.758 261.856 359.193 cv
261.856 356.629 245.355 354.55 225 354.55 cv
.878431 .882353 .886274 rgb
f
225 363.837 mo
204.645 363.837 188.144 361.758 188.144 359.193 cv
188.144 356.629 204.645 354.55 225 354.55 cv
245.355 354.55 261.856 356.629 261.856 359.193 cv
261.856 361.758 245.355 363.837 225 363.837 cv
225 354.628 mo
205.108 354.628 188.982 356.672 188.982 359.193 cv
188.982 361.715 205.108 363.759 225 363.759 cv
244.893 363.759 261.018 361.715 261.018 359.193 cv
261.018 356.672 244.893 354.628 225 354.628 cv
.87451 .878431 .886274 rgb
f
225 363.759 mo
205.108 363.759 188.982 361.715 188.982 359.193 cv
188.982 356.672 205.108 354.628 225 354.628 cv
244.893 354.628 261.018 356.672 261.018 359.193 cv
261.018 361.715 244.893 363.759 225 363.759 cv
225 354.706 mo
205.571 354.706 189.82 356.715 189.82 359.193 cv
189.82 361.672 205.571 363.681 225 363.681 cv
244.43 363.681 260.18 361.672 260.18 359.193 cv
260.18 356.715 244.43 354.706 225 354.706 cv
.870588 .87451 .882353 rgb
f
225 363.681 mo
205.571 363.681 189.82 361.672 189.82 359.193 cv
189.82 356.715 205.571 354.706 225 354.706 cv
244.43 354.706 260.18 356.715 260.18 359.193 cv
260.18 361.672 244.43 363.681 225 363.681 cv
225 354.784 mo
206.034 354.784 190.659 356.758 190.659 359.193 cv
190.659 361.629 206.034 363.603 225 363.603 cv
243.966 363.603 259.341 361.629 259.341 359.193 cv
259.341 356.758 243.966 354.784 225 354.784 cv
.866667 .87451 .878431 rgb
f
225 363.603 mo
206.034 363.603 190.659 361.629 190.659 359.193 cv
190.659 356.758 206.034 354.784 225 354.784 cv
243.966 354.784 259.341 356.758 259.341 359.193 cv
259.341 361.629 243.966 363.603 225 363.603 cv
225 354.862 mo
206.497 354.862 191.497 356.801 191.497 359.193 cv
191.497 361.586 206.497 363.525 225 363.525 cv
243.503 363.525 258.503 361.586 258.503 359.193 cv
258.503 356.801 243.503 354.862 225 354.862 cv
.862745 .870588 .87451 rgb
f
225 363.525 mo
206.497 363.525 191.497 361.586 191.497 359.193 cv
191.497 356.801 206.497 354.862 225 354.862 cv
243.503 354.862 258.503 356.801 258.503 359.193 cv
258.503 361.586 243.503 363.525 225 363.525 cv
225 354.939 mo
206.96 354.939 192.335 356.844 192.335 359.193 cv
192.335 361.543 206.96 363.447 225 363.447 cv
243.04 363.447 257.664 361.543 257.664 359.193 cv
257.664 356.844 243.04 354.939 225 354.939 cv
.862745 .866667 .870588 rgb
f
225 363.447 mo
206.96 363.447 192.335 361.543 192.335 359.193 cv
192.335 356.844 206.96 354.939 225 354.939 cv
243.04 354.939 257.664 356.844 257.664 359.193 cv
257.664 361.543 243.04 363.447 225 363.447 cv
225 355.018 mo
207.423 355.018 193.174 356.888 193.174 359.193 cv
193.174 361.5 207.423 363.369 225 363.369 cv
242.577 363.369 256.826 361.5 256.826 359.193 cv
256.826 356.888 242.577 355.018 225 355.018 cv
.858823 .862745 .866667 rgb
f
225 363.369 mo
207.423 363.369 193.174 361.5 193.174 359.193 cv
193.174 356.888 207.423 355.018 225 355.018 cv
242.577 355.018 256.826 356.888 256.826 359.193 cv
256.826 361.5 242.577 363.369 225 363.369 cv
225 355.096 mo
207.886 355.096 194.012 356.931 194.012 359.193 cv
194.012 361.457 207.886 363.291 225 363.291 cv
242.114 363.291 255.987 361.457 255.987 359.193 cv
255.987 356.931 242.114 355.096 225 355.096 cv
.854902 .858823 .862745 rgb
f
225 363.291 mo
207.886 363.291 194.012 361.457 194.012 359.193 cv
194.012 356.931 207.886 355.096 225 355.096 cv
242.114 355.096 255.987 356.931 255.987 359.193 cv
255.987 361.457 242.114 363.291 225 363.291 cv
225 355.174 mo
208.349 355.174 194.851 356.974 194.851 359.193 cv
194.851 361.413 208.349 363.213 225 363.213 cv
241.651 363.213 255.149 361.413 255.149 359.193 cv
255.149 356.974 241.651 355.174 225 355.174 cv
.85098 .854902 .858823 rgb
f
225 363.213 mo
208.349 363.213 194.851 361.413 194.851 359.193 cv
194.851 356.974 208.349 355.174 225 355.174 cv
241.651 355.174 255.149 356.974 255.149 359.193 cv
255.149 361.413 241.651 363.213 225 363.213 cv
225 355.252 mo
208.812 355.252 195.689 357.017 195.689 359.193 cv
195.689 361.37 208.812 363.135 225 363.135 cv
241.189 363.135 254.311 361.37 254.311 359.193 cv
254.311 357.017 241.189 355.252 225 355.252 cv
.847059 .85098 .854902 rgb
f
225 363.135 mo
208.812 363.135 195.689 361.37 195.689 359.193 cv
195.689 357.017 208.812 355.252 225 355.252 cv
241.189 355.252 254.311 357.017 254.311 359.193 cv
254.311 361.37 241.189 363.135 225 363.135 cv
225 355.33 mo
209.275 355.33 196.527 357.06 196.527 359.193 cv
196.527 361.327 209.275 363.058 225 363.058 cv
240.725 363.058 253.473 361.327 253.473 359.193 cv
253.473 357.06 240.725 355.33 225 355.33 cv
.843137 .847059 .85098 rgb
f
225 363.058 mo
209.275 363.058 196.527 361.327 196.527 359.193 cv
196.527 357.06 209.275 355.33 225 355.33 cv
240.725 355.33 253.473 357.06 253.473 359.193 cv
253.473 361.327 240.725 363.058 225 363.058 cv
225 355.408 mo
209.738 355.408 197.366 357.103 197.366 359.193 cv
197.366 361.284 209.738 362.979 225 362.979 cv
240.262 362.979 252.634 361.284 252.634 359.193 cv
252.634 357.103 240.262 355.408 225 355.408 cv
.839216 .843137 .847059 rgb
f
225 362.979 mo
209.738 362.979 197.366 361.284 197.366 359.193 cv
197.366 357.103 209.738 355.408 225 355.408 cv
240.262 355.408 252.634 357.103 252.634 359.193 cv
252.634 361.284 240.262 362.979 225 362.979 cv
225 355.485 mo
210.201 355.485 198.204 357.146 198.204 359.193 cv
198.204 361.241 210.201 362.901 225 362.901 cv
239.799 362.901 251.796 361.241 251.796 359.193 cv
251.796 357.146 239.799 355.485 225 355.485 cv
.835294 .839216 .843137 rgb
f
225 362.901 mo
210.201 362.901 198.204 361.241 198.204 359.193 cv
198.204 357.146 210.201 355.485 225 355.485 cv
239.799 355.485 251.796 357.146 251.796 359.193 cv
251.796 361.241 239.799 362.901 225 362.901 cv
225 355.563 mo
210.664 355.563 199.043 357.188 199.043 359.193 cv
199.043 361.198 210.664 362.823 225 362.823 cv
239.336 362.823 250.957 361.198 250.957 359.193 cv
250.957 357.188 239.336 355.563 225 355.563 cv
.831372 .835294 .843137 rgb
f
225 362.823 mo
210.664 362.823 199.043 361.198 199.043 359.193 cv
199.043 357.188 210.664 355.563 225 355.563 cv
239.336 355.563 250.957 357.188 250.957 359.193 cv
250.957 361.198 239.336 362.823 225 362.823 cv
225 355.642 mo
211.127 355.642 199.881 357.231 199.881 359.193 cv
199.881 361.155 211.127 362.745 225 362.745 cv
238.873 362.745 250.119 361.155 250.119 359.193 cv
250.119 357.231 238.873 355.642 225 355.642 cv
.827451 .831372 .839216 rgb
f
225 362.745 mo
211.127 362.745 199.881 361.155 199.881 359.193 cv
199.881 357.231 211.127 355.642 225 355.642 cv
238.873 355.642 250.119 357.231 250.119 359.193 cv
250.119 361.155 238.873 362.745 225 362.745 cv
225 355.72 mo
211.59 355.72 200.719 357.274 200.719 359.193 cv
200.719 361.112 211.59 362.667 225 362.667 cv
238.41 362.667 249.28 361.112 249.28 359.193 cv
249.28 357.274 238.41 355.72 225 355.72 cv
.823529 .827451 .835294 rgb
f
225 362.667 mo
211.59 362.667 200.719 361.112 200.719 359.193 cv
200.719 357.274 211.59 355.72 225 355.72 cv
238.41 355.72 249.28 357.274 249.28 359.193 cv
249.28 361.112 238.41 362.667 225 362.667 cv
225 355.798 mo
212.053 355.798 201.558 357.318 201.558 359.193 cv
201.558 361.069 212.053 362.589 225 362.589 cv
237.947 362.589 248.442 361.069 248.442 359.193 cv
248.442 357.318 237.947 355.798 225 355.798 cv
.819608 .823529 .831372 rgb
f
225 362.589 mo
212.053 362.589 201.558 361.069 201.558 359.193 cv
201.558 357.318 212.053 355.798 225 355.798 cv
237.947 355.798 248.442 357.318 248.442 359.193 cv
248.442 361.069 237.947 362.589 225 362.589 cv
225 355.876 mo
212.516 355.876 202.396 357.361 202.396 359.193 cv
202.396 361.025 212.516 362.511 225 362.511 cv
237.484 362.511 247.604 361.025 247.604 359.193 cv
247.604 357.361 237.484 355.876 225 355.876 cv
.815686 .819608 .827451 rgb
f
225 362.511 mo
212.516 362.511 202.396 361.025 202.396 359.193 cv
202.396 357.361 212.516 355.876 225 355.876 cv
237.484 355.876 247.604 357.361 247.604 359.193 cv
247.604 361.025 237.484 362.511 225 362.511 cv
225 355.953 mo
212.979 355.953 203.234 357.404 203.234 359.193 cv
203.234 360.982 212.979 362.434 225 362.434 cv
237.02 362.434 246.766 360.982 246.766 359.193 cv
246.766 357.404 237.02 355.953 225 355.953 cv
.811765 .815686 .823529 rgb
f
225 362.434 mo
212.979 362.434 203.234 360.982 203.234 359.193 cv
203.234 357.404 212.979 355.953 225 355.953 cv
237.02 355.953 246.766 357.404 246.766 359.193 cv
246.766 360.982 237.02 362.434 225 362.434 cv
225 356.031 mo
213.442 356.031 204.073 357.447 204.073 359.193 cv
204.073 360.939 213.442 362.355 225 362.355 cv
236.558 362.355 245.927 360.939 245.927 359.193 cv
245.927 357.447 236.558 356.031 225 356.031 cv
.807843 .811765 .819608 rgb
f
225 362.355 mo
213.442 362.355 204.073 360.939 204.073 359.193 cv
204.073 357.447 213.442 356.031 225 356.031 cv
236.558 356.031 245.927 357.447 245.927 359.193 cv
245.927 360.939 236.558 362.355 225 362.355 cv
225 356.109 mo
213.905 356.109 204.911 357.49 204.911 359.193 cv
204.911 360.896 213.905 362.277 225 362.277 cv
236.095 362.277 245.089 360.896 245.089 359.193 cv
245.089 357.49 236.095 356.109 225 356.109 cv
.803922 .807843 .815686 rgb
f
225 362.277 mo
213.905 362.277 204.911 360.896 204.911 359.193 cv
204.911 357.49 213.905 356.109 225 356.109 cv
236.095 356.109 245.089 357.49 245.089 359.193 cv
245.089 360.896 236.095 362.277 225 362.277 cv
225 356.188 mo
214.368 356.188 205.75 357.533 205.75 359.193 cv
205.75 360.853 214.368 362.199 225 362.199 cv
235.632 362.199 244.25 360.853 244.25 359.193 cv
244.25 357.533 235.632 356.188 225 356.188 cv
.8 .803922 .811765 rgb
f
225 362.199 mo
214.368 362.199 205.75 360.853 205.75 359.193 cv
205.75 357.533 214.368 356.188 225 356.188 cv
235.632 356.188 244.25 357.533 244.25 359.193 cv
244.25 360.853 235.632 362.199 225 362.199 cv
.768627 .768627 .768627 rgb
f
419.018 141.332 mo
413.237 141.332 407.803 143.583 403.716 147.67 cv
399.628 151.757 397.377 157.191 397.377 162.972 cv
397.377 168.752 399.628 174.187 403.716 178.274 cv
407.803 182.361 413.237 184.612 419.018 184.612 cv
424.798 184.612 430.232 182.361 434.319 178.274 cv
438.407 174.187 440.658 168.752 440.658 162.972 cv
440.658 157.191 438.407 151.757 434.319 147.67 cv
430.232 143.583 424.798 141.332 419.018 141.332 cv
cp
419.018 185.913 mo
412.89 185.913 407.129 183.526 402.796 179.193 cv
398.463 174.86 396.077 169.1 396.077 162.972 cv
396.077 156.844 398.463 151.083 402.796 146.75 cv
407.129 142.417 412.89 140.031 419.018 140.031 cv
425.146 140.031 430.906 142.417 435.239 146.75 cv
439.572 151.083 441.958 156.844 441.958 162.972 cv
441.958 169.1 439.572 174.86 435.239 179.193 cv
430.906 183.526 425.146 185.913 419.018 185.913 cv
cp
1 .784314 .180392 rgb
f
419.668 185.263 mo
418.367 185.263 li
418.367 140.682 li
419.668 140.682 li
419.668 185.263 li
cp
f
441.308 163.622 mo
396.728 163.622 li
396.728 162.322 li
441.308 162.322 li
441.308 163.622 li
cp
f
415.009 185.422 mo
410.317 179.868 407.396 174.034 406.327 168.083 cv
405.469 163.309 405.794 158.457 407.295 153.662 cv
409.843 145.519 414.833 140.436 415.044 140.223 cv
415.966 141.14 li
415.505 140.682 li
415.967 141.14 li
415.917 141.189 410.964 146.245 408.521 154.099 cv
407.093 158.687 406.787 163.325 407.612 167.885 cv
408.646 173.598 411.468 179.216 416.002 184.583 cv
415.009 185.422 li
cp
f
423.319 185.422 mo
422.326 184.583 li
426.86 179.216 429.683 173.598 430.716 167.885 cv
431.541 163.325 431.235 158.687 429.808 154.099 cv
427.364 146.245 422.411 141.189 422.361 141.14 cv
423.284 140.223 li
423.495 140.436 428.485 145.519 431.033 153.662 cv
432.534 158.457 432.859 163.309 432.002 168.083 cv
430.932 174.034 428.011 179.868 423.319 185.422 cv
cp
f
402.386 148.029 mo
402.703 147.461 li
402.704 147.461 li
402.386 148.029 li
cp
419.713 152.862 mo
417.421 152.862 415.084 152.64 412.729 152.197 cv
406.437 151.015 402.244 148.694 402.068 148.596 cv
402.704 147.461 li
402.761 147.493 406.931 149.792 413.013 150.928 cv
416.577 151.594 420.094 151.736 423.465 151.351 cv
427.668 150.87 431.659 149.563 435.326 147.464 cv
435.972 148.593 li
432.143 150.784 427.975 152.147 423.585 152.646 cv
422.312 152.79 421.02 152.862 419.713 152.862 cv
cp
f
435.332 178.688 mo
435.29 178.665 431.116 176.359 425.022 175.221 cv
421.458 174.555 417.94 174.413 414.57 174.798 cv
410.367 175.279 406.377 176.586 402.709 178.685 cv
402.063 177.556 li
405.894 175.365 410.061 174.001 414.451 173.503 cv
417.956 173.105 421.609 173.256 425.307 173.952 cv
431.599 175.134 435.791 177.455 435.967 177.553 cv
435.331 178.688 li
435.649 178.121 li
435.332 178.688 li
cp
f
338.853 41.6963 mo
338.593 41.6963 338.335 41.6538 338.085 41.5703 cv
338.498 40.3374 li
338.614 40.3765 338.733 40.396 338.853 40.396 cv
340.182 40.396 341.108 38.1113 341.108 36.0605 cv
341.108 34.0098 340.182 31.7241 338.853 31.7241 cv
338.733 31.7241 338.614 31.7441 338.498 31.7827 cv
338.085 30.5503 li
338.335 30.4668 338.593 30.4243 338.853 30.4243 cv
340.847 30.4243 342.408 32.8999 342.408 36.0605 cv
342.408 39.2207 340.847 41.6963 338.853 41.6963 cv
cp
.678431 .862745 .219608 rgb
f
338.941 58.3203 mo
332.624 52.7744 li
329.187 49.7554 326.247 47.4248 323.073 45.8652 cv
320.081 44.3965 316.947 43.6499 313.21 43.5156 cv
313.256 42.2168 li
317.183 42.3574 320.484 43.146 323.646 44.6987 cv
326.949 46.3213 329.967 48.71 333.482 51.7974 cv
337.642 55.4492 li
337.642 18.7856 li
333.481 22.4375 li
326.357 28.6934 321.514 31.7227 313.256 32.019 cv
313.21 30.7202 li
317.119 30.5796 320.396 29.7607 323.523 28.1426 cv
326.535 26.584 329.34 24.3442 332.624 21.4604 cv
338.941 15.9146 li
338.941 58.3203 li
cp
f
297.05 64.458 mo
310.18 64.458 li
305.214 45.4814 li
297.05 45.4814 li
297.05 64.458 li
cp
311.864 65.7578 mo
295.75 65.7578 li
295.75 44.1816 li
306.217 44.1816 li
311.864 65.7578 li
cp
f
313.232 45.7944 mo
290.825 45.7944 li
290.825 28.4409 li
313.232 28.4409 li
313.232 45.7944 li
cp
.152941 .666667 .882353 rgb
f
88.3726 96.7778 mo
50.7593 96.7778 li
50.7593 70.4341 li
79.6201 70.4341 li
79.6201 71.7339 li
52.0591 71.7339 li
52.0591 95.478 li
87.0723 95.478 li
87.0723 78.4404 li
88.3726 78.4404 li
88.3726 96.7778 li
cp
.988235 .388235 .12549 rgb
f
69.5664 88.0127 mo
69.4111 88.0127 69.2559 87.9575 69.1323 87.8467 cv
50.9751 71.5679 li
50.7744 71.3882 50.7056 71.1035 50.8018 70.8521 cv
50.8984 70.6001 51.1396 70.4341 51.4092 70.4341 cv
79.6201 70.4341 li
79.979 70.4341 80.27 70.7251 80.27 71.084 cv
80.27 71.4429 79.979 71.7339 79.6201 71.7339 cv
53.1079 71.7339 li
69.5664 86.4897 li
81.6338 75.6704 li
81.9014 75.4307 82.3125 75.4531 82.5518 75.7207 cv
82.7915 75.9878 82.769 76.3989 82.502 76.6382 cv
70 87.8467 li
69.877 87.9575 69.7217 88.0127 69.5664 88.0127 cv
cp
f
51.8608 96.5952 mo
50.9575 95.6602 li
64.4004 82.6689 li
65.3037 83.6035 li
51.8608 96.5952 li
cp
f
95.9775 70.5908 mo
95.9775 75.1821 92.2554 78.9043 87.6641 78.9043 cv
83.0728 78.9043 79.3506 75.1821 79.3506 70.5908 cv
79.3506 65.9995 83.0728 62.2773 87.6641 62.2773 cv
92.2554 62.2773 95.9775 65.9995 95.9775 70.5908 cv
cp
1 1 1 rgb
f
87.271 96.5952 mo
73.8281 83.6035 li
74.7314 82.6689 li
88.1743 95.6602 li
87.271 96.5952 li
cp
.988235 .388235 .12549 rgb
f
89.1025 74.3115 mo
86.8374 74.3115 li
86.8374 69.939 li
86.8374 69.4082 86.8486 68.9224 86.8711 68.4819 cv
86.7319 68.6514 86.5586 68.8281 86.3516 69.0127 cv
85.4136 69.7866 li
84.2559 68.3633 li
87.0913 66.0527 li
89.1025 66.0527 li
89.1025 74.3115 li
cp
f
101.492 134.456 mo
140.843 134.456 li
140.843 104.737 li
101.492 104.737 li
101.492 134.456 li
cp
142.143 135.756 mo
100.192 135.756 li
100.192 103.438 li
142.143 103.438 li
142.143 135.756 li
cp
1 .784314 .180392 rgb
f
101.492 146.54 mo
140.843 146.54 li
140.843 135.756 li
101.492 135.756 li
101.492 146.54 li
cp
142.143 147.84 mo
100.192 147.84 li
100.192 134.456 li
142.143 134.456 li
142.143 147.84 li
cp
f
131.29 140.11 mo
117.903 140.11 li
117.903 138.811 li
131.29 138.811 li
131.29 140.11 li
cp
f
136.188 143.539 mo
117.903 143.539 li
117.903 142.239 li
136.188 142.239 li
136.188 143.539 li
cp
f
126.982 114.927 mo
126.982 118.464 124.115 121.331 120.579 121.331 cv
117.042 121.331 114.174 118.464 114.174 114.927 cv
114.174 111.39 117.042 108.523 120.579 108.523 cv
124.115 108.523 126.982 111.39 126.982 114.927 cv
cp
.976471 .396078 .121569 rgb
f
127.132 129.891 mo
114.024 129.891 li
114.024 127.961 li
114.024 124.341 116.959 121.407 120.579 121.407 cv
124.198 121.407 127.132 124.341 127.132 127.961 cv
127.132 129.891 li
cp
f
108.044 139.262 mo
107.294 139.262 106.958 139.911 106.958 140.553 cv
106.958 141.449 108.567 142.789 109.641 143.428 cv
110.042 143.187 110.625 142.785 111.152 142.312 cv
111.898 141.641 112.327 141 112.327 140.553 cv
112.327 139.911 111.991 139.262 111.241 139.262 cv
110.954 139.262 110.414 139.549 110.109 139.863 cv
109.643 140.345 li
109.176 139.863 li
108.871 139.549 108.332 139.262 108.044 139.262 cv
cp
109.641 144.904 mo
109.344 144.75 li
109.307 144.731 105.659 142.745 105.659 140.553 cv
105.659 139.052 106.662 137.962 108.044 137.962 cv
108.589 137.962 109.181 138.231 109.643 138.561 cv
110.104 138.231 110.696 137.962 111.241 137.962 cv
112.624 137.962 113.626 139.052 113.626 140.553 cv
113.626 142.762 109.976 144.733 109.939 144.751 cv
109.641 144.904 li
cp
1 .784314 .180392 rgb
f
224.296 101.068 mo
211.921 64.9014 li
240.308 55.1899 li
240.729 56.4199 li
213.572 65.7104 li
225.105 99.417 li
242.724 93.3892 li
243.145 94.6191 li
224.296 101.068 li
cp
1 1 1 rgb
f
227.905 111.618 mo
223.875 99.8379 li
242.724 93.3892 li
243.145 94.6191 li
225.526 100.647 li
228.715 109.967 li
268.028 96.5166 li
267.24 94.2144 li
268.471 93.7935 li
269.68 97.3257 li
227.905 111.618 li
cp
f
240.519 66.999 mo
239.992 66.6138 li
235.952 79.8906 li
230.961 77.1377 li
227.438 88.2104 li
240.519 83.7358 li
240.519 66.999 li
cp
.988235 .388235 .12549 rgb
f
241.169 82.2036 mo
282.72 82.2036 li
282.72 46.5786 li
241.169 46.5786 li
241.169 82.2036 li
cp
284.02 83.5039 mo
239.869 83.5039 li
239.869 45.2788 li
284.02 45.2788 li
284.02 83.5039 li
cp
1 1 1 rgb
f
277.306 94.6538 mo
239.868 94.6538 li
239.868 82.2031 li
284.02 82.2031 li
284.02 93.0977 li
282.72 93.0977 li
282.72 83.5034 li
241.168 83.5034 li
241.168 93.354 li
277.306 93.354 li
277.306 94.6538 li
cp
f
303.014 95.7817 mo
288.422 86.3711 li
288.422 90.3589 li
279.053 90.3589 li
275.515 90.3589 272.646 93.2275 272.646 96.7656 cv
272.646 110.793 li
283.492 110.793 li
283.492 103.316 li
283.492 102.15 284.438 101.205 285.604 101.205 cv
288.422 101.205 li
288.422 105.192 li
303.014 95.7817 li
cp
.988235 .388235 .12549 rgb
f
247.004 72.3555 mo
253.921 63.0195 li
257.753 67.2393 li
265.873 55.9858 li
277.306 72.3555 li
247.004 72.3555 li
cp
f
30.5498 37.4541 mo
25.9507 37.4541 li
22.9414 37.4541 20.4932 35.0063 20.4932 31.9976 cv
20.4932 29.4053 li
12.5205 24.8506 li
20.4932 20.2959 li
20.4932 17.7036 li
20.4932 14.6948 22.9414 12.2471 25.9507 12.2471 cv
49.0713 12.2471 li
52.0806 12.2471 54.5293 14.6948 54.5293 17.7036 cv
54.5293 31.9976 li
54.5293 32.6274 54.4224 33.2446 54.2124 33.8315 cv
52.9883 33.3936 li
53.1479 32.9473 53.229 32.4775 53.229 31.9976 cv
53.229 17.7036 li
53.229 15.4116 51.3638 13.5469 49.0713 13.5469 cv
25.9507 13.5469 li
23.6582 13.5469 21.793 15.4116 21.793 17.7036 cv
21.793 21.0503 li
15.1411 24.8506 li
21.793 28.6509 li
21.793 31.9976 li
21.793 34.2896 23.6582 36.1543 25.9507 36.1543 cv
30.5498 36.1543 li
30.5498 37.4541 li
cp
1 1 1 rgb
f
33.8555 29.291 mo
33.8555 25.189 li
33.8555 24.1802 33.5566 23.6758 32.9595 23.6758 cv
32.5347 23.6758 32.2217 23.854 32.0205 24.2104 cv
31.8188 24.5664 31.7183 25.1582 31.7183 25.9858 cv
31.7183 29.291 li
29.123 29.291 li
29.123 18.9639 li
31.7183 18.9639 li
31.7183 20.4307 li
31.7183 21.0942 31.6831 21.8506 31.6123 22.7002 cv
31.7314 22.7002 li
31.9795 22.311 32.2734 22.0366 32.6143 21.8774 cv
32.9551 21.7183 33.3511 21.6382 33.8022 21.6382 cv
34.6431 21.6382 35.2969 21.8809 35.7637 22.3652 cv
36.2305 22.8496 36.4639 23.5278 36.4639 24.3994 cv
36.4639 29.291 li
33.8555 29.291 li
cp
f
40.8379 29.291 mo
38.2427 29.291 li
38.2427 21.771 li
40.8379 21.771 li
40.8379 29.291 li
cp
38.1763 19.8994 mo
38.1763 19.5103 38.2847 19.2202 38.5015 19.0298 cv
38.7183 18.8398 39.0679 18.7446 39.5503 18.7446 cv
40.0322 18.7446 40.3843 18.8418 40.6055 19.0366 cv
40.8267 19.2314 40.937 19.519 40.937 19.8994 cv
40.937 20.6606 40.4746 21.041 39.5503 21.041 cv
38.6343 21.041 38.1763 20.6606 38.1763 19.8994 cv
cp
f
42.3242 28.189 mo
42.3242 27.7866 42.4438 27.4736 42.6826 27.25 cv
42.9219 27.0269 43.269 26.915 43.7246 26.915 cv
44.1763 26.915 44.5181 27.0269 44.7505 27.25 cv
44.9824 27.4736 45.0986 27.7866 45.0986 28.189 cv
45.0986 28.5874 44.978 28.8984 44.7368 29.1216 cv
44.4956 29.3452 44.1582 29.457 43.7246 29.457 cv
43.2866 29.457 42.9438 29.3452 42.6963 29.1216 cv
42.4482 28.8984 42.3242 28.5874 42.3242 28.189 cv
cp
44.8267 25.8662 mo
42.6362 25.8662 li
42.2979 19.5874 li
45.165 19.5874 li
44.8267 25.8662 li
cp
f
63.0068 52.7134 mo
63.0068 49.7441 li
70.3193 45.5664 li
63.0068 41.3892 li
63.0068 38.4199 li
63.0068 35.7651 60.8545 33.6128 58.1997 33.6128 cv
35.0786 33.6128 li
32.4238 33.6128 30.2715 35.7651 30.2715 38.4199 cv
30.2715 52.7134 li
30.2715 55.3682 32.4238 57.5205 35.0786 57.5205 cv
58.1997 57.5205 li
60.8545 57.5205 63.0068 55.3682 63.0068 52.7134 cv
cp
1 .776471 .188235 rgb
f
54.6143 43.4316 mo
53.5532 43.4316 52.6895 44.2954 52.6895 45.3564 cv
52.6895 46.4175 53.5532 47.2813 54.6143 47.2813 cv
55.6758 47.2813 56.5391 46.4175 56.5391 45.3564 cv
56.5391 44.2954 55.6758 43.4316 54.6143 43.4316 cv
cp
54.6143 48.5811 mo
52.8364 48.5811 51.3896 47.1343 51.3896 45.3564 cv
51.3896 43.5781 52.8364 42.1318 54.6143 42.1318 cv
56.3926 42.1318 57.8389 43.5781 57.8389 45.3564 cv
57.8389 47.1343 56.3926 48.5811 54.6143 48.5811 cv
cp
.988235 .388235 .12549 rgb
f
46.7065 43.4316 mo
45.645 43.4316 44.7817 44.2954 44.7817 45.3564 cv
44.7817 46.4175 45.645 47.2813 46.7065 47.2813 cv
47.7676 47.2813 48.6309 46.4175 48.6309 45.3564 cv
48.6309 44.2954 47.7676 43.4316 46.7065 43.4316 cv
cp
46.7065 48.5811 mo
44.9282 48.5811 43.4819 47.1343 43.4819 45.3564 cv
43.4819 43.5781 44.9282 42.1318 46.7065 42.1318 cv
48.4844 42.1318 49.9312 43.5781 49.9312 45.3564 cv
49.9312 47.1343 48.4844 48.5811 46.7065 48.5811 cv
cp
f
38.7983 43.4316 mo
37.7373 43.4316 36.8735 44.2954 36.8735 45.3564 cv
36.8735 46.4175 37.7373 47.2813 38.7983 47.2813 cv
39.8599 47.2813 40.7231 46.4175 40.7231 45.3564 cv
40.7231 44.2954 39.8599 43.4316 38.7983 43.4316 cv
cp
38.7983 48.5811 mo
37.0205 48.5811 35.5737 47.1343 35.5737 45.3564 cv
35.5737 43.5781 37.0205 42.1318 38.7983 42.1318 cv
40.5767 42.1318 42.0229 43.5781 42.0229 45.3564 cv
42.0229 47.1343 40.5767 48.5811 38.7983 48.5811 cv
cp
f
71.9893 171.397 mo
78.0537 174.861 li
78.0537 175.238 li
78.0537 178.823 80.9702 181.74 84.5547 181.74 cv
123.583 181.74 li
127.168 181.74 130.084 178.823 130.084 175.238 cv
130.084 167.555 li
130.084 163.97 127.168 161.054 123.583 161.054 cv
84.5547 161.054 li
80.9702 161.054 78.0537 163.97 78.0537 167.555 cv
78.0537 167.933 li
71.9893 171.397 li
cp
123.583 183.04 mo
84.5547 183.04 li
80.3813 183.04 76.9629 179.746 76.7627 175.621 cv
69.3687 171.397 li
76.7627 167.173 li
76.9629 163.048 80.3813 159.754 84.5547 159.754 cv
123.583 159.754 li
127.885 159.754 131.384 163.253 131.384 167.555 cv
131.384 175.238 li
131.384 179.54 127.885 183.04 123.583 183.04 cv
cp
.678431 .862745 .219608 rgb
f
300.724 159.596 mo
298.688 159.596 297.033 161.251 297.033 163.286 cv
297.033 201.692 li
297.033 203.727 298.688 205.383 300.724 205.383 cv
330.923 205.383 li
332.957 205.383 334.612 203.727 334.612 201.692 cv
334.612 163.286 li
334.612 161.251 332.957 159.596 330.923 159.596 cv
300.724 159.596 li
cp
330.923 206.683 mo
300.724 206.683 li
297.972 206.683 295.733 204.444 295.733 201.692 cv
295.733 163.286 li
295.733 160.535 297.972 158.296 300.724 158.296 cv
330.923 158.296 li
333.674 158.296 335.913 160.535 335.913 163.286 cv
335.913 201.692 li
335.913 204.444 333.674 206.683 330.923 206.683 cv
cp
1 .784314 .180392 rgb
f
300.724 159.596 mo
298.688 159.596 297.033 161.251 297.033 163.286 cv
297.033 201.692 li
297.033 203.727 298.688 205.383 300.724 205.383 cv
303.356 205.383 li
303.356 159.596 li
300.724 159.596 li
cp
304.656 206.683 mo
300.724 206.683 li
297.972 206.683 295.733 204.444 295.733 201.692 cv
295.733 163.286 li
295.733 160.535 297.972 158.296 300.724 158.296 cv
304.656 158.296 li
304.656 206.683 li
cp
f
299.03 166.86 mo
293.816 166.86 li
293.816 165.561 li
299.03 165.561 li
299.03 166.86 li
cp
f
299.03 173.372 mo
293.816 173.372 li
293.816 172.072 li
299.03 172.072 li
299.03 173.372 li
cp
f
299.03 179.884 mo
293.816 179.884 li
293.816 178.583 li
299.03 178.583 li
299.03 179.884 li
cp
f
299.03 186.395 mo
293.816 186.395 li
293.816 185.095 li
299.03 185.095 li
299.03 186.395 li
cp
f
299.03 192.907 mo
293.816 192.907 li
293.816 191.606 li
299.03 191.606 li
299.03 192.907 li
cp
f
299.03 199.418 mo
293.816 199.418 li
293.816 198.118 li
299.03 198.118 li
299.03 199.418 li
cp
f
325.989 176.632 mo
325.989 180.428 322.912 183.506 319.116 183.506 cv
315.32 183.506 312.243 180.428 312.243 176.632 cv
312.243 172.836 315.32 169.759 319.116 169.759 cv
322.912 169.759 325.989 172.836 325.989 176.632 cv
cp
.976471 .396078 .121569 rgb
f
326.15 192.693 mo
312.082 192.693 li
312.082 190.621 li
312.082 186.736 315.231 183.587 319.116 183.587 cv
323.001 183.587 326.15 186.736 326.15 190.621 cv
326.15 192.693 li
cp
f
252.49 184.18 mo
269.681 190.866 li
274.578 159.974 li
252.49 184.18 li
cp
270.196 192.414 mo
269.961 192.369 li
251.136 185.048 li
250.937 184.97 250.787 184.799 250.738 184.59 cv
250.689 184.382 250.747 184.163 250.892 184.004 cv
275.08 157.496 li
275.273 157.283 275.583 157.224 275.842 157.348 cv
276.101 157.472 276.247 157.752 276.202 158.035 cv
270.839 191.865 li
270.808 192.06 270.69 192.229 270.521 192.327 cv
270.421 192.384 270.309 192.414 270.196 192.414 cv
cp
.678431 .862745 .219608 rgb
f
229.777 174.502 mo
242.618 180.005 li
271.3 160.1 li
256.797 165.13 li
242.507 170.087 li
229.777 174.502 li
cp
242.692 181.395 mo
242.437 181.342 li
227.723 175.036 li
227.476 174.93 227.319 174.684 227.328 174.415 cv
227.338 174.147 227.512 173.912 227.766 173.824 cv
242.081 168.859 li
256.37 163.901 li
275.348 157.32 li
275.654 157.213 275.992 157.35 276.14 157.639 cv
276.287 157.929 276.198 158.283 275.931 158.468 cv
243.063 181.279 li
242.953 181.355 242.823 181.395 242.692 181.395 cv
cp
f
246.703 196.179 mo
246.659 196.177 li
246.383 196.159 246.148 195.967 246.075 195.699 cv
242.065 180.915 li
241.972 180.568 242.176 180.211 242.522 180.118 cv
242.868 180.023 243.226 180.228 243.32 180.575 cv
246.836 193.537 li
250.772 184.19 li
250.912 183.859 251.293 183.704 251.624 183.843 cv
251.955 183.982 252.11 184.364 251.971 184.694 cv
247.302 195.781 li
247.2 196.023 246.963 196.179 246.703 196.179 cv
cp
f
246.702 196.179 mo
246.546 196.179 246.39 196.123 246.265 196.009 cv
246 195.768 245.98 195.356 246.223 195.091 cv
254.561 185.937 li
254.803 185.671 255.213 185.652 255.479 185.894 cv
255.744 186.136 255.764 186.547 255.521 186.812 cv
247.184 195.966 li
247.055 196.107 246.879 196.179 246.702 196.179 cv
cp
f
256.148 162.723 mo
256.148 167.208 252.512 170.845 248.026 170.845 cv
243.54 170.845 239.903 167.208 239.903 162.723 cv
239.903 158.237 243.54 154.601 248.026 154.601 cv
252.512 154.601 256.148 158.237 256.148 162.723 cv
cp
.152941 .666667 .882353 rgb
f
249.71 166.989 mo
247.302 166.989 li
247.302 162.34 li
247.302 161.776 247.313 161.259 247.338 160.791 cv
247.189 160.971 247.005 161.159 246.785 161.355 cv
245.788 162.178 li
244.557 160.665 li
247.572 158.208 li
249.71 158.208 li
249.71 166.989 li
cp
1 1 1 rgb
f
199.238 214.665 mo
154.411 214.665 li
149.383 214.665 145.293 210.574 145.293 205.547 cv
145.293 173.731 li
145.293 168.704 149.383 164.613 154.411 164.613 cv
211.767 164.613 li
216.795 164.613 220.885 168.704 220.885 173.731 cv
220.885 199.622 li
219.585 199.622 li
219.585 173.731 li
219.585 169.42 216.078 165.914 211.767 165.914 cv
154.411 165.914 li
150.1 165.914 146.593 169.42 146.593 173.731 cv
146.593 205.547 li
146.593 209.857 150.1 213.364 154.411 213.364 cv
199.238 213.364 li
199.238 214.665 li
cp
f
199.238 214.665 mo
159.2 214.665 li
159.2 164.613 li
212.417 164.613 li
212.417 195.935 li
211.117 195.935 li
211.117 165.914 li
160.5 165.914 li
160.5 213.364 li
199.238 213.364 li
199.238 214.665 li
cp
f
153.913 193.962 mo
152.613 193.962 li
152.613 185.316 li
153.913 185.316 li
153.913 193.962 li
cp
f
194.443 195.232 mo
196.649 192.98 198.364 190.431 198.364 188.001 cv
198.364 183.91 195.832 180.594 191.742 180.594 cv
189.654 180.594 186.987 182.251 185.642 183.641 cv
184.295 182.251 181.629 180.594 179.542 180.594 cv
175.451 180.594 172.918 183.91 172.918 188.001 cv
172.918 193.839 182.784 200.336 185.642 201.814 cv
186.37 201.441 187.569 200.73 188.949 199.778 cv
194.443 195.232 li
cp
.988235 .388235 .12549 rgb
f
207.937 222.718 mo
209.033 223.814 210.322 224.652 211.768 225.208 cv
215.425 226.616 li
216.351 226.973 217.402 226.75 218.104 226.048 cv
228.591 215.562 li
229.307 214.847 229.522 213.778 229.143 212.841 cv
227.669 209.207 li
227.112 207.833 226.299 206.604 225.25 205.557 cv
216.633 196.939 li
216.139 196.446 215.482 196.173 214.783 196.173 cv
214.084 196.173 213.427 196.446 212.933 196.939 cv
212.474 197.399 li
212.014 196.939 li
211.48 196.406 210.771 196.112 210.016 196.112 cv
209.261 196.112 208.551 196.406 208.017 196.939 cv
206.318 198.639 li
205.417 197.739 li
204.912 197.233 204.241 196.955 203.526 196.955 cv
202.812 196.955 202.14 197.233 201.635 197.739 cv
199.712 199.662 li
199.224 200.149 198.628 199.684 197.996 199.191 cv
197.57 198.858 196.998 198.38 196.298 197.77 cv
195.125 196.748 193.885 195.61 193.737 195.462 cv
192.606 194.331 190.765 194.331 189.633 195.462 cv
188.502 196.594 188.502 198.435 189.633 199.566 cv
197.972 207.905 li
198.543 208.476 198.923 209.197 199.072 209.991 cv
199.623 212.943 li
199.843 214.119 200.406 215.187 201.251 216.033 cv
207.937 222.718 li
cp
216.326 228.084 mo
215.866 228.084 215.402 228.001 214.958 227.83 cv
211.301 226.422 li
209.684 225.799 208.243 224.862 207.018 223.637 cv
200.333 216.952 li
199.3 215.92 198.613 214.616 198.345 213.182 cv
197.794 210.229 li
197.694 209.695 197.438 209.208 197.053 208.824 cv
188.714 200.485 li
187.076 198.847 187.076 196.181 188.714 194.543 cv
190.353 192.904 193.018 192.904 194.657 194.543 cv
195 194.885 198.061 197.653 199.12 198.415 cv
200.716 196.819 li
202.259 195.276 204.767 195.27 206.318 196.8 cv
207.098 196.021 li
207.877 195.241 208.913 194.812 210.016 194.812 cv
210.914 194.812 211.768 195.097 212.476 195.625 cv
213.142 195.137 213.942 194.873 214.783 194.873 cv
215.83 194.873 216.813 195.281 217.553 196.021 cv
226.17 204.637 li
227.342 205.809 228.252 207.182 228.874 208.718 cv
230.348 212.353 li
230.924 213.775 230.596 215.396 229.51 216.481 cv
219.023 226.968 li
218.296 227.695 217.319 228.084 216.326 228.084 cv
cp
1 1 1 rgb
f
337.479 145.044 mo
386.445 145.044 li
386.445 107.96 li
337.479 107.96 li
337.479 145.044 li
cp
387.746 146.344 mo
336.179 146.344 li
336.179 106.66 li
387.746 106.66 li
387.746 146.344 li
cp
f
337.479 115.239 mo
386.445 115.239 li
386.445 107.96 li
337.479 107.96 li
337.479 115.239 li
cp
387.746 116.539 mo
336.179 116.539 li
336.179 106.66 li
387.746 106.66 li
387.746 116.539 li
cp
f
355.605 121.723 mo
370.584 130.371 li
355.605 139.018 li
355.605 121.723 li
cp
.152941 .666667 .882353 rgb
f
343.344 111.6 mo
343.344 112.273 342.797 112.82 342.123 112.82 cv
341.449 112.82 340.903 112.273 340.903 111.6 cv
340.903 110.926 341.449 110.379 342.123 110.379 cv
342.797 110.379 343.344 110.926 343.344 111.6 cv
cp
1 1 1 rgb
f
347.294 111.6 mo
347.294 112.273 346.748 112.82 346.074 112.82 cv
345.4 112.82 344.854 112.273 344.854 111.6 cv
344.854 110.926 345.4 110.379 346.074 110.379 cv
346.748 110.379 347.294 110.926 347.294 111.6 cv
cp
f
351.245 111.6 mo
351.245 112.273 350.699 112.82 350.025 112.82 cv
349.352 112.82 348.805 112.273 348.805 111.6 cv
348.805 110.926 349.352 110.379 350.025 110.379 cv
350.699 110.379 351.245 110.926 351.245 111.6 cv
cp
f
125.991 40.438 mo
119.708 40.438 114.597 35.3262 114.597 29.0435 cv
114.597 22.7603 119.708 17.6489 125.991 17.6489 cv
128.586 17.6489 131.125 18.5444 133.141 20.1709 cv
132.325 21.1831 li
130.539 19.7422 128.29 18.9487 125.991 18.9487 cv
120.425 18.9487 115.896 23.4771 115.896 29.0435 cv
115.896 34.6094 120.425 39.1377 125.991 39.1377 cv
130.886 39.1377 135.064 35.6475 135.926 30.8384 cv
137.206 31.0679 li
136.232 36.4971 131.516 40.438 125.991 40.438 cv
cp
.678431 .862745 .219608 rgb
f
136.987 54.7988 mo
114.345 54.7988 li
114.345 50.9111 li
114.345 44.4893 119.569 39.2651 125.991 39.2651 cv
129.101 39.2651 132.026 40.4761 134.227 42.6753 cv
134.446 42.9028 li
133.494 43.7886 li
133.308 43.5947 li
131.353 41.6411 128.754 40.5649 125.991 40.5649 cv
120.286 40.5649 115.645 45.2061 115.645 50.9111 cv
115.645 53.499 li
136.987 53.499 li
136.987 54.7988 li
cp
f
146.781 7.87451 mo
139.385 7.87451 133.368 13.8916 133.368 21.2881 cv
133.368 28.6841 139.385 34.7017 146.781 34.7017 cv
154.178 34.7017 160.195 28.6841 160.195 21.2881 cv
160.195 13.8916 154.178 7.87451 146.781 7.87451 cv
cp
146.781 36.0015 mo
138.668 36.0015 132.068 29.4009 132.068 21.2881 cv
132.068 13.1748 138.668 6.57471 146.781 6.57471 cv
154.895 6.57471 161.495 13.1748 161.495 21.2881 cv
161.495 29.4009 154.895 36.0015 146.781 36.0015 cv
cp
f
161.823 54.7988 mo
151.958 54.7988 li
151.958 53.499 li
160.523 53.499 li
160.523 49.9106 li
160.523 47.7827 160.05 45.7432 159.118 43.8496 cv
160.284 43.2754 li
161.306 45.3491 161.823 47.5815 161.823 49.9106 cv
161.823 54.7988 li
cp
f
146.783 54.7988 mo
131.739 54.7988 li
131.739 49.9106 li
131.739 41.6157 138.487 34.8677 146.781 34.8677 cv
150.528 34.8677 154.117 36.2529 156.888 38.7686 cv
156.014 39.731 li
153.483 37.4331 150.204 36.1675 146.781 36.1675 cv
139.204 36.1675 133.039 42.333 133.039 49.9106 cv
133.039 53.499 li
146.783 53.499 li
146.783 54.7988 li
cp
f
171.086 61.1401 mo
167.141 65.686 160.257 66.1724 155.711 62.2266 cv
151.166 58.2813 150.679 51.3975 154.625 46.8516 cv
158.57 42.3062 165.454 41.8193 170 45.7651 cv
174.545 49.7104 175.032 56.5942 171.086 61.1401 cv
cp
150.716 43.4595 mo
144.897 50.1636 145.615 60.3159 152.319 66.1348 cv
159.023 71.9536 169.175 71.2363 174.995 64.5322 cv
180.813 57.8281 180.096 47.6758 173.392 41.8569 cv
166.688 36.0381 156.536 36.7554 150.716 43.4595 cv
cp
.152941 .666667 .882353 rgb
f
181.66 71.314 mo
174.563 65.0186 li
175.426 64.0459 li
182.522 70.3413 li
181.66 71.314 li
cp
.678431 .862745 .219608 rgb
f
184.278 70.4819 mo
183.65 70.4819 183.025 70.7432 182.582 71.2539 cv
182.189 71.7061 181.996 72.2847 182.038 72.8823 cv
182.081 73.48 182.353 74.0259 182.806 74.4185 cv
193.434 83.6431 li
193.886 84.0361 194.465 84.229 195.063 84.187 cv
195.66 84.1445 196.206 83.8721 196.598 83.4194 cv
197.409 82.4854 197.309 81.0654 196.375 80.2544 cv
185.747 71.0298 li
185.323 70.6621 184.799 70.4819 184.278 70.4819 cv
cp
194.899 85.4927 mo
194.046 85.4927 193.231 85.1895 192.581 84.625 cv
181.954 75.4004 li
181.239 74.7798 180.808 73.9185 180.742 72.9741 cv
180.675 72.0298 180.98 71.1162 181.6 70.4014 cv
182.881 68.9263 185.123 68.7676 186.599 70.0483 cv
197.227 79.2729 li
198.702 80.5537 198.861 82.7959 197.58 84.2715 cv
196.959 84.9863 196.098 85.417 195.154 85.4834 cv
194.899 85.4927 li
cp
f
181.114 34.4028 mo
179.814 34.4028 li
179.814 18.2988 li
181.114 18.2988 li
181.114 34.4028 li
cp
1 1 1 rgb
f
188.516 27.001 mo
172.412 27.001 li
172.412 25.7007 li
188.516 25.7007 li
188.516 27.001 li
cp
f
130.683 76.0234 mo
129.382 76.0234 li
129.382 64.1167 li
130.683 64.1167 li
130.683 76.0234 li
cp
f
135.986 70.7197 mo
124.079 70.7197 li
124.079 69.4199 li
135.986 69.4199 li
135.986 70.7197 li
cp
f
226.647 151.286 mo
226.647 153.892 224.535 156.005 221.929 156.005 cv
219.323 156.005 217.21 153.892 217.21 151.286 cv
217.21 148.68 219.323 146.567 221.929 146.567 cv
224.535 146.567 226.647 148.68 226.647 151.286 cv
cp
1 .784314 .180392 rgb
f
214.707 142.762 mo
213.865 141.771 li
216.11 139.862 218.974 138.812 221.929 138.812 cv
224.848 138.812 227.687 139.841 229.924 141.711 cv
229.09 142.708 li
227.087 141.034 224.543 140.111 221.929 140.111 cv
219.282 140.111 216.717 141.053 214.707 142.762 cv
cp
f
208.367 135.28 mo
207.525 134.289 li
211.538 130.88 216.654 129.003 221.929 129.003 cv
227.146 129.003 232.217 130.842 236.209 134.182 cv
235.374 135.179 li
231.616 132.035 226.842 130.303 221.929 130.303 cv
216.961 130.303 212.145 132.071 208.367 135.28 cv
cp
f
201.313 126.958 mo
200.473 125.966 li
206.455 120.894 214.075 118.101 221.929 118.101 cv
225.887 118.101 229.759 118.79 233.437 120.15 cv
236.99 121.464 240.273 123.368 243.195 125.809 cv
242.361 126.806 li
239.555 124.461 236.4 122.632 232.986 121.37 cv
229.452 120.063 225.732 119.4 221.929 119.4 cv
214.383 119.4 207.062 122.084 201.313 126.958 cv
cp
f
63.5117 123.546 mo
85.8027 132.095 li
87.3496 126.103 li
65.0586 117.555 li
63.5117 123.546 li
cp
86.6968 133.83 mo
61.9629 124.345 li
64.1641 115.819 li
88.8984 125.305 li
86.6968 133.83 li
cp
1 1 1 rgb
f
82.4414 150.312 mo
81.1826 149.987 li
87.4946 125.542 li
88.7534 125.867 li
82.4414 150.312 li
cp
f
58.9287 141.295 mo
57.6699 140.97 li
63.9819 116.524 li
65.2407 116.85 li
58.9287 141.295 li
cp
f
51.8945 139.479 mo
51.4834 141.071 52.4443 142.701 54.0366 143.112 cv
54.8076 143.311 55.6104 143.198 56.2969 142.793 cv
56.9829 142.389 57.4707 141.741 57.6699 140.97 cv
57.8691 140.198 57.7559 139.396 57.3511 138.709 cv
56.9468 138.023 56.2993 137.535 55.5278 137.336 cv
53.9355 136.925 52.3057 137.886 51.8945 139.479 cv
cp
54.7817 144.507 mo
54.4282 144.507 54.0693 144.463 53.7114 144.371 cv
51.4253 143.78 50.0454 141.439 50.6357 139.153 cv
51.2261 136.867 53.5664 135.487 55.853 136.078 cv
58.1392 136.668 59.519 139.008 58.9287 141.295 cv
58.4307 143.223 56.687 144.507 54.7817 144.507 cv
cp
f
75.4072 148.495 mo
74.9961 150.087 75.957 151.717 77.5493 152.128 cv
78.3203 152.328 79.123 152.215 79.8096 151.81 cv
80.4956 151.405 80.9834 150.758 81.1826 149.987 cv
81.3818 149.215 81.2686 148.413 80.8638 147.726 cv
80.4595 147.04 79.812 146.552 79.0405 146.353 cv
77.4482 145.942 75.8184 146.903 75.4072 148.495 cv
cp
78.3022 153.525 mo
77.9429 153.525 77.5811 153.479 77.2241 153.387 cv
74.9375 152.797 73.5581 150.457 74.1484 148.17 cv
74.7388 145.884 77.0791 144.504 79.3652 145.095 cv
81.6519 145.685 83.0313 148.025 82.4414 150.312 cv
82.1553 151.419 81.4551 152.349 80.4697 152.93 cv
79.8018 153.324 79.0576 153.525 78.3022 153.525 cv
cp
f
409.159 66.7915 mo
410.079 69.3389 li
421.936 66.5225 li
421.016 63.9751 li
409.159 66.7915 li
cp
409.251 70.8721 mo
407.441 65.8628 li
421.844 62.4419 li
423.653 67.4507 li
409.251 70.8721 li
cp
.988235 .388235 .12549 rgb
f
425.416 76.1538 mo
420.818 63.4292 li
422.041 62.9878 li
426.639 75.7119 li
425.416 76.1538 li
cp
f
412.286 79.2725 mo
407.688 66.5479 li
408.911 66.1064 li
413.509 78.8306 li
412.286 79.2725 li
cp
f
411.067 78.416 mo
410.919 78.416 410.77 78.4419 410.626 78.4937 cv
409.954 78.7368 409.604 79.4814 409.848 80.1538 cv
409.965 80.4795 410.202 80.7397 410.516 80.8867 cv
410.829 81.0342 411.182 81.0503 411.507 80.9326 cv
412.18 80.6895 412.529 79.9448 412.286 79.2725 cv
412.168 78.9468 411.931 78.6865 411.617 78.5391 cv
411.442 78.457 411.255 78.416 411.067 78.416 cv
cp
411.065 82.311 mo
410.689 82.311 410.314 82.2285 409.964 82.064 cv
409.336 81.769 408.86 81.2476 408.625 80.5952 cv
408.138 79.249 408.838 77.7578 410.185 77.271 cv
410.837 77.0352 411.542 77.0679 412.17 77.3623 cv
412.798 77.6572 413.273 78.1787 413.509 78.8306 cv
413.995 80.1772 413.296 81.6685 411.949 82.1553 cv
411.661 82.2593 411.362 82.311 411.065 82.311 cv
cp
f
424.195 75.2979 mo
424.049 75.2979 423.9 75.3228 423.756 75.375 cv
423.43 75.4927 423.17 75.73 423.022 76.0435 cv
422.875 76.3574 422.859 76.709 422.977 77.0347 cv
423.22 77.7075 423.965 78.0566 424.637 77.814 cv
425.31 77.5708 425.658 76.8262 425.416 76.1538 cv
425.226 75.6265 424.726 75.2979 424.195 75.2979 cv
cp
424.199 79.1909 mo
423.136 79.1909 422.136 78.5327 421.754 77.4766 cv
421.519 76.8242 421.551 76.1196 421.846 75.4917 cv
422.14 74.8638 422.661 74.3882 423.313 74.1523 cv
424.66 73.6655 426.151 74.3652 426.639 75.7119 cv
427.125 77.0586 426.425 78.5498 425.078 79.0366 cv
424.788 79.1416 424.491 79.1909 424.199 79.1909 cv
cp
f
282.585 138.569 mo
293.654 138.569 li
293.797 139.025 li
294.641 141.725 296.359 144.148 298.637 145.849 cv
300.992 147.608 303.795 148.539 306.744 148.539 cv
314.222 148.539 320.306 142.455 320.306 134.977 cv
320.306 127.499 314.222 121.415 306.744 121.415 cv
269.496 121.415 li
262.019 121.415 255.935 127.499 255.935 134.977 cv
255.935 142.455 262.019 148.539 269.496 148.539 cv
272.444 148.539 275.248 147.608 277.604 145.849 cv
279.881 144.148 281.6 141.725 282.443 139.025 cv
282.585 138.569 li
cp
306.744 149.838 mo
303.513 149.838 300.44 148.819 297.858 146.891 cv
295.492 145.123 293.677 142.644 292.707 139.869 cv
283.533 139.869 li
282.563 142.644 280.748 145.123 278.381 146.891 cv
275.8 148.819 272.728 149.838 269.496 149.838 cv
261.302 149.838 254.635 143.171 254.635 134.977 cv
254.635 126.782 261.302 120.115 269.496 120.115 cv
306.744 120.115 li
314.938 120.115 321.605 126.782 321.605 134.977 cv
321.605 143.171 314.938 149.838 306.744 149.838 cv
cp
f
270.913 139.434 mo
269.613 139.434 li
269.613 129.605 li
270.913 129.605 li
270.913 139.434 li
cp
f
275.178 135.169 mo
265.349 135.169 li
265.349 133.87 li
275.178 133.87 li
275.178 135.169 li
cp
f
308.902 129.675 mo
308.902 130.734 308.043 131.593 306.983 131.593 cv
305.924 131.593 305.064 130.734 305.064 129.675 cv
305.064 128.615 305.924 127.756 306.983 127.756 cv
308.043 127.756 308.902 128.615 308.902 129.675 cv
cp
f
308.902 138.737 mo
308.902 139.797 308.043 140.656 306.983 140.656 cv
305.924 140.656 305.064 139.797 305.064 138.737 cv
305.064 137.678 305.924 136.818 306.983 136.818 cv
308.043 136.818 308.902 137.678 308.902 138.737 cv
cp
f
311.515 136.125 mo
310.455 136.125 309.596 135.266 309.596 134.206 cv
309.596 133.146 310.455 132.287 311.515 132.287 cv
312.574 132.287 313.434 133.146 313.434 134.206 cv
313.434 135.266 312.574 136.125 311.515 136.125 cv
cp
f
302.452 136.125 mo
301.392 136.125 300.533 135.266 300.533 134.206 cv
300.533 133.146 301.392 132.287 302.452 132.287 cv
303.512 132.287 304.371 133.146 304.371 134.206 cv
304.371 135.266 303.512 136.125 302.452 136.125 cv
cp
f
381.216 95.4443 mo
365.077 95.4443 li
362.089 95.4443 359.657 93.0137 359.657 90.0254 cv
359.657 57.7202 li
359.657 54.7324 362.089 52.3013 365.077 52.3013 cv
379.363 52.3013 li
379.723 52.3013 380.014 52.5923 380.014 52.9512 cv
380.014 53.3101 379.723 53.6011 379.363 53.6011 cv
365.077 53.6011 li
362.806 53.6011 360.958 55.4492 360.958 57.7202 cv
360.958 90.0254 li
360.958 92.2969 362.806 94.1445 365.077 94.1445 cv
381.216 94.1445 li
383.488 94.1445 385.337 92.2969 385.337 90.0254 cv
385.337 75.7168 li
385.337 75.3579 385.628 75.0669 385.986 75.0669 cv
386.346 75.0669 386.637 75.3579 386.637 75.7168 cv
386.637 90.0254 li
386.637 93.0137 384.205 95.4443 381.216 95.4443 cv
cp
1 .784314 .180392 rgb
f
385.986 87.6118 mo
360.308 87.6118 li
359.948 87.6118 359.657 87.3208 359.657 86.9619 cv
359.657 57.7202 li
359.657 57.3613 359.948 57.0703 360.308 57.0703 cv
375.074 57.0703 li
375.434 57.0703 375.725 57.3613 375.725 57.7202 cv
375.725 58.0796 375.434 58.3706 375.074 58.3706 cv
360.958 58.3706 li
360.958 86.312 li
385.337 86.312 li
385.337 75.7168 li
385.337 75.3579 385.628 75.0669 385.986 75.0669 cv
386.346 75.0669 386.637 75.3579 386.637 75.7168 cv
386.637 86.9619 li
386.637 87.3208 386.346 87.6118 385.986 87.6118 cv
cp
f
375.582 91.3218 mo
370.712 91.3218 li
370.354 91.3218 370.063 91.0308 370.063 90.6719 cv
370.063 90.313 370.354 90.022 370.712 90.022 cv
375.582 90.022 li
375.94 90.022 376.231 90.313 376.231 90.6719 cv
376.231 91.0308 375.94 91.3218 375.582 91.3218 cv
cp
f
394.873 72.0908 mo
399.709 67.2549 399.709 59.4136 394.873 54.5776 cv
390.037 49.7412 382.195 49.7412 377.359 54.5776 cv
373.687 58.2505 372.804 63.6563 374.71 68.1631 cv
373.473 75.9775 li
381.287 74.7407 li
385.794 76.6465 391.2 75.7642 394.873 72.0908 cv
cp
.976471 .396078 .121569 rgb
f
379.283 68.0078 mo
393.046 68.0078 li
393.046 58.9199 li
379.283 58.9199 li
379.283 68.0078 li
cp
393.695 69.3081 mo
378.633 69.3081 li
378.274 69.3081 377.983 69.0171 377.983 68.6582 cv
377.983 58.27 li
377.983 57.9111 378.274 57.6201 378.633 57.6201 cv
393.695 57.6201 li
394.055 57.6201 394.346 57.9111 394.346 58.27 cv
394.346 68.6582 li
394.346 69.0171 394.055 69.3081 393.695 69.3081 cv
cp
1 .784314 .180392 rgb
f
380.332 58.9199 mo
386.164 64.1494 li
391.997 58.9199 li
380.332 58.9199 li
cp
386.164 65.6724 mo
386.009 65.6724 385.854 65.6167 385.73 65.5063 cv
378.199 58.7539 li
377.999 58.5742 377.93 58.2896 378.026 58.0376 cv
378.122 57.7861 378.364 57.6201 378.633 57.6201 cv
393.695 57.6201 li
393.965 57.6201 394.206 57.7861 394.303 58.0376 cv
394.398 58.2896 394.33 58.5742 394.13 58.7539 cv
386.599 65.5063 li
386.475 65.6167 386.319 65.6724 386.164 65.6724 cv
cp
f
322.67 70.1958 mo
337.28 84.8066 li
341.646 80.4404 li
327.035 65.8301 li
322.67 70.1958 li
cp
337.28 86.376 mo
337.107 86.376 336.942 86.3076 336.82 86.1855 cv
321.291 70.6558 li
321.037 70.4019 321.037 69.9902 321.291 69.7363 cv
326.576 64.4512 li
326.698 64.3291 326.863 64.2607 327.035 64.2607 cv
327.208 64.2607 327.373 64.3291 327.495 64.4512 cv
343.025 79.981 li
343.146 80.103 343.215 80.2681 343.215 80.4404 cv
343.215 80.6128 343.146 80.7783 343.025 80.9004 cv
337.739 86.1855 li
337.618 86.3076 337.452 86.376 337.28 86.376 cv
cp
.988235 .388235 .12549 rgb
f
338.441 85.4834 mo
344.829 87.9897 li
342.323 81.6021 li
338.441 85.4834 li
cp
345.979 89.7891 mo
345.741 89.7441 li
337.043 86.3311 li
336.839 86.251 336.688 86.0732 336.644 85.8584 cv
336.599 85.644 336.665 85.4214 336.82 85.2661 cv
342.105 79.981 li
342.261 79.8262 342.483 79.7593 342.698 79.8042 cv
342.913 79.8491 343.09 79.999 343.17 80.2031 cv
346.584 88.9014 li
346.678 89.1421 346.621 89.416 346.438 89.5986 cv
346.313 89.7227 346.147 89.7891 345.979 89.7891 cv
cp
f
322.67 70.1958 mo
326.608 74.1353 li
330.975 69.769 li
327.035 65.8301 li
322.67 70.1958 li
cp
326.608 75.7041 mo
326.437 75.7041 326.271 75.6357 326.148 75.5142 cv
321.291 70.6558 li
321.037 70.4019 321.037 69.9902 321.291 69.7363 cv
326.576 64.4512 li
326.698 64.3291 326.863 64.2607 327.035 64.2607 cv
327.208 64.2607 327.373 64.3291 327.495 64.4512 cv
332.354 69.3096 li
332.476 69.4316 332.544 69.5967 332.544 69.769 cv
332.544 69.9414 332.476 70.1069 332.354 70.229 cv
327.068 75.5142 li
326.946 75.6357 326.781 75.7041 326.608 75.7041 cv
cp
f
345.979 95.2334 mo
328.887 95.2334 li
328.527 95.2334 328.236 94.9424 328.236 94.5835 cv
328.236 94.2246 328.527 93.9336 328.887 93.9336 cv
345.979 93.9336 li
346.338 93.9336 346.628 94.2246 346.628 94.5835 cv
346.628 94.9424 346.338 95.2334 345.979 95.2334 cv
cp
f
346.972 196.246 mo
347.404 196.477 349.66 197.611 352.73 197.863 cv
357.259 198.233 361.341 196.606 364.864 193.025 cv
367.004 190.851 368.521 188.538 369.37 186.149 cv
370.046 184.251 370.307 182.297 370.144 180.343 cv
369.889 177.273 368.654 175.144 368.44 174.795 cv
365.213 171.567 li
359.608 177.171 li
362.888 180.45 li
362.93 180.492 363.916 181.493 364.254 183.135 cv
364.813 185.848 363.21 188.138 361.766 189.582 cv
359.829 191.519 357.82 192.382 355.797 192.147 cv
354.217 191.964 353.144 191.155 352.755 190.815 cv
352.723 190.785 li
349.445 187.505 li
343.911 193.039 li
346.972 196.246 li
cp
353.92 199.211 mo
353.445 199.211 352.993 199.19 352.566 199.153 cv
348.884 198.839 346.351 197.391 346.245 197.33 cv
346.101 197.216 li
342.532 193.477 li
342.289 193.222 342.294 192.818 342.543 192.569 cv
348.985 186.126 li
349.107 186.004 349.272 185.936 349.445 185.936 cv
349.618 185.936 349.783 186.004 349.905 186.126 cv
353.626 189.85 li
353.879 190.067 354.722 190.714 355.947 190.856 cv
357.557 191.042 359.205 190.305 360.847 188.663 cv
364.977 184.533 362.091 181.495 361.967 181.367 cv
358.229 177.63 li
357.977 177.376 357.977 176.965 358.229 176.711 cv
364.753 170.188 li
364.875 170.066 365.04 169.998 365.213 169.998 cv
365.385 169.998 365.55 170.066 365.672 170.188 cv
369.411 173.927 li
369.494 174.029 li
369.561 174.129 371.119 176.528 371.436 180.187 cv
371.726 183.547 370.982 188.661 365.791 193.937 cv
361.627 198.169 357.234 199.211 353.92 199.211 cv
cp
.678431 .862745 .219608 rgb
f
346.998 197.417 mo
346.831 197.417 346.666 197.354 346.539 197.228 cv
346.284 196.974 346.283 196.563 346.537 196.309 cv
350.185 192.648 li
350.438 192.394 350.85 192.393 351.104 192.646 cv
351.358 192.9 351.359 193.312 351.105 193.566 cv
347.458 197.226 li
347.331 197.354 347.164 197.417 346.998 197.417 cv
cp
f
362.578 181.709 mo
362.413 181.709 362.248 181.647 362.121 181.522 cv
361.866 181.27 361.864 180.858 362.116 180.603 cv
365.832 176.847 li
366.085 176.591 366.496 176.589 366.751 176.842 cv
367.006 177.094 367.009 177.505 366.756 177.761 cv
363.04 181.517 li
362.913 181.646 362.746 181.709 362.578 181.709 cv
cp
f
195.691 61.6943 mo
201.531 61.6943 li
201.531 55.8711 li
207.354 55.8711 li
207.354 50.0313 li
201.531 50.0313 li
201.531 44.2085 li
195.691 44.2085 li
195.691 50.0313 li
189.868 50.0313 li
189.868 55.8711 li
195.691 55.8711 li
195.691 61.6943 li
cp
202.831 62.9941 mo
194.391 62.9941 li
194.391 57.1714 li
188.568 57.1714 li
188.568 48.731 li
194.391 48.731 li
194.391 42.9082 li
202.831 42.9082 li
202.831 48.731 li
208.654 48.731 li
208.654 57.1714 li
202.831 57.1714 li
202.831 62.9941 li
cp
1 .784314 .180392 rgb
f
243.478 236.408 mo
250.169 236.408 li
250.169 229.892 li
256.687 229.892 li
256.687 223.199 li
250.169 223.199 li
250.169 216.682 li
243.478 216.682 li
243.478 223.199 li
236.96 223.199 li
236.96 229.892 li
243.478 229.892 li
243.478 236.408 li
cp
251.469 237.709 mo
242.177 237.709 li
242.177 231.191 li
235.66 231.191 li
235.66 221.899 li
242.177 221.899 li
242.177 215.382 li
251.469 215.382 li
251.469 221.899 li
257.986 221.899 li
257.986 231.191 li
251.469 231.191 li
251.469 237.709 li
cp
f
324.41 104.624 mo
320.029 104.624 li
320.029 100.242 li
314.656 100.242 li
314.656 104.624 li
310.275 104.624 li
310.275 109.996 li
314.656 109.996 li
314.656 114.377 li
320.029 114.377 li
320.029 109.996 li
324.41 109.996 li
324.41 104.624 li
cp
.678431 .862745 .219608 rgb
f
384.821 33.1807 mo
381.281 33.1807 li
381.281 29.6401 li
376.939 29.6401 li
376.939 33.1807 li
373.398 33.1807 li
373.398 37.522 li
376.939 37.522 li
376.939 41.0625 li
381.281 41.0625 li
381.281 37.522 li
384.821 37.522 li
384.821 33.1807 li
cp
1 .776471 .188235 rgb
f
221.929 236.105 mo
215.246 236.105 209.809 241.542 209.809 248.226 cv
209.809 254.908 215.246 260.346 221.929 260.346 cv
228.612 260.346 234.05 254.908 234.05 248.226 cv
234.05 241.542 228.612 236.105 221.929 236.105 cv
cp
221.929 261.646 mo
214.529 261.646 208.509 255.625 208.509 248.226 cv
208.509 240.825 214.529 234.805 221.929 234.805 cv
229.329 234.805 235.35 240.825 235.35 248.226 cv
235.35 255.625 229.329 261.646 221.929 261.646 cv
cp
.988235 .388235 .12549 rgb
f
217.792 241.511 mo
229.422 248.226 li
217.792 254.939 li
217.792 241.511 li
cp
1 .776471 .188235 rgb
f
171.865 96.5049 mo
161.897 96.5049 153.789 104.614 153.789 114.582 cv
153.788 114.598 li
153.751 116.205 154.154 120.713 155.944 126.264 cv
157.258 130.337 159.102 134.38 161.425 138.28 cv
164.227 142.983 167.737 147.491 171.865 151.688 cv
176.005 147.479 179.524 142.958 182.33 138.24 cv
184.654 134.332 186.497 130.281 187.807 126.201 cv
190.03 119.277 189.943 114.644 189.942 114.598 cv
189.942 114.582 li
189.942 104.614 181.833 96.5049 171.865 96.5049 cv
cp
171.865 153.53 mo
171.406 153.071 li
166.99 148.655 163.248 143.889 160.284 138.904 cv
157.91 134.912 156.026 130.771 154.686 126.598 cv
152.422 119.55 152.482 114.872 152.488 114.574 cv
152.493 103.894 161.184 95.2051 171.865 95.2051 cv
182.547 95.2051 191.238 103.894 191.242 114.574 cv
191.249 114.872 191.308 119.55 189.045 126.598 cv
187.705 130.771 185.821 134.912 183.447 138.904 cv
180.483 143.889 176.741 148.655 172.325 153.071 cv
171.865 153.53 li
cp
.988235 .388235 .12549 rgb
f
181.662 115.72 mo
181.662 121.131 177.276 125.517 171.865 125.517 cv
166.455 125.517 162.068 121.131 162.068 115.72 cv
162.068 110.31 166.455 105.924 171.865 105.924 cv
177.276 105.924 181.662 110.31 181.662 115.72 cv
cp
1 .776471 .188235 rgb
f
171.96 118.517 mo
167.098 113.899 li
167.993 112.957 li
171.771 116.543 li
181.133 103.416 li
182.191 104.17 li
171.96 118.517 li
cp
.988235 .388235 .12549 rgb
f
197.886 145.002 mo
197.063 145.002 196.011 145.657 195.48 146.205 cv
194.949 145.657 193.896 145.002 193.073 145.002 cv
191.459 145.002 190.46 146.311 190.46 147.925 cv
190.46 150.228 194.353 152.791 195.48 153.374 cv
196.592 152.804 200.499 150.228 200.499 147.925 cv
200.499 146.311 199.5 145.002 197.886 145.002 cv
cp
.152941 .666667 .882353 rgb
f
440.26 81.54 mo
439.437 81.54 438.385 82.1938 437.854 82.7422 cv
437.322 82.1938 436.271 81.54 435.447 81.54 cv
433.833 81.54 432.834 82.8481 432.834 84.4619 cv
432.834 86.7651 436.727 89.3281 437.854 89.9116 cv
438.966 89.3413 442.873 86.7651 442.873 84.4619 cv
442.873 82.8481 441.874 81.54 440.26 81.54 cv
cp
1 1 1 rgb
f
359.927 31.4746 mo
358.816 31.4746 357.397 32.356 356.682 33.0947 cv
355.966 32.356 354.547 31.4746 353.438 31.4746 cv
351.262 31.4746 349.915 33.2383 349.915 35.4141 cv
349.915 38.519 355.162 41.9746 356.682 42.7612 cv
358.182 41.9922 363.448 38.519 363.448 35.4141 cv
363.448 33.2383 362.102 31.4746 359.927 31.4746 cv
cp
.152941 .666667 .882353 rgb
f
79.8374 190.766 mo
79.0137 190.766 77.9619 191.42 77.4307 191.968 cv
76.8994 191.42 75.8472 190.766 75.0239 190.766 cv
73.4102 190.766 72.4116 192.074 72.4116 193.688 cv
72.4116 195.991 76.3032 198.554 77.4307 199.137 cv
78.543 198.567 82.4497 195.991 82.4497 193.688 cv
82.4497 192.074 81.4512 190.766 79.8374 190.766 cv
cp
f
70.2588 15.665 mo
69.4351 15.665 68.3833 16.3188 67.8521 16.8667 cv
67.3208 16.3188 66.269 15.665 65.4453 15.665 cv
63.8315 15.665 62.833 16.9731 62.833 18.5869 cv
62.833 20.8901 66.7246 23.4531 67.8521 24.0366 cv
68.9644 23.4663 72.8711 20.8901 72.8711 18.5869 cv
72.8711 16.9731 71.8726 15.665 70.2588 15.665 cv
cp
f
80.6157 113.152 mo
79.6963 112.233 li
88.0361 103.894 li
88.9551 104.813 li
80.6157 113.152 li
cp
.678431 .862745 .219608 rgb
f
88.0361 113.152 mo
79.6963 104.813 li
80.6157 103.894 li
88.9551 112.233 li
88.0361 113.152 li
cp
f
61.4219 159.332 mo
49.6279 159.332 li
49.6279 158.032 li
61.4219 158.032 li
61.4219 159.332 li
cp
.988235 .388235 .12549 rgb
f
56.1748 164.579 mo
54.8745 164.579 li
54.8745 152.785 li
56.1748 152.785 li
56.1748 164.579 li
cp
f
369.346 18.2783 mo
357.552 18.2783 li
357.552 16.978 li
369.346 16.978 li
369.346 18.2783 li
cp
f
364.099 23.5249 mo
362.799 23.5249 li
362.799 11.731 li
364.099 11.731 li
364.099 23.5249 li
cp
f
389.985 193.736 mo
389.066 192.817 li
397.405 184.478 li
398.325 185.396 li
389.985 193.736 li
cp
1 1 1 rgb
f
397.405 193.736 mo
389.066 185.396 li
389.985 184.478 li
398.325 192.817 li
397.405 193.736 li
cp
f
432.583 103.517 mo
432.583 109.943 427.373 115.153 420.946 115.153 cv
414.52 115.153 409.31 109.943 409.31 103.517 cv
409.31 97.0898 414.52 91.8799 420.946 91.8799 cv
427.373 91.8799 432.583 97.0898 432.583 103.517 cv
cp
.678431 .862745 .219608 rgb
f
432.855 130.707 mo
409.037 130.707 li
409.037 127.2 li
409.037 120.623 414.369 115.291 420.946 115.291 cv
427.523 115.291 432.855 120.623 432.855 127.2 cv
432.855 130.707 li
cp
f
36.7251 190.107 mo
59.5581 190.107 li
59.5581 174.764 li
36.7251 174.764 li
36.7251 190.107 li
cp
60.208 191.407 mo
36.0752 191.407 li
35.7158 191.407 35.4248 191.116 35.4248 190.757 cv
35.4248 174.114 li
35.4248 173.755 35.7158 173.464 36.0752 173.464 cv
60.208 173.464 li
60.5669 173.464 60.8579 173.755 60.8579 174.114 cv
60.8579 190.757 li
60.8579 191.116 60.5669 191.407 60.208 191.407 cv
cp
1 .784314 .180392 rgb
f
37.7739 174.764 mo
48.1416 184.059 li
58.5093 174.764 li
37.7739 174.764 li
cp
48.1416 185.582 mo
47.9863 185.582 47.8311 185.527 47.7075 185.416 cv
35.6411 174.598 li
35.4404 174.418 35.3716 174.133 35.4678 173.881 cv
35.564 173.63 35.8057 173.464 36.0752 173.464 cv
60.208 173.464 li
60.4775 173.464 60.7188 173.63 60.8149 173.881 cv
60.9111 174.133 60.8423 174.418 60.6421 174.598 cv
48.5752 185.416 li
48.4521 185.527 48.2969 185.582 48.1416 185.582 cv
cp
f
198.215 26.8677 mo
221.048 26.8677 li
221.048 11.5239 li
198.215 11.5239 li
198.215 26.8677 li
cp
221.698 28.1675 mo
197.564 28.1675 li
197.206 28.1675 196.915 27.8765 196.915 27.5176 cv
196.915 10.874 li
196.915 10.5151 197.206 10.2241 197.564 10.2241 cv
221.698 10.2241 li
222.057 10.2241 222.348 10.5151 222.348 10.874 cv
222.348 27.5176 li
222.348 27.8765 222.057 28.1675 221.698 28.1675 cv
cp
.988235 .388235 .12549 rgb
f
199.264 11.5239 mo
209.631 20.8193 li
219.999 11.5239 li
199.264 11.5239 li
cp
209.631 22.3423 mo
209.476 22.3423 209.321 22.2871 209.197 22.1763 cv
197.131 11.3579 li
196.93 11.1782 196.861 10.8936 196.958 10.6416 cv
197.054 10.3901 197.295 10.2241 197.564 10.2241 cv
221.698 10.2241 li
221.967 10.2241 222.208 10.3901 222.305 10.6416 cv
222.401 10.8936 222.332 11.1782 222.132 11.3579 cv
210.065 22.1763 li
209.942 22.2871 209.787 22.3423 209.631 22.3423 cv
cp
f
205.242 90.29 mo
206.962 95.5845 li
207.048 95.8491 207.294 96.0283 207.573 96.0283 cv
213.14 96.0283 li
213.761 96.0283 214.02 96.8242 213.517 97.1895 cv
209.013 100.462 li
208.788 100.625 208.694 100.915 208.78 101.18 cv
210.5 106.474 li
210.692 107.065 210.016 107.557 209.512 107.192 cv
205.009 103.919 li
204.784 103.756 204.479 103.756 204.254 103.919 cv
199.75 107.192 li
199.247 107.557 198.57 107.065 198.762 106.474 cv
200.482 101.18 li
200.568 100.915 200.475 100.625 200.25 100.462 cv
195.746 97.1895 li
195.243 96.8242 195.501 96.0283 196.123 96.0283 cv
201.69 96.0283 li
201.968 96.0283 202.214 95.8491 202.3 95.5845 cv
204.021 90.29 li
204.213 89.6987 205.05 89.6987 205.242 90.29 cv
cp
.780392 .92549 .964706 rgb
f
126.655 190.767 mo
126.037 190.968 li
126.655 190.767 li
cp
126.107 202.226 mo
126.36 202.226 126.612 202.304 126.828 202.46 cv
130.68 205.26 li
129.208 200.731 li
129.044 200.224 129.223 199.673 129.654 199.36 cv
133.506 196.562 li
128.744 196.562 li
128.212 196.562 127.744 196.221 127.579 195.715 cv
126.107 191.186 li
124.636 195.715 li
124.471 196.221 124.003 196.562 123.47 196.562 cv
118.708 196.562 li
122.561 199.36 li
122.992 199.673 123.17 200.224 123.006 200.731 cv
121.535 205.259 li
125.387 202.46 li
125.603 202.304 125.855 202.226 126.107 202.226 cv
cp
121.393 206.685 mo
121.142 206.685 120.892 206.605 120.672 206.446 cv
120.235 206.128 120.06 205.59 120.228 205.076 cv
121.753 200.38 li
117.759 197.479 li
117.321 197.161 117.146 196.623 117.313 196.108 cv
117.481 195.594 117.938 195.262 118.479 195.262 cv
123.416 195.262 li
124.942 190.566 li
125.109 190.052 125.566 189.72 126.107 189.72 cv
126.648 189.72 127.105 190.052 127.273 190.566 cv
128.798 195.262 li
133.735 195.262 li
134.276 195.262 134.734 195.594 134.901 196.108 cv
135.068 196.623 134.893 197.161 134.456 197.479 cv
130.462 200.38 li
131.987 205.076 li
132.154 205.59 131.979 206.128 131.542 206.446 cv
131.104 206.764 130.539 206.764 130.101 206.446 cv
126.107 203.544 li
122.113 206.446 li
121.895 206.605 121.644 206.685 121.393 206.685 cv
cp
.988235 .388235 .12549 rgb
f
110.605 76.6133 mo
112.326 81.9077 li
112.412 82.1724 112.658 82.3516 112.937 82.3516 cv
118.503 82.3516 li
119.125 82.3516 119.384 83.147 118.88 83.5127 cv
114.377 86.7847 li
114.152 86.9482 114.058 87.2383 114.144 87.5024 cv
115.864 92.7969 li
116.056 93.3887 115.379 93.8804 114.876 93.5146 cv
110.373 90.2427 li
110.147 90.0791 109.843 90.0791 109.618 90.2427 cv
105.114 93.5146 li
104.611 93.8804 103.934 93.3887 104.126 92.7969 cv
105.846 87.5024 li
105.932 87.2383 105.838 86.9482 105.613 86.7847 cv
101.109 83.5127 li
100.606 83.147 100.865 82.3516 101.487 82.3516 cv
107.054 82.3516 li
107.332 82.3516 107.578 82.1724 107.664 81.9077 cv
109.384 76.6133 li
109.577 76.022 110.414 76.022 110.605 76.6133 cv
cp
1 .776471 .188235 rgb
f
271.465 19.6392 mo
273.186 24.9336 li
273.271 25.1982 273.518 25.3774 273.796 25.3774 cv
279.362 25.3774 li
279.984 25.3774 280.243 26.1733 279.74 26.5386 cv
275.236 29.811 li
275.011 29.9746 274.917 30.2642 275.003 30.5288 cv
276.724 35.8232 li
276.915 36.4146 276.238 36.9063 275.735 36.541 cv
271.231 33.2686 li
271.007 33.105 270.702 33.105 270.477 33.2686 cv
265.974 36.541 li
265.47 36.9063 264.793 36.4146 264.985 35.8232 cv
266.706 30.5288 li
266.792 30.2642 266.697 29.9746 266.473 29.811 cv
261.969 26.5386 li
261.466 26.1733 261.725 25.3774 262.346 25.3774 cv
267.913 25.3774 li
268.191 25.3774 268.438 25.1982 268.523 24.9336 cv
270.244 19.6392 li
270.436 19.0479 271.272 19.0479 271.465 19.6392 cv
cp
1 .784314 .180392 rgb
f
200.032 232.277 mo
200.691 234.307 li
200.724 234.408 200.818 234.477 200.925 234.477 cv
203.058 234.477 li
203.296 234.477 203.396 234.781 203.203 234.922 cv
201.477 236.176 li
201.391 236.238 201.354 236.35 201.388 236.45 cv
202.047 238.479 li
202.121 238.706 201.861 238.895 201.668 238.755 cv
199.942 237.501 li
199.653 237.501 li
197.927 238.755 li
197.734 238.895 197.475 238.706 197.548 238.479 cv
198.208 236.45 li
198.241 236.35 198.205 236.238 198.118 236.176 cv
196.392 234.922 li
196.199 234.781 196.298 234.477 196.537 234.477 cv
198.67 234.477 li
198.777 234.477 198.872 234.408 198.904 234.307 cv
199.563 232.277 li
199.637 232.051 199.958 232.051 200.032 232.277 cv
cp
1 1 1 rgb
f
347.528 7.69629 mo
348.188 9.72559 li
348.221 9.82666 348.315 9.89551 348.422 9.89551 cv
350.555 9.89551 li
350.793 9.89551 350.893 10.2002 350.699 10.3403 cv
348.974 11.5947 li
348.888 11.6572 348.852 11.7681 348.885 11.8696 cv
349.544 13.8984 li
349.617 14.1255 349.357 14.314 349.165 14.1738 cv
347.439 12.9199 li
347.149 12.9199 li
345.424 14.1738 li
345.23 14.314 344.972 14.1255 345.045 13.8984 cv
345.704 11.8696 li
345.737 11.7681 345.701 11.6572 345.615 11.5947 cv
343.889 10.3403 li
343.696 10.2002 343.795 9.89551 344.033 9.89551 cv
346.167 9.89551 li
346.273 9.89551 346.368 9.82666 346.401 9.72559 cv
347.061 7.69629 li
347.134 7.46973 347.455 7.46973 347.528 7.69629 cv
cp
f
171.779 7.54932 mo
172.438 9.57861 li
172.472 9.68018 172.566 9.74854 172.673 9.74854 cv
174.806 9.74854 li
175.044 9.74854 175.144 10.0537 174.951 10.1938 cv
173.225 11.4478 li
173.139 11.5103 173.103 11.6216 173.135 11.7227 cv
173.795 13.752 li
173.868 13.9785 173.609 14.167 173.416 14.0269 cv
171.69 12.7729 li
171.401 12.7729 li
169.675 14.0269 li
169.482 14.167 169.223 13.9785 169.296 13.752 cv
169.956 11.7227 li
169.988 11.6216 169.952 11.5103 169.866 11.4478 cv
168.14 10.1938 li
167.947 10.0537 168.046 9.74854 168.285 9.74854 cv
170.418 9.74854 li
170.525 9.74854 170.619 9.68018 170.652 9.57861 cv
171.312 7.54932 li
171.385 7.32275 171.706 7.32275 171.779 7.54932 cv
cp
.988235 .388235 .12549 rgb
f
285.308 151.698 mo
285.967 153.727 li
286 153.828 286.094 153.896 286.201 153.896 cv
288.334 153.896 li
288.572 153.896 288.672 154.202 288.479 154.342 cv
286.753 155.596 li
286.666 155.658 286.631 155.77 286.663 155.871 cv
287.322 157.9 li
287.396 158.126 287.137 158.315 286.944 158.175 cv
285.218 156.921 li
284.929 156.921 li
283.203 158.175 li
283.01 158.315 282.75 158.126 282.824 157.9 cv
283.483 155.871 li
283.517 155.77 283.48 155.658 283.395 155.596 cv
281.668 154.342 li
281.476 154.202 281.574 153.896 281.813 153.896 cv
283.946 153.896 li
284.053 153.896 284.147 153.828 284.18 153.727 cv
284.84 151.698 li
284.913 151.471 285.233 151.471 285.308 151.698 cv
cp
1 .776471 .188235 rgb
f
81.2949 50.1743 mo
104.844 50.1743 li
104.844 27.8979 li
104.844 26.7549 103.914 25.8252 102.771 25.8252 cv
83.3677 25.8252 li
82.2246 25.8252 81.2949 26.7549 81.2949 27.8979 cv
81.2949 50.1743 li
cp
106.144 51.4741 mo
79.9946 51.4741 li
79.9946 27.8979 li
79.9946 26.0381 81.5078 24.5254 83.3677 24.5254 cv
102.771 24.5254 li
104.63 24.5254 106.144 26.0381 106.144 27.8979 cv
106.144 51.4741 li
cp
1 .784314 .180392 rgb
f
105.494 31.9961 mo
80.6445 31.9961 li
80.6445 30.6963 li
105.494 30.6963 li
105.494 31.9961 li
cp
f
84.5986 25.0039 mo
83.2983 25.0039 li
83.2983 21.3516 li
84.5986 21.3516 li
84.5986 25.0039 li
cp
f
102.98 25.0039 mo
101.68 25.0039 li
101.68 21.3516 li
102.98 21.3516 li
102.98 25.0039 li
cp
f
105.494 38.0322 mo
80.6445 38.0322 li
80.6445 36.7324 li
105.494 36.7324 li
105.494 38.0322 li
cp
f
105.494 44.5923 mo
80.6445 44.5923 li
80.6445 43.292 li
105.494 43.292 li
105.494 44.5923 li
cp
f
89.3779 50.8242 mo
88.0776 50.8242 li
88.0776 31.3462 li
89.3779 31.3462 li
89.3779 50.8242 li
cp
f
98.0483 50.8242 mo
96.748 50.8242 li
96.748 31.3462 li
98.0483 31.3462 li
98.0483 50.8242 li
cp
f
89.3779 43.292 mo
96.748 43.292 li
96.748 38.0322 li
89.3779 38.0322 li
89.3779 43.292 li
cp
98.0483 44.5923 mo
88.0776 44.5923 li
88.0776 36.7324 li
98.0483 36.7324 li
98.0483 44.5923 li
cp
f
157.725 81.6724 mo
159.011 87.4072 li
164.156 86.2534 li
162.871 80.519 li
157.725 81.6724 li
cp
.988235 .388235 .12549 rgb
f
157.452 87.7563 mo
156.167 82.022 li
142.999 84.9736 li
144.285 90.708 li
157.452 87.7563 li
cp
f
141.532 85.7339 mo
136.455 89.4521 li
142.634 90.6465 li
141.532 85.7339 li
cp
f
378.962 161.113 mo
384.821 160.659 li
384.414 155.402 li
378.555 155.855 li
378.962 161.113 li
cp
.152941 .666667 .882353 rgb
f
384.944 162.252 mo
379.085 162.706 li
380.127 176.16 li
385.986 175.706 li
384.944 162.252 li
cp
f
380.67 177.72 mo
383.625 183.277 li
385.689 177.331 li
380.67 177.72 li
cp
f
234.124 13.73 mo
237.62 9.00635 li
233.382 5.86914 li
229.886 10.5928 li
234.124 13.73 li
cp
.678431 .862745 .219608 rgb
f
238.904 9.95703 mo
235.407 14.6807 li
246.254 22.709 li
249.75 17.9854 li
238.904 9.95703 li
cp
f
247.788 23.3208 mo
253.922 24.7295 li
250.783 19.2744 li
247.788 23.3208 li
cp
f
177.877 231.84 mo
177.548 231.84 177.267 231.592 177.231 231.258 cv
176.521 224.553 li
169.592 225.288 li
169.234 225.325 168.915 225.067 168.876 224.71 cv
168.839 224.353 169.098 224.033 169.455 223.995 cv
177.03 223.192 li
177.387 223.155 177.707 223.413 177.745 223.77 cv
178.456 230.475 li
186.886 229.581 li
187.242 229.544 187.563 229.802 187.601 230.159 cv
187.638 230.516 187.379 230.836 187.022 230.874 cv
177.946 231.836 li
177.877 231.84 li
cp
f
316.454 89.1499 mo
308.77 86.1001 li
311.496 79.229 li
303.617 76.1021 li
304.097 74.8936 li
313.185 78.5005 li
310.457 85.3711 li
316.934 87.9414 li
316.454 89.1499 li
cp
1 1 1 rgb
f
400.862 107.866 mo
394.89 100.125 li
400.741 95.6089 li
396.484 90.0928 li
397.514 89.2983 li
402.564 95.8438 li
396.713 100.36 li
401.892 107.071 li
400.862 107.866 li
cp
f
433.064 72.04 mo
432.585 62.2744 li
439.968 61.9116 li
439.626 54.9521 li
440.925 54.8882 li
441.33 63.146 li
433.947 63.5088 li
434.363 71.9761 li
433.064 72.04 li
cp
1 .784314 .180392 rgb
f
223.165 42.8594 mo
222.038 42.2119 li
226.908 33.7344 li
233.318 37.417 li
236.789 31.376 li
237.916 32.0234 li
233.798 39.1919 li
227.388 35.5093 li
223.165 42.8594 li
cp
1 1 1 rgb
f
102.481 15.2935 mo
102.189 15.2935 101.923 15.0952 101.851 14.7988 cv
100.237 8.25244 li
93.4717 9.91992 li
93.123 10.0059 92.771 9.79248 92.6851 9.44434 cv
92.5996 9.0957 92.8125 8.74365 93.1611 8.65771 cv
100.558 6.83496 li
100.906 6.74902 101.258 6.96191 101.344 7.31055 cv
102.957 13.8569 li
111.188 11.8286 li
111.537 11.7422 111.889 11.9556 111.975 12.3042 cv
112.061 12.6523 111.848 13.0049 111.5 13.0908 cv
102.637 15.2744 li
102.481 15.2935 li
cp
.988235 .388235 .12549 rgb
f
23.3032 181.035 mo
16.5195 181.035 li
16.1606 181.035 15.8696 180.744 15.8696 180.385 cv
15.8696 180.025 16.1606 179.734 16.5195 179.734 cv
23.3032 179.734 li
23.6621 179.734 23.9531 180.025 23.9531 180.385 cv
23.9531 180.744 23.6621 181.035 23.3032 181.035 cv
cp
f
27.9346 176.506 mo
21.1514 176.506 li
20.7925 176.506 20.5015 176.215 20.5015 175.856 cv
20.5015 175.497 20.7925 175.206 21.1514 175.206 cv
27.9346 175.206 li
28.2935 175.206 28.585 175.497 28.585 175.856 cv
28.585 176.215 28.2935 176.506 27.9346 176.506 cv
cp
f
154.188 155.525 mo
147.405 155.525 li
147.405 154.226 li
154.188 154.226 li
154.188 155.525 li
cp
.678431 .862745 .219608 rgb
f
158.82 150.997 mo
152.036 150.997 li
152.036 149.697 li
158.82 149.697 li
158.82 150.997 li
cp
f
356.682 161.86 mo
349.898 161.86 li
349.539 161.86 349.248 161.569 349.248 161.21 cv
349.248 160.852 349.539 160.561 349.898 160.561 cv
356.682 160.561 li
357.041 160.561 357.332 160.852 357.332 161.21 cv
357.332 161.569 357.041 161.86 356.682 161.86 cv
cp
.988235 .388235 .12549 rgb
f
361.313 157.332 mo
354.53 157.332 li
354.171 157.332 353.88 157.041 353.88 156.682 cv
353.88 156.323 354.171 156.032 354.53 156.032 cv
361.313 156.032 li
361.673 156.032 361.963 156.323 361.963 156.682 cv
361.963 157.041 361.673 157.332 361.313 157.332 cv
cp
f
283.171 12.6162 mo
276.388 12.6162 li
276.388 11.3164 li
283.171 11.3164 li
283.171 12.6162 li
cp
1 1 1 rgb
f
287.803 8.08789 mo
281.02 8.08789 li
281.02 6.78809 li
287.803 6.78809 li
287.803 8.08789 li
cp
f
258.412 115.607 mo
251.629 115.607 li
251.629 114.307 li
258.412 114.307 li
258.412 115.607 li
cp
.678431 .862745 .219608 rgb
f
263.044 111.079 mo
256.261 111.079 li
256.261 109.779 li
263.044 109.779 li
263.044 111.079 li
cp
f
98.6973 201.814 mo
98.6973 197.712 li
98.6973 196.704 98.3989 196.199 97.8013 196.199 cv
97.3765 196.199 97.0635 196.377 96.8623 196.733 cv
96.6611 197.09 96.5601 197.682 96.5601 198.509 cv
96.5601 201.814 li
93.9653 201.814 li
93.9653 191.487 li
96.5601 191.487 li
96.5601 192.954 li
96.5601 193.617 96.5249 194.374 96.4541 195.224 cv
96.5737 195.224 li
96.8213 194.834 97.1157 194.56 97.4561 194.4 cv
97.7969 194.241 98.1929 194.162 98.6445 194.162 cv
99.4849 194.162 100.139 194.404 100.605 194.888 cv
101.072 195.373 101.306 196.051 101.306 196.923 cv
101.306 201.814 li
98.6973 201.814 li
cp
1 .776471 .188235 rgb
f
105.68 201.814 mo
103.084 201.814 li
103.084 194.294 li
105.68 194.294 li
105.68 201.814 li
cp
103.018 192.423 mo
103.018 192.033 103.126 191.744 103.343 191.553 cv
103.56 191.363 103.91 191.268 104.392 191.268 cv
104.875 191.268 105.226 191.365 105.447 191.56 cv
105.668 191.755 105.779 192.042 105.779 192.423 cv
105.779 193.184 105.317 193.564 104.392 193.564 cv
103.476 193.564 103.018 193.184 103.018 192.423 cv
cp
f
107.167 200.712 mo
107.167 200.31 107.286 199.997 107.525 199.773 cv
107.764 199.55 108.111 199.438 108.567 199.438 cv
109.018 199.438 109.36 199.55 109.592 199.773 cv
109.825 199.997 109.941 200.31 109.941 200.712 cv
109.941 201.11 109.82 201.421 109.579 201.645 cv
109.338 201.868 109 201.98 108.567 201.98 cv
108.129 201.98 107.786 201.868 107.538 201.645 cv
107.29 201.421 107.167 201.11 107.167 200.712 cv
cp
109.668 198.39 mo
107.479 198.39 li
107.14 192.111 li
110.007 192.111 li
109.668 198.39 li
cp
f
34.1045 156.904 mo
36.311 154.652 38.0259 152.103 38.0259 149.673 cv
38.0259 145.582 35.4937 142.265 31.4038 142.265 cv
29.3154 142.265 26.6489 143.923 25.3037 145.312 cv
23.957 143.923 21.2905 142.265 19.2036 142.265 cv
15.1123 142.265 12.5801 145.582 12.5801 149.673 cv
12.5801 155.511 22.4458 162.007 25.3037 163.485 cv
26.0317 163.112 27.231 162.401 28.6104 161.45 cv
34.1045 156.904 li
cp
.678431 .862745 .219608 rgb
f
270.053 210.265 mo
271.406 207.077 275.088 205.591 278.275 206.945 cv
281.463 208.299 282.948 211.981 281.595 215.168 cv
280.24 218.355 276.559 219.841 273.372 218.487 cv
270.185 217.133 268.698 213.452 270.053 210.265 cv
cp
284.335 216.332 mo
286.332 211.631 284.14 206.202 279.439 204.205 cv
274.739 202.208 269.31 204.4 267.313 209.101 cv
265.315 213.801 267.507 219.23 272.208 221.228 cv
276.908 223.225 282.338 221.033 284.335 216.332 cv
cp
1 1 1 rgb
f
267.052 209.696 mo
262.052 207.508 li
262.573 206.317 li
267.573 208.505 li
267.052 209.696 li
cp
.988235 .388235 .12549 rgb
f
252.395 202.699 mo
252.289 202.948 252.286 203.224 252.388 203.475 cv
252.489 203.727 252.683 203.923 252.932 204.029 cv
260.384 207.195 li
260.898 207.414 261.495 207.173 261.714 206.658 cv
261.82 206.409 261.822 206.133 261.721 205.881 cv
261.619 205.63 261.427 205.433 261.177 205.327 cv
253.726 202.162 li
253.21 201.943 252.613 202.184 252.395 202.699 cv
cp
260.777 208.576 mo
260.476 208.576 260.17 208.517 259.875 208.392 cv
252.423 205.226 li
251.854 204.984 251.413 204.535 251.182 203.962 cv
250.95 203.389 250.956 202.759 251.198 202.19 cv
251.697 201.016 253.06 200.466 254.233 200.965 cv
261.686 204.131 li
262.86 204.63 263.409 205.992 262.91 207.167 cv
262.536 208.046 261.678 208.576 260.777 208.576 cv
cp
f
420.257 45.6157 mo
417.569 45.6157 414.916 44.9287 412.583 43.6299 cv
412.27 43.4551 412.157 43.0591 412.332 42.7456 cv
412.506 42.4321 412.902 42.3193 413.216 42.4941 cv
415.356 43.6855 417.791 44.3154 420.257 44.3154 cv
422.504 44.3154 424.658 43.8154 426.659 42.8286 cv
426.981 42.6694 427.371 42.8018 427.53 43.124 cv
427.688 43.4458 427.557 43.8354 427.234 43.9946 cv
425.053 45.0703 422.706 45.6157 420.257 45.6157 cv
cp
1 1 1 rgb
f
423.612 42.7051 mo
426.604 43.5845 li
425.723 46.5752 li
427.366 45.6792 li
428.246 42.6895 li
425.256 41.8096 li
423.612 42.7051 li
cp
f
435.402 30.4697 mo
435.043 30.4697 434.752 30.1787 434.752 29.8198 cv
434.752 24.8374 432.239 20.2627 428.031 17.5835 cv
427.728 17.3906 427.639 16.9888 427.831 16.686 cv
428.024 16.3833 428.426 16.2939 428.729 16.4868 cv
433.314 19.4063 436.052 24.3906 436.052 29.8198 cv
436.052 30.1787 435.761 30.4697 435.402 30.4697 cv
cp
f
429.507 20.2515 mo
428.706 17.2383 li
431.72 16.4399 li
430.102 15.5 li
427.089 16.2993 li
427.888 19.312 li
429.507 20.2515 li
cp
f
405.184 28.9858 mo
405.12 28.9824 li
404.763 28.9478 404.501 28.6299 404.535 28.2725 cv
404.795 25.6055 405.74 23.0308 407.269 20.8271 cv
408.766 18.6694 410.793 16.9028 413.131 15.7192 cv
413.451 15.5571 413.842 15.6851 414.004 16.0054 cv
414.166 16.3257 414.038 16.7168 413.718 16.8789 cv
411.572 17.9653 409.711 19.5869 408.337 21.5684 cv
406.935 23.5898 406.067 25.9517 405.83 28.3984 cv
405.797 28.7344 405.514 28.9858 405.184 28.9858 cv
cp
f
407.543 25.8765 mo
405.217 27.9531 li
403.143 25.626 li
403.036 27.4941 li
405.11 29.8198 li
407.437 27.7451 li
407.543 25.8765 li
cp
f
420.258 9.92578 mo
418.162 9.92578 416.456 11.6309 416.456 13.7275 cv
416.456 15.8232 418.162 17.5288 420.258 17.5288 cv
422.354 17.5288 424.06 15.8232 424.06 13.7275 cv
424.06 11.6309 422.354 9.92578 420.258 9.92578 cv
cp
420.258 18.8286 mo
417.445 18.8286 415.156 16.5405 415.156 13.7275 cv
415.156 10.9141 417.445 8.62549 420.258 8.62549 cv
423.071 8.62549 425.359 10.9141 425.359 13.7275 cv
425.359 16.5405 423.071 18.8286 420.258 18.8286 cv
cp
f
416.353 23.479 mo
424.164 23.479 li
424.164 22.7871 li
424.164 20.6338 422.411 18.8813 420.258 18.8813 cv
418.104 18.8813 416.353 20.6338 416.353 22.7871 cv
416.353 23.479 li
cp
424.813 24.7788 mo
415.702 24.7788 li
415.344 24.7788 415.052 24.4878 415.052 24.1289 cv
415.052 22.7871 li
415.052 19.917 417.388 17.5815 420.258 17.5815 cv
423.128 17.5815 425.464 19.917 425.464 22.7871 cv
425.464 24.1289 li
425.464 24.4878 425.173 24.7788 424.813 24.7788 cv
cp
f
435.402 33.5562 mo
433.306 33.5562 431.601 35.2617 431.601 37.3579 cv
431.601 39.4541 433.306 41.1592 435.402 41.1592 cv
437.498 41.1592 439.203 39.4541 439.203 37.3579 cv
439.203 35.2617 437.498 33.5562 435.402 33.5562 cv
cp
435.402 42.4595 mo
432.589 42.4595 430.301 40.1709 430.301 37.3579 cv
430.301 34.5449 432.589 32.2563 435.402 32.2563 cv
438.215 32.2563 440.504 34.5449 440.504 37.3579 cv
440.504 40.1709 438.215 42.4595 435.402 42.4595 cv
cp
f
431.496 47.1094 mo
439.308 47.1094 li
439.308 46.418 li
439.308 44.2642 437.556 42.5122 435.402 42.5122 cv
433.248 42.5122 431.496 44.2642 431.496 46.418 cv
431.496 47.1094 li
cp
439.958 48.4092 mo
430.847 48.4092 li
430.487 48.4092 430.196 48.1182 430.196 47.7593 cv
430.196 46.418 li
430.196 43.5474 432.531 41.2119 435.402 41.2119 cv
438.272 41.2119 440.607 43.5474 440.607 46.418 cv
440.607 47.7593 li
440.607 48.1182 440.316 48.4092 439.958 48.4092 cv
cp
f
405.692 33.5562 mo
403.597 33.5562 401.892 35.2617 401.892 37.3579 cv
401.892 39.4541 403.597 41.1592 405.692 41.1592 cv
407.789 41.1592 409.494 39.4541 409.494 37.3579 cv
409.494 35.2617 407.789 33.5562 405.692 33.5562 cv
cp
405.692 42.4595 mo
402.88 42.4595 400.591 40.1709 400.591 37.3579 cv
400.591 34.5449 402.88 32.2563 405.692 32.2563 cv
408.506 32.2563 410.794 34.5449 410.794 37.3579 cv
410.794 40.1709 408.506 42.4595 405.692 42.4595 cv
cp
f
401.787 47.1094 mo
409.599 47.1094 li
409.599 46.418 li
409.599 44.2642 407.847 42.5122 405.692 42.5122 cv
403.539 42.5122 401.787 44.2642 401.787 46.418 cv
401.787 47.1094 li
cp
410.248 48.4092 mo
401.137 48.4092 li
400.778 48.4092 400.487 48.1182 400.487 47.7593 cv
400.487 46.418 li
400.487 43.5474 402.822 41.2119 405.692 41.2119 cv
408.563 41.2119 410.898 43.5474 410.898 46.418 cv
410.898 47.7593 li
410.898 48.1182 410.607 48.4092 410.248 48.4092 cv
cp
f
303.21 16.2993 mo
300.929 16.2993 li
298.577 11.7627 li
298.537 11.7627 li
298.593 12.4761 298.621 13.021 298.621 13.397 cv
298.621 16.2993 li
297.079 16.2993 li
297.079 9.85986 li
299.353 9.85986 li
301.695 14.335 li
301.722 14.335 li
301.681 13.686 301.66 13.165 301.66 12.7715 cv
301.66 9.85986 li
303.21 9.85986 li
303.21 16.2993 li
cp
.988235 .388235 .12549 rgb
f
308.426 16.2993 mo
304.603 16.2993 li
304.603 9.85986 li
308.426 9.85986 li
308.426 11.2563 li
306.342 11.2563 li
306.342 12.2695 li
308.271 12.2695 li
308.271 13.6655 li
306.342 13.6655 li
306.342 14.8809 li
308.426 14.8809 li
308.426 16.2993 li
cp
f
316.508 16.2993 mo
314.451 16.2993 li
313.834 13.4937 li
313.805 13.3765 313.759 13.1426 313.695 12.7935 cv
313.632 12.4438 313.586 12.1519 313.557 11.917 cv
313.533 12.1079 313.495 12.3447 313.442 12.6284 cv
313.39 12.9116 313.337 13.1724 313.285 13.4102 cv
313.234 13.6479 313.021 14.6108 312.645 16.2993 cv
310.588 16.2993 li
308.993 9.85986 li
310.672 9.85986 li
311.372 13.0884 li
311.53 13.8018 311.639 14.3701 311.698 14.793 cv
311.736 14.4937 311.805 14.0869 311.902 13.5732 cv
312.001 13.0591 312.093 12.6333 312.178 12.2959 cv
312.746 9.85986 li
314.358 9.85986 li
314.909 12.2959 li
315.003 12.686 315.098 13.1372 315.195 13.6479 cv
315.292 14.1587 315.356 14.5405 315.389 14.793 cv
315.427 14.4673 315.531 13.9019 315.701 13.0972 cv
316.415 9.85986 li
318.093 9.85986 li
316.508 16.2993 li
cp
f
323.137 14.3438 mo
323.137 14.7432 323.035 15.0977 322.832 15.4077 cv
322.63 15.7173 322.338 15.958 321.956 16.1299 cv
321.574 16.3018 321.126 16.3877 320.612 16.3877 cv
320.184 16.3877 319.824 16.3574 319.533 16.2969 cv
319.243 16.2373 318.94 16.1318 318.626 15.9824 cv
318.626 14.4321 li
318.958 14.6021 319.303 14.7349 319.661 14.8306 cv
320.02 14.9258 320.349 14.9736 320.647 14.9736 cv
320.906 14.9736 321.096 14.9287 321.216 14.8394 cv
321.336 14.75 321.396 14.6343 321.396 14.4937 cv
321.324 14.2622 li
321.275 14.1963 321.197 14.1294 321.091 14.062 cv
320.983 13.9946 320.697 13.8564 320.233 13.6479 cv
319.813 13.457 319.499 13.272 319.289 13.0928 cv
319.079 12.9136 318.924 12.7085 318.822 12.4761 cv
318.721 12.2441 318.67 11.9697 318.67 11.6528 cv
318.67 11.0596 318.886 10.5972 319.317 10.2651 cv
319.749 9.93359 320.343 9.76758 321.097 9.76758 cv
321.764 9.76758 322.443 9.92139 323.137 10.23 cv
322.604 11.5732 li
322.001 11.2974 321.481 11.1592 321.044 11.1592 cv
320.818 11.1592 320.653 11.1992 320.551 11.2783 cv
320.448 11.3574 320.396 11.4561 320.396 11.5732 cv
320.396 11.6997 320.462 11.8125 320.593 11.9126 cv
320.724 12.0122 321.078 12.1943 321.656 12.4585 cv
322.211 12.7085 322.597 12.9761 322.813 13.2627 cv
323.028 13.5488 323.137 13.9092 323.137 14.3438 cv
cp
f
386.164 10.3521 mo
382.834 10.3521 380.124 13.0615 380.124 16.3921 cv
380.124 19.7227 382.834 22.4326 386.164 22.4326 cv
389.495 22.4326 392.204 19.7227 392.204 16.3921 cv
392.204 13.0615 389.495 10.3521 386.164 10.3521 cv
cp
386.164 23.7324 mo
382.117 23.7324 378.824 20.4395 378.824 16.3921 cv
378.824 12.3447 382.117 9.05225 386.164 9.05225 cv
390.212 9.05225 393.505 12.3447 393.505 16.3921 cv
393.505 20.4395 390.212 23.7324 386.164 23.7324 cv
cp
.678431 .862745 .219608 rgb
f
386.259 18.6147 mo
382.767 15.2983 li
383.662 14.3555 li
386.069 16.6416 li
392.325 7.86963 li
393.384 8.62451 li
386.259 18.6147 li
cp
f
16.8306 52.208 mo
13.5 52.208 10.7905 54.9175 10.7905 58.248 cv
10.7905 61.5786 13.5 64.2881 16.8306 64.2881 cv
20.1611 64.2881 22.8706 61.5786 22.8706 58.248 cv
22.8706 54.9175 20.1611 52.208 16.8306 52.208 cv
cp
16.8306 65.5884 mo
12.7832 65.5884 9.49072 62.2954 9.49072 58.248 cv
9.49072 54.2007 12.7832 50.9082 16.8306 50.9082 cv
20.8779 50.9082 24.1709 54.2007 24.1709 58.248 cv
24.1709 62.2954 20.8779 65.5884 16.8306 65.5884 cv
cp
.988235 .388235 .12549 rgb
f
16.8306 60.1338 mo
16.665 60.1338 16.5044 60.0708 16.3833 59.9551 cv
13.4331 57.1538 li
13.1729 56.9067 13.1621 56.4951 13.4092 56.2349 cv
13.6567 55.9746 14.0679 55.9639 14.3286 56.2114 cv
16.7358 58.4976 li
22.9917 49.7256 li
23.2002 49.4336 23.606 49.3652 23.8984 49.5737 cv
24.1904 49.7822 24.2583 50.188 24.0498 50.4805 cv
17.3599 59.8613 li
17.2505 60.0146 17.0801 60.1128 16.8931 60.1309 cv
16.8306 60.1338 li
cp
f
14.667 80.9292 mo
14.8594 83.0386 15.7324 84.7715 17.271 86.0928 cv
18.646 87.2734 20.0693 87.6753 20.0835 87.6792 cv
20.3945 87.7646 li
20.5156 88.0645 li
21.3267 90.0918 22.7095 91.8213 24.5137 93.0659 cv
26.3599 94.3394 28.5264 95.0122 30.7783 95.0122 cv
36.8711 95.0122 41.8281 90.0557 41.8281 83.9629 cv
41.8281 77.8701 36.8711 72.9136 30.7783 72.9136 cv
25.4966 72.9136 20.9346 76.6714 19.9316 81.8491 cv
19.8193 82.4302 li
19.2305 82.3726 li
17.3403 82.187 15.6851 81.4702 14.667 80.9292 cv
cp
30.7783 96.3125 mo
28.2617 96.3125 25.8398 95.5596 23.7754 94.1357 cv
21.8447 92.8042 20.3462 90.9751 19.4268 88.832 cv
18.8701 88.6357 17.665 88.1313 16.4692 87.1177 cv
14.9912 85.8647 13.2466 83.5693 13.3296 79.749 cv
13.356 78.5293 li
14.3535 79.2314 li
14.374 79.2456 16.3281 80.5981 18.7871 81.0034 cv
20.1323 75.5269 25.0806 71.6133 30.7783 71.6133 cv
37.5879 71.6133 43.1279 77.1533 43.1279 83.9629 cv
43.1279 90.7725 37.5879 96.3125 30.7783 96.3125 cv
cp
1 1 1 rgb
f
28.5947 87.9058 mo
28.5947 87.4678 28.7222 87.1294 28.9771 86.8911 cv
29.2319 86.6533 29.6069 86.5342 30.1025 86.5342 cv
30.5786 86.5342 30.9443 86.6543 31.1992 86.895 cv
31.4536 87.1353 31.5811 87.4722 31.5811 87.9058 cv
31.5811 88.3394 31.4492 88.6748 31.1846 88.9131 cv
30.9204 89.1514 30.5596 89.2705 30.1025 89.2705 cv
29.6309 89.2705 29.2617 89.1523 28.9951 88.9165 cv
28.728 88.6807 28.5947 88.3442 28.5947 87.9058 cv
cp
28.9023 85.4053 mo
28.9023 84.7905 li
28.9023 84.3242 28.9976 83.9297 29.188 83.6084 cv
29.3784 83.2871 29.7168 82.9736 30.2026 82.6689 cv
30.5884 82.4258 30.8657 82.207 31.0347 82.0117 cv
31.2036 81.8164 31.2886 81.5923 31.2886 81.3398 cv
31.2886 81.1401 31.1978 80.9814 31.0171 80.8647 cv
30.8359 80.748 30.6001 80.6899 30.3096 80.6899 cv
29.5903 80.6899 28.7495 80.9448 27.7876 81.4541 cv
26.7944 79.5112 li
27.9805 78.835 29.2188 78.4966 30.5098 78.4966 cv
31.5718 78.4966 32.4053 78.73 33.0103 79.1968 cv
33.6152 79.6636 33.9175 80.2993 33.9175 81.104 cv
33.9175 81.6807 33.7827 82.1797 33.5137 82.6011 cv
33.2446 83.0225 32.8149 83.4214 32.2241 83.7979 cv
31.7241 84.1216 31.4111 84.3584 31.2847 84.5083 cv
31.1587 84.6587 31.0957 84.8359 31.0957 85.041 cv
31.0957 85.4053 li
28.9023 85.4053 li
cp
.988235 .388235 .12549 rgb
f
19.293 109.809 mo
19.293 111.598 17.8428 113.048 16.0537 113.048 cv
14.2642 113.048 12.814 111.598 12.814 109.809 cv
12.814 108.02 14.2642 106.569 16.0537 106.569 cv
17.8428 106.569 19.293 108.02 19.293 109.809 cv
cp
12.5044 126.518 mo
14.3389 126.127 li
14.3389 117.396 li
12.3091 117.006 li
12.3091 114.716 li
18.1382 114.716 li
18.1382 126.127 li
19.96 126.518 li
19.96 128.794 li
12.5044 128.794 li
12.5044 126.518 li
cp
1 .776471 .188235 rgb
f
44.1318 113.284 mo
41.79 113.284 39.8853 115.188 39.8853 117.53 cv
39.8853 119.872 41.79 121.776 44.1318 121.776 cv
46.4731 121.776 48.3779 119.872 48.3779 117.53 cv
48.3779 115.188 46.4731 113.284 44.1318 113.284 cv
cp
44.1318 123.077 mo
41.0732 123.077 38.5854 120.588 38.5854 117.53 cv
38.5854 114.472 41.0732 111.984 44.1318 111.984 cv
47.1899 111.984 49.6782 114.472 49.6782 117.53 cv
49.6782 120.588 47.1899 123.077 44.1318 123.077 cv
cp
42.0166 129.023 mo
46.2471 129.023 li
46.2471 125.319 li
46.6904 125.171 li
47.042 125.053 47.3896 124.909 47.7241 124.742 cv
48.1431 124.533 li
50.7632 127.153 li
53.7544 124.162 li
51.1343 121.542 li
51.3438 121.123 li
51.5107 120.788 51.6548 120.44 51.7725 120.089 cv
51.9209 119.646 li
55.625 119.646 li
55.625 115.415 li
51.9209 115.415 li
51.7725 114.971 li
51.6548 114.62 51.5107 114.272 51.3438 113.938 cv
51.1343 113.519 li
53.7544 110.899 li
50.7632 107.908 li
48.1431 110.527 li
47.7241 110.318 li
47.3896 110.151 47.042 110.007 46.6904 109.889 cv
46.2471 109.741 li
46.2471 106.037 li
42.0166 106.037 li
42.0166 109.741 li
41.5728 109.889 li
41.2217 110.007 40.8735 110.151 40.5391 110.318 cv
40.1201 110.527 li
37.5005 107.908 li
34.5088 110.899 li
37.1289 113.519 li
36.9199 113.938 li
36.7529 114.272 36.6084 114.62 36.4907 114.971 cv
36.3423 115.415 li
32.6382 115.415 li
32.6382 119.646 li
36.3423 119.646 li
36.4907 120.089 li
36.6084 120.44 36.7529 120.788 36.9199 121.123 cv
37.1289 121.542 li
34.5088 124.162 li
37.5005 127.153 li
40.1201 124.533 li
40.5391 124.742 li
40.8735 124.909 41.2217 125.053 41.5728 125.171 cv
42.0166 125.319 li
42.0166 129.023 li
cp
47.5469 130.324 mo
40.7163 130.324 li
40.7163 126.242 li
40.6055 126.199 40.4956 126.153 40.3862 126.105 cv
37.5005 128.991 li
32.6704 124.162 li
35.5566 121.275 li
35.5088 121.167 35.4629 121.056 35.4194 120.945 cv
31.3384 120.945 li
31.3384 114.115 li
35.4194 114.115 li
35.4629 114.004 35.5088 113.894 35.5566 113.785 cv
32.6704 110.899 li
37.5005 106.069 li
40.3862 108.955 li
40.4956 108.907 40.6055 108.861 40.7163 108.818 cv
40.7163 104.737 li
47.5469 104.737 li
47.5469 108.818 li
47.6577 108.861 47.7676 108.907 47.877 108.955 cv
50.7632 106.069 li
55.5928 110.899 li
52.707 113.785 li
52.7549 113.894 52.8003 114.004 52.8442 114.115 cv
56.9248 114.115 li
56.9248 120.945 li
52.8442 120.945 li
52.8003 121.056 52.7549 121.167 52.707 121.275 cv
55.5928 124.162 li
50.7632 128.991 li
47.877 126.105 li
47.7676 126.153 47.6577 126.199 47.5469 126.242 cv
47.5469 130.324 li
cp
.988235 .388235 .12549 rgb
f
145.642 389.321 mo
145.642 391.007 145.036 392.334 143.823 393.305 cv
142.61 394.274 140.923 394.76 138.762 394.76 cv
136.771 394.76 135.009 394.385 133.478 393.636 cv
133.478 389.96 li
134.737 390.521 135.803 390.917 136.675 391.147 cv
137.547 391.377 138.345 391.492 139.068 391.492 cv
139.937 391.492 140.602 391.326 141.066 390.994 cv
141.53 390.662 141.762 390.169 141.762 389.514 cv
141.762 389.147 141.66 388.822 141.456 388.536 cv
141.251 388.252 140.951 387.978 140.555 387.713 cv
140.16 387.449 139.354 387.028 138.137 386.449 cv
136.996 385.914 136.141 385.398 135.571 384.905 cv
135 384.412 134.545 383.838 134.205 383.182 cv
133.865 382.526 133.694 381.761 133.694 380.885 cv
133.694 379.233 134.254 377.936 135.373 376.991 cv
136.492 376.047 138.039 375.574 140.013 375.574 cv
140.983 375.574 141.909 375.689 142.789 375.919 cv
143.67 376.148 144.591 376.472 145.553 376.889 cv
144.276 379.965 li
143.281 379.557 142.458 379.271 141.807 379.11 cv
141.155 378.948 140.515 378.867 139.885 378.867 cv
139.136 378.867 138.562 379.042 138.162 379.391 cv
137.762 379.74 137.562 380.195 137.562 380.757 cv
137.562 381.105 137.643 381.41 137.805 381.669 cv
137.966 381.929 138.224 382.18 138.577 382.423 cv
138.93 382.665 139.766 383.102 141.085 383.73 cv
142.83 384.564 144.025 385.401 144.672 386.239 cv
145.318 387.077 145.642 388.104 145.642 389.321 cv
cp
.133333 .196078 .376471 rgb
f
152.343 385.147 mo
152.343 387.232 152.739 388.803 153.531 389.857 cv
154.322 390.913 155.505 391.44 157.079 391.44 cv
160.236 391.44 161.815 389.343 161.815 385.147 cv
161.815 380.944 160.245 378.842 157.105 378.842 cv
155.53 378.842 154.343 379.372 153.543 380.431 cv
152.744 381.49 152.343 383.063 152.343 385.147 cv
cp
165.963 385.147 mo
165.963 388.236 165.197 390.611 163.666 392.271 cv
162.134 393.93 159.938 394.76 157.079 394.76 cv
154.22 394.76 152.024 393.93 150.493 392.271 cv
148.961 390.611 148.195 388.229 148.195 385.122 cv
148.195 382.016 148.963 379.645 150.499 378.006 cv
152.035 376.368 154.237 375.549 157.105 375.549 cv
159.972 375.549 162.166 376.374 163.685 378.025 cv
165.204 379.676 165.963 382.051 165.963 385.147 cv
cp
f
177.758 378.867 mo
176.269 378.867 175.116 379.427 174.299 380.546 cv
173.482 381.665 173.073 383.225 173.073 385.225 cv
173.073 389.386 174.635 391.466 177.758 391.466 cv
179.068 391.466 180.655 391.139 182.519 390.483 cv
182.519 393.802 li
180.987 394.44 179.277 394.76 177.388 394.76 cv
174.673 394.76 172.597 393.937 171.159 392.289 cv
169.72 390.643 169.001 388.279 169.001 385.198 cv
169.001 383.259 169.354 381.559 170.061 380.1 cv
170.767 378.64 171.782 377.521 173.105 376.742 cv
174.428 375.964 175.979 375.574 177.758 375.574 cv
179.57 375.574 181.392 376.013 183.221 376.889 cv
181.945 380.105 li
181.247 379.773 180.545 379.484 179.838 379.237 cv
179.132 378.991 178.438 378.867 177.758 378.867 cv
cp
f
186.489 394.504 mo
186.489 375.842 li
190.446 375.842 li
190.446 394.504 li
186.489 394.504 li
cp
f
204.27 386.743 mo
203.019 382.718 202.315 380.442 202.158 379.914 cv
202 379.387 201.887 378.97 201.819 378.663 cv
201.539 379.753 200.734 382.446 199.407 386.743 cv
204.27 386.743 li
cp
206.567 394.504 mo
205.215 390.063 li
198.411 390.063 li
197.058 394.504 li
192.794 394.504 li
199.381 375.766 li
204.219 375.766 li
210.831 394.504 li
206.567 394.504 li
cp
f
213.18 394.504 mo
213.18 375.842 li
217.137 375.842 li
217.137 391.236 li
224.706 391.236 li
224.706 394.504 li
213.18 394.504 li
cp
f
242.641 394.504 mo
238.147 379.863 li
238.032 379.863 li
238.194 382.842 238.274 384.828 238.274 385.824 cv
238.274 394.504 li
234.739 394.504 li
234.739 375.842 li
240.126 375.842 li
244.542 390.113 li
244.619 390.113 li
249.304 375.842 li
254.69 375.842 li
254.69 394.504 li
251.001 394.504 li
251.001 385.671 li
251.001 385.254 251.008 384.773 251.021 384.229 cv
251.033 383.685 251.091 382.237 251.192 379.889 cv
251.078 379.889 li
246.266 394.504 li
242.641 394.504 li
cp
f
270.136 394.504 mo
259.388 394.504 li
259.388 375.842 li
270.136 375.842 li
270.136 379.085 li
263.345 379.085 li
263.345 383.182 li
269.663 383.182 li
269.663 386.424 li
263.345 386.424 li
263.345 391.236 li
270.136 391.236 li
270.136 394.504 li
cp
f
285.402 385.097 mo
285.402 381.089 283.632 379.085 280.092 379.085 cv
277.985 379.085 li
277.985 391.236 li
279.684 391.236 li
283.496 391.236 285.402 389.189 285.402 385.097 cv
cp
289.512 384.994 mo
289.512 388.066 288.638 390.419 286.889 392.054 cv
285.141 393.688 282.615 394.504 279.313 394.504 cv
274.028 394.504 li
274.028 375.842 li
279.888 375.842 li
282.934 375.842 285.3 376.646 286.984 378.255 cv
288.67 379.863 289.512 382.109 289.512 384.994 cv
cp
f
293.38 394.504 mo
293.38 375.842 li
297.337 375.842 li
297.337 394.504 li
293.38 394.504 li
cp
f
311.161 386.743 mo
309.91 382.718 309.206 380.442 309.048 379.914 cv
308.891 379.387 308.778 378.97 308.71 378.663 cv
308.429 379.753 307.625 382.446 306.298 386.743 cv
311.161 386.743 li
cp
313.458 394.504 mo
312.105 390.063 li
305.302 390.063 li
303.949 394.504 li
299.686 394.504 li
306.272 375.766 li
311.109 375.766 li
317.722 394.504 li
313.458 394.504 li
cp
f
317.718 425.563 mo
132.281 425.563 li
132.281 403.23 li
317.718 403.23 li
317.718 425.563 li
cp
1 .784314 .180392 rgb
f
150.664 419.462 mo
150.203 419.702 149.181 420.022 147.879 420.022 cv
144.954 420.022 143.05 418.039 143.05 415.074 cv
143.05 412.089 145.094 409.925 148.259 409.925 cv
149.301 409.925 150.223 410.186 150.704 410.426 cv
150.303 411.788 li
149.882 411.548 149.221 411.327 148.259 411.327 cv
146.036 411.327 144.833 412.971 144.833 414.994 cv
144.833 417.237 146.276 418.62 148.199 418.62 cv
149.201 418.62 149.862 418.359 150.363 418.14 cv
150.664 419.462 li
cp
1 1 1 rgb
f
153.688 414.994 mo
153.688 417.117 154.91 418.721 156.633 418.721 cv
158.316 418.721 159.578 417.138 159.578 414.954 cv
159.578 413.311 158.757 411.228 156.673 411.228 cv
154.589 411.228 153.688 413.15 153.688 414.994 cv
cp
161.381 414.894 mo
161.381 418.479 158.897 420.043 156.553 420.043 cv
153.928 420.043 151.905 418.119 151.905 415.054 cv
151.905 411.809 154.028 409.905 156.713 409.905 cv
159.498 409.905 161.381 411.929 161.381 414.894 cv
cp
f
163.604 412.75 mo
163.604 411.748 163.584 410.927 163.524 410.125 cv
165.087 410.125 li
165.187 411.729 li
165.227 411.729 li
165.708 410.807 166.83 409.905 168.433 409.905 cv
169.775 409.905 171.858 410.706 171.858 414.032 cv
171.858 419.822 li
170.095 419.822 li
170.095 414.232 li
170.095 412.67 169.515 411.367 167.852 411.367 cv
166.689 411.367 165.788 412.189 165.487 413.171 cv
165.407 413.391 165.367 413.691 165.367 413.992 cv
165.367 419.822 li
163.604 419.822 li
163.604 412.75 li
cp
f
174.722 412.75 mo
174.722 411.748 174.702 410.927 174.642 410.125 cv
176.205 410.125 li
176.305 411.729 li
176.345 411.729 li
176.826 410.807 177.947 409.905 179.55 409.905 cv
180.893 409.905 182.976 410.706 182.976 414.032 cv
182.976 419.822 li
181.213 419.822 li
181.213 414.232 li
181.213 412.67 180.632 411.367 178.969 411.367 cv
177.807 411.367 176.906 412.189 176.605 413.171 cv
176.525 413.391 176.485 413.691 176.485 413.992 cv
176.485 419.822 li
174.722 419.822 li
174.722 412.75 li
cp
f
191.991 414.032 mo
192.011 412.91 191.53 411.167 189.546 411.167 cv
187.763 411.167 186.982 412.811 186.842 414.032 cv
191.991 414.032 li
cp
186.822 415.294 mo
186.862 417.679 188.384 418.66 190.147 418.66 cv
191.41 418.66 192.171 418.439 192.832 418.159 cv
193.133 419.422 li
192.512 419.702 191.45 420.022 189.907 420.022 cv
186.922 420.022 185.139 418.06 185.139 415.134 cv
185.139 412.209 186.862 409.905 189.687 409.905 cv
192.852 409.905 193.694 412.689 193.694 414.473 cv
193.694 414.834 193.653 415.114 193.633 415.294 cv
186.822 415.294 li
cp
f
202.788 419.462 mo
202.327 419.702 201.306 420.022 200.003 420.022 cv
197.078 420.022 195.175 418.039 195.175 415.074 cv
195.175 412.089 197.218 409.925 200.384 409.925 cv
201.426 409.925 202.347 410.186 202.828 410.426 cv
202.428 411.788 li
202.007 411.548 201.346 411.327 200.384 411.327 cv
198.16 411.327 196.958 412.971 196.958 414.994 cv
196.958 417.237 198.4 418.62 200.324 418.62 cv
201.326 418.62 201.987 418.359 202.488 418.14 cv
202.788 419.462 li
cp
f
207.235 407.341 mo
207.235 410.125 li
209.759 410.125 li
209.759 411.468 li
207.235 411.468 li
207.235 416.697 li
207.235 417.898 207.575 418.58 208.557 418.58 cv
209.018 418.58 209.358 418.52 209.579 418.46 cv
209.659 419.782 li
209.318 419.923 208.777 420.022 208.096 420.022 cv
207.275 420.022 206.614 419.762 206.193 419.281 cv
205.692 418.761 205.512 417.898 205.512 416.757 cv
205.512 411.468 li
204.009 411.468 li
204.009 410.125 li
205.512 410.125 li
205.512 407.802 li
207.235 407.341 li
cp
f
211.742 419.822 mo
211.742 410.125 li
213.505 410.125 li
213.505 419.822 li
211.742 419.822 li
cp
213.705 407.4 mo
213.725 408.002 213.285 408.482 212.583 408.482 cv
211.962 408.482 211.521 408.002 211.521 407.4 cv
211.521 406.779 211.982 406.299 212.624 406.299 cv
213.285 406.299 213.705 406.779 213.705 407.4 cv
cp
f
217.511 414.994 mo
217.511 417.117 218.733 418.721 220.457 418.721 cv
222.139 418.721 223.401 417.138 223.401 414.954 cv
223.401 413.311 222.58 411.228 220.497 411.228 cv
218.413 411.228 217.511 413.15 217.511 414.994 cv
cp
225.205 414.894 mo
225.205 418.479 222.72 420.043 220.376 420.043 cv
217.751 420.043 215.728 418.119 215.728 415.054 cv
215.728 411.809 217.852 409.905 220.537 409.905 cv
223.321 409.905 225.205 411.929 225.205 414.894 cv
cp
f
227.428 412.75 mo
227.428 411.748 227.407 410.927 227.348 410.125 cv
228.91 410.125 li
229.01 411.729 li
229.05 411.729 li
229.531 410.807 230.653 409.905 232.256 409.905 cv
233.598 409.905 235.682 410.706 235.682 414.032 cv
235.682 419.822 li
233.919 419.822 li
233.919 414.232 li
233.919 412.67 233.338 411.367 231.675 411.367 cv
230.513 411.367 229.611 412.189 229.311 413.171 cv
229.23 413.391 229.19 413.691 229.19 413.992 cv
229.19 419.822 li
227.428 419.822 li
227.428 412.75 li
cp
f
249.704 419.462 mo
249.243 419.702 248.221 420.022 246.919 420.022 cv
243.994 420.022 242.091 418.039 242.091 415.074 cv
242.091 412.089 244.134 409.925 247.3 409.925 cv
248.341 409.925 249.263 410.186 249.744 410.426 cv
249.343 411.788 li
248.922 411.548 248.261 411.327 247.3 411.327 cv
245.075 411.327 243.873 412.971 243.873 414.994 cv
243.873 417.237 245.316 418.62 247.239 418.62 cv
248.241 418.62 248.902 418.359 249.403 418.14 cv
249.704 419.462 li
cp
f
252.728 414.994 mo
252.728 417.117 253.95 418.721 255.673 418.721 cv
257.356 418.721 258.618 417.138 258.618 414.954 cv
258.618 413.311 257.797 411.228 255.713 411.228 cv
253.63 411.228 252.728 413.15 252.728 414.994 cv
cp
260.421 414.894 mo
260.421 418.479 257.938 420.043 255.593 420.043 cv
252.969 420.043 250.945 418.119 250.945 415.054 cv
250.945 411.809 253.068 409.905 255.753 409.905 cv
258.538 409.905 260.421 411.929 260.421 414.894 cv
cp
f
262.645 412.75 mo
262.645 411.748 262.624 410.927 262.564 410.125 cv
264.127 410.125 li
264.227 411.729 li
264.267 411.729 li
264.748 410.807 265.87 409.905 267.473 409.905 cv
268.814 409.905 270.898 410.706 270.898 414.032 cv
270.898 419.822 li
269.136 419.822 li
269.136 414.232 li
269.136 412.67 268.555 411.367 266.892 411.367 cv
265.729 411.367 264.828 412.189 264.527 413.171 cv
264.447 413.391 264.407 413.691 264.407 413.992 cv
264.407 419.822 li
262.645 419.822 li
262.645 412.75 li
cp
f
280.675 419.462 mo
280.214 419.702 279.191 420.022 277.89 420.022 cv
274.965 420.022 273.062 418.039 273.062 415.074 cv
273.062 412.089 275.104 409.925 278.271 409.925 cv
279.312 409.925 280.233 410.186 280.715 410.426 cv
280.313 411.788 li
279.893 411.548 279.231 411.327 278.271 411.327 cv
276.046 411.327 274.844 412.971 274.844 414.994 cv
274.844 417.237 276.287 418.62 278.21 418.62 cv
279.212 418.62 279.873 418.359 280.374 418.14 cv
280.675 419.462 li
cp
f
288.768 414.032 mo
288.787 412.91 288.307 411.167 286.323 411.167 cv
284.54 411.167 283.759 412.811 283.618 414.032 cv
288.768 414.032 li
cp
283.599 415.294 mo
283.639 417.679 285.161 418.66 286.924 418.66 cv
288.187 418.66 288.948 418.439 289.609 418.159 cv
289.909 419.422 li
289.288 419.702 288.227 420.022 286.684 420.022 cv
283.698 420.022 281.916 418.06 281.916 415.134 cv
281.916 412.209 283.639 409.905 286.464 409.905 cv
289.629 409.905 290.471 412.689 290.471 414.473 cv
290.471 414.834 290.431 415.114 290.41 415.294 cv
283.599 415.294 li
cp
f
294.396 415.875 mo
294.396 416.136 294.437 416.376 294.477 416.597 cv
294.797 417.818 295.858 418.66 297.121 418.66 cv
298.984 418.66 300.065 417.138 300.065 414.914 cv
300.065 412.971 299.044 411.308 297.181 411.308 cv
295.979 411.308 294.856 412.169 294.517 413.491 cv
294.456 413.712 294.396 413.972 294.396 414.213 cv
294.396 415.875 li
cp
292.653 413.291 mo
292.653 412.049 292.613 411.047 292.573 410.125 cv
294.155 410.125 li
294.235 411.788 li
294.275 411.788 li
294.997 410.606 296.139 409.905 297.722 409.905 cv
300.065 409.905 301.829 411.889 301.829 414.834 cv
301.829 418.319 299.705 420.043 297.421 420.043 cv
296.139 420.043 295.017 419.481 294.437 418.52 cv
294.396 418.52 li
294.396 423.789 li
292.653 423.789 li
292.653 413.291 li
cp
f
306.175 407.341 mo
306.175 410.125 li
308.699 410.125 li
308.699 411.468 li
306.175 411.468 li
306.175 416.697 li
306.175 417.898 306.516 418.58 307.497 418.58 cv
307.958 418.58 308.299 418.52 308.52 418.46 cv
308.6 419.782 li
308.259 419.923 307.718 420.022 307.036 420.022 cv
306.215 420.022 305.554 419.762 305.133 419.281 cv
304.633 418.761 304.452 417.898 304.452 416.757 cv
304.452 411.468 li
302.949 411.468 li
302.949 410.125 li
304.452 410.125 li
304.452 407.802 li
306.175 407.341 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.2
%%For: (lena) ()
%%Title: (1512.i118.053.S.m005.c10.social media illustration.eps)
%%CreationDate: 2/29/2016 11:38 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4M-oCqj&Y%ta=gef2cI0!<Q&4D-nTX\K&%M6`o(*2i[s3L[D<Nde9_.?.mEQ4Df.Xe>/I_A`]=*NQ4PAU"3Q"o>Ag\b\9
%AY`?Ib=ajuOYZq8lcu'!eUseVR)2S0T&lt_q.@0=NuHjQG-`023k8k)g$Yr<E^*0Ue8FLjIOV,M7^ZFkHR`5MPqV*cb`7$JW7I\0
%ZX#5,;dS0#U4#?M^ZrU9^]:!`m[rjqJTM`O]20-u:&,iHBD!g\FSO21qh++Fg?H%=h.j:dnNJ;Em!+K^@FQd3++W$Jb(P81i5\e\
%3\0l<?']+qV1QbUr=lP>:@5HNd\3j,aN10,%/pca1BU2[s/_[aY=^_JK[3]A:,sktrV\k@@Bfs,!D(,S(B;/ia8dY^<(KFH.&sak
%V/A]oART/H<n[NF(QfR"J.f#r%fYT.DTXj+dI[O47TFC!XVuUp90J8,Q)MrC1"5P3<rWE4L!9YtEq2N"(:@L,Wa1.u,?i/<@(09q
%C*9,E]ML+UQ"napIsHpH;YrTA6:5S?HAMT).PSeZ07*;#kspE/c/b;Z[A(Z<o/.8)eai[GiAi=t,Rt6]S[@KDh0E$N#[C5.@EN[T
%XU55QjFhnK%R/Ih4uC0jG4iN%=Bc6-@Qhoq/TeU1Xf)Hh6Pf#Q,YL2FreBDc0/<OSm7%O.K5$n;G."2bUj!>(l`EW&f;rIVFRV-q
%NP#;Z^XbO1^T&+H%9W7+>S\NR]P,.eeHRf.ql^h&\):f3eq5'RgWa&?VfC;cqlchiV0NuU?:X*pZOM%]8aW'tJX?85V%:"GIBYlp
%KC-H]cX_N2K@*p7kjZ3"iU85hKB)PF9_G*3mk2smQH&ZM\'-L2Wj_=k-lcXGN`,4Fpm,7Fs(D-,,i:t=LS73mpg>$V.h@rh2cSI8
%'*WBc&Fb1qL1g;I4"80bX77dA2-ZH_GYFA@Q.0fQh+CS2rE?0tC8^9N?S'>op_[uDD-f5+Abge4<<g1q7oVLS[VeFW`TfB19aOuo
%U1-KnBL/3:8!HK#0JS.P;kg?ch$]T3U.2!NlN!>:qiH?Es19Jg`.2EaUh#6FlDMm1[8WuDRCk(3p/D/b[<KsVS]?h'AuspQ\k5T\
%-RL>^IH0;tAkI2+ibG_4.&=apXoX6="\XYi2ek;F)@YhQYB,geC,TkB%^orL&V/6d%8`]_XV+j2CFIh_WX5%2=FpGj'$/#+[Ibdf
%H$tU[5`6A=(bSG,9:m`bC=Vp!WHD&is'>^WD7gTnY-#sA%PPF2P>!\PNtlP#GnUWhAa1`C;OX>6CEjY/qb1Ih;4,:2^i@;;`?F2]
%^Fod=MkPYgd6O"=<DYmOUp_aQcsK79Kk&ROIP5ie(TCm:Zs@EJUBqSE2X7V`"'"d>@B\CEQs++A@<'6Hc66W&LSM7Bh?n[8MN<](
%)IlbUpB8u=?%#s`SZ#YZ#5dr[oeoou>r3B>b3.7m]Y2uM^&Vr!T(CJf.efe5NsS%QVj@=]f,F/=.U^u5T(]`--j;,_0[jp+qU:Z^
%WjPG\C/>6fol-hV<BoJm\j'#2K--G=482Ya%tS<P4J(V<WRg*DrY^io;6$r:Qo-D=[#4>tJI"KC:B]-;,/j4jV0e=i&>!dNKt3#>
%k82qWdYNS.,u/(8,ZAJaPYTHE6<,NB"N!RY,tsM=>0XZ:=f*tn]?%%85e'q]Q"6U_gR-X\[82-W%$dU0kch6;_BPCTRm<0+Bh+_#
%/P2!;$*QuACU,LN?@B$4/U`P?ZroQ^[7t+E_jr@0BrMa\g<nLn1sR@F>$q-l'!BVElrHF*Rk.s&d\2:O8]AYH-QHql8RRRB@.GEX
%*DIG/["=@BLMNl`_e-)XNjb?uQ!g>%,amj7dluhm)l(E9\/a)m#r3--9oN[7C6u`S8g'$aHHlC7f;uHM*O=`=FI,3k$;snO(Z8^c
%3_QS.9Y%,6@:@;QRkV0]auKi.m_<2QS[D+`g"0OeX.=r!2cQ112WbWo`>LMp')7>"[bS`c>M*s(>HUb\Ke9d<jo/Fe[H>8n9.%Ta
%gN1Y&flN"'R3d24)h!WZLDQdZoD@u_TUSAsLJ@_XjNbT[Ip2/t)U[`teEM'*q<2%JU@8gFc$JqrecN9Q]hYJ/C1Kidg2uZ*$0nFO
%A@ALCj)gPSL*UM$jVmfHADM_"8$D(.=XWKpkmbBeL0\G!h]pfdZBs0>B>J8q1@:_1IPKPoM%.ZnC.Wf*4Pcatr/qo,9k(:bWdW.O
%gn,_!UXO"NQ-.K_\Wj1l`KFSt7?KhfW6ASMeBTojSSkEhUp^Il\Mj8Bj8s5tdqUe8.g`.<R8JTHeMW9g&5Bd7_DDm^1$--,<@aIS
%s%=KSs/oYJfPae0h-r-@`6+]&`ZafN7BSSnUsbHO6CiGQi//S9WF$=+5?2@$at\l#5_<_/Eg6/\Y7=6J>qIR`%&4NbQji+V/'O?'
%&fL'#Q6FAcH[1V2m^t-7?X\\]qDkf]mF$OoF#5>3g=>U[4mFA.C]EY@E>FPlX*Aro16>aRL$hFto*CJK8SojN#Vr%FnOH6WM":@Y
%cEfU=mlF)U;DR?o1XfS3q2CJK$A*YGc"8Q^NhZP"=K#HjgR*bE)eM.I-LZ,W;XGbr6mTEO>B=,FZ4b544(d.c$n.AjSpWSkB'!p:
%h7CB(4qf=U;eUp0f.])nK@`5&SP-7;AheN^#-XZ-m,fE32UTOLBcjYoXLHF!TQL^U2#^GZTA_3N3SYIDW+A\O?VdCMc:hS@+O&>N
%-j_)ABCLG'"?!MFTO;b)_4R^$;=Q5ah'@u3^Y\JSs3-uh"&U;@$(BE29UuKCRJNoS+Mm>Tm\83E7('q27Q99O=mR.'jLXEq,ZsiS
%\pT.&>k;cqYBF*W;E;TuR!)-)R@J<_-"*'IWGNt5*H_`nC>dKu4\cc[*g>eP,2lL^Lf6Og-Le"Zc5cMHO&<R80ofPg2f=_EmdVl+
%>tf\88765Z:@C^rbg^EI8[eBm$V-LV>AlSr(lWQ;XjrS'm*r2ANYAeKDDR,Ee=>fIHIcubPLKa^]=,9fV2=GPDFol?@B$D&N)K%i
%kskeP@#XN>g'L8jQL`aOmKDO>7d#Wj=J"rl6qK(ACI6.e?]YC(L$MB]>sd,BNMr(L5=W1_/*$<H#p`G@Y=kg;7##r<8ukpkGgC2h
%qN=FR9<(IfO[Q!c\QA6ZM&(pSV'WiVbG*Lbee8dDj\M.L%M!)T%2P'S;dl>ak:%#iM(l9q^0!dt9Tsra;9PF)^-5>T-qT)[IV2=U
%GQ&#*U+@o\>f<@Aht3*t[@E@]PlJt/1BXm1j`u_P8KuC.:S*JHPXR.GPY=+/*K+D+#@^OCNJLLte]q)E8ePQE`L/OJYpbIo@d8<\
%4N4$?&SC;c\1*8'R>"Y0=cB=Oe4-VqC0YCWcM$4BM'COe2)0G*DTkjEr6\DIB*m_cr5-\'8Y45r3;Lf?U04#$P'Hn:jeSMo3uiTe
%b04="ql+S[>E!>(+BXS<MfESgY0Fnp[abT)6=!foCXYDI7G(-IUY90V]@s3l:t?E)g1"#cN,%r>Wp)$#-eGT:4`-9+JD`Z"!4_5^
%=78WXU)PD/@*srLh5J(-m8s=ECAYEeO-AJ6Dsho]=tiilJqufqM[,)j'",*u-.V!mT`cLGUO%"BcM1O(]Z!Qb0#chgODChaPdtZL
%.FX"N)CbHn%aXYEFnd+;8&<PnF>D"7iI:K]7Hq2K@$Jdmc.'!HeOCiGX#<H)4rbM,>#D8g:Ga81Bs11:`JH8>I,`>VWCHK%;;l5`
%$b9msLd.:e;f?q5g^hjs"se"se)'o(]QuF5HchiN<jMm#c<`0?^%O6<XGq$f1VP3%'@et(UHen<f]B()(qhsadBsjh$"On7bDaPN
%?DA/WJIJ;?R:7r(dk*qMdJ%Zn#2^;d*>9t"1Gq,:di!k9G-uZoO1In^R/ce(3K"7W=)>7%SUQKfIT*NN3tGsQ0%PM^&h_abLEa',
%s';`+rn7p9/&7IUSoD2BXSMkmU<NY+mp'1QYupU'XSFL"I"+Ms/Co3Hf`/9[o,T"!@a0,%juX\TV0[=996,s3bk1qR&l&<9n0=s`
%RboJ#;QHBrF<SJ8),EOm+B8@Gf4OFs(uor01JmEJPMRYu97C_!L8<WSWE?FT;_/[PHb!a`dk*G?N"uM&,b13uD*"%;&)#r;eS4]<
%YrQ7k]H'G#FjNFKFg1/3kKW[<eRgDuY.(1KHF$mlN*OG,\B_8-Fd?^D?MMh^rj.=YCuIUJ=9"[+,Zr\JrNBDnF[t6i(TS43o"*PC
%QU%(>#&af22-S^LG15NQUm;g:f"0GbPWZ8cML>8ja_!ab/u)/l.`2PET!+N-:n6_$dpgV)X!PU/.iRahg_,739QeVMdVf$4!fcA8
%!if$3NgGI[A`7kOBDeHmKfNJL(P_i@$cgH-nZm,H/0$;Na32?i1@5k@]K';5A,HtG[*l^.+NZ8-V[@Ic%A'!]+C3+^1A-['H.u1X
%T8p1q@2%*L'$S7%'1iZoR.eEEP17CV+#]6LL1rkg@bu":805`2rUXL#g>+D^8%PO0EDg$]19m2dY@!#uT,\Xp0ho^LR!\n*qK_Ug
%(@]PlNJeI;re$Ep/?ZHhTtr?V?Wru6FC!-JZZC/3;5uIfcc+ErMaN@7])WVYnu#A588nR_@QXHEG+JgQ791&V<(`"MX,SEf@FW@9
%PMr-Jn+K[EH8X$o3`-]?6T_:n*0Pe`/A'1k^IL'Y(N"\pWSRA,#,\M7rnoQQlr;-E6CS,dD:Nas9Q$Oqk3HfQY*00S6ufe-]ubAT
%"@@L><Y>Q>noWJ1N1EA(M^V^nRS7s3i[@%24<,NXn7+$I(piVMn.pJ3WE+P%3UgN(O^[4hQs*.,iQ%=NR<IQ0R+>\niQ#'q0kS@b
%JJMFuPUP0q@@tesI<O0oQ+NmHMe4h<HoCk>+u#2Y[>7f]c-\Z*,=DSDairD*8VEN.i?ZP(4H3Zq&%^6!7-A"BM6BQ#,G!a\T$pRb
%.^YtS]r4e'@W(n9^Fn1Xc,4G,>9;ngNB'!Qh,1SGW8;!_B6;duX+Q.cFFsB9]$2K6=*)Nri`Wlr:Jr:!m(+HFSGP-h*kpKPT9>/o
%MdqBo8@CK9k`8J.MdqD%pXl-'jnLk$[82-,(s$=<.@A1'RW^3(h@;\O*"VTFHgFut8s@3T9R4-L&eV!(fZTY[@';u8bYk[3R\ESI
%m>RY`&)^n_+TY-i8SZq[/LR2VF6&6T&<AW"?>O-1`r7pPfF(pO(P[a"27KgP(=q9XRTim8$YsY"XgnSgf#!lF#A\2e_o(W\SkF#t
%`!k@@$)CalEsm&,@EpIK\V3&Q0^&:9b,RH,#$iu-VVS%hkK0Mm,g7g-FN;X<jh+kk19rP!\TtFBk3Zc;3BN<GiC<EQmtqFQ\&Glj
%Mt8Y>k@6-iQ'hCk\N0(CM4YcPYB0404U5M&O#+?Ol70F:HL8(?.UT?V(oc1<Q)i^_CPhtDSaMPB&hc+<G?sSgiQ^48duP-a1Fq:[
%J.6EDHVr4KR)`?B#/$II4dgKWoZ,bU*srbnl"b?2:YYY&-VAO@4#:NHo-_9VFP8hUpPVGoE,5App=4.]XtEZQ#M18/K(,@,YC0G$
%7u-2(11`M4r4:r]HnSc'Z!s]1==W2#Em7(O>8hd0@a$FPs$adbC"d/$dn\8W9E2'DH\kdrABO5<C`4M[iA`,:_/W(E%Gh_DLpaVA
%X?PaHe7FNZQ2t(dA3m.)(\t/<d,qLYn@?\9Y;;s$/bG^HeUp8B]n4B\prTqcQXF\CV;;!GeSIWT&l="^:l;,?.9bq'$_:sO5n8/^
%SnY%bMYG+d\Sa6BEQ[mPlReX_dl7scQnU-_XblAoJVg7+)nd5V-74@jI53(ILJ^S"`+6*M>D=DUn)ZEe^%3#sRXE@jqWGh$[C]eG
%NjQ0*EDe?qX5/\[Pj#i?`T0"<"5:+XN_*cKp;o&2"@):;@hKZVI<&"F!)NR+GXW!b0fL`I`i5LJB@2@E\86+fQ(C2raNmV0r6\Ed
%A;chm1OS?N<q2$eV9Irk5F9uu/^Bb1ja1u$dIgI9]`d[7S80elA%7p^pclZf,\=9goU)F#MM/;ic;4D7[1-Je`^Dugigb/)Q<gWG
%hAt5"VL+\t0C<FJ\&'`BaI)Bj[$j8/S,,K-<p/G+N'HK:\e];ZrhU(<f@g%6plL=_kV[G7e7N*n"?l3%eBrZ7jLg;QS&Y!VC5m)q
%LBLnQ"PX2pVXp0HDGOUfe;K1V\+QISB2Q9;D-s(<A(k\-><5JV]//E:Zr.4]01b$Q8_oH4eCQgO'RGc0_+Y=`o@1k0I`b4+HSaD_
%1pcLcB'0"%B%^r/%NuJj[fde\99%5"P+*/_Yg$NLX-n8[mE0cAB#=)SV##.ikJHnsE..6H;oi1?<a/Zc5MH2T+dRU)`:=G(i/3jD
%h9##N`lV8V+tl;-RZ!u*(X9r`E1pcX<]N;^SQ?d,07X#pU.)g#m'lps&,s122jlp^16q!9PfgF]SVu!8WDP^;g8Vc/"j/gh`t\D.
%=/sfNkA1@`8WT=bg-bXRYC&(ckD/e1BjMnn,$pd(+PMYBT`h,_Gb9a$=\d*r%/Pn^==deBpD6&)^Lc-T6Tbpm"5WKmU\VShDqHG(
%1(Ee$^46DS^%JU5Dq-'-]91gbs+gY&r9$c\.3dF/bn#2K##ATVp)QOnmAA`i1fBURiPu%doM#KK;d_Pm4EV09?Wl4f]`]SHa.Fdl
%AsN'Vf6#g_4SX*X3r!(f?3lj3g:+aL`1K`X[j[5MRB@@SKBn2i2jl2<AR7[*&&.:Xn6I^?_=qbjE:=&1_QsJ33!MLWn/))mHTs/H
%0X,qgU^qn&V?b"ZnKBa5cuFbU^J.U@@aH[6"ua#gm[%Zc[i7%fp.qkintl'c^nK4oP?SufU=T!%`&Rb6hgb$[iGVb^8*5-*/lMnM
%5>d->ei\a%j8+t1)MW,*naK'IZroass%a`^ql$91i,[tLj^&sD^O3!g%I)0[6UANML9E>njN`UN?Q_]l,uYmTh-MU3W57gB2./,q
%#A#@LVI#(8#?Y\$cOe*k2$c`(FbkO*c#:a9e5Uq\A?;eSk@EgpUN?".eF'D6eC,Npr\2ag+\U:@^Wnr@0S<*NAg(H^=h]hASt\Y"
%&P7Ib_u4i]:TFr;'lJ%K0r0L]"'q%3]**`Naa[rupiTEQC;]m-1_,Bm3r0K^N$L9/m1&%>K>Q?OjMM%rSW3o8EgD'CDR2M1_quPQ
%U2-;4.X3rM69e0#;ZD`*F#Z/cmb]YCI!+Prg%Qq/h_QsLGA>\!r!_UTlJY$.Wf=(KA<f;(_tC$>\S9[%gkg&GN&[_5r0S,-*-ZEt
%-+a#Bb+PneSc[#s<`lZnTW'3jL!\F)+:L9`AojJQVp-im(WGU>]@X3W:NgkZ@0Srb)GPg<8ESa+>GQc'BK7_Hij8Tcm6\-b024W8
%!`GXjCXLeanV3_bT8F+d%/Dn1@(4WLO1Lu^ThD>jP><Idi(*D"83h+k"Ot0Z9!rCmfeb&):.p5,0Hs!Ze#9R9bO)d.fUNVs3:P2"
%a?!a9_i$N1FVlKiF`0G=<(JuoIVZ?\kO#4sWI@K@PHja9,%It0Xk'QQ9BajR;GW!o9=G9#-cpI08%8?)Rj[6jlH,qjf#a[_UUb_/
%)<2f4N?0uTc1lL2-h/($.Z21A+YD2<<P^_/hl!1gor))pPe*Wu4'na;i@c#0<e[aH-0g^uC*H4WF1^!c/_(?*<j1'd)j7Rb3a7N:
%aoNEBYI2U759DaeUOP\$XRB4Ki+.#J<3+N+g8RiThQ*XC:o^BH8ZCN/D3in@<*:/99[=2bR7JlOk":VOV9U7.,WqLX]!a\`=3=4E
%jdb@7NYRLJC8F[j#SY\(Hn?jp@Mu>c=Hus?d54drE`:L`'9J0'BgaIMj&9;CRcV_)Y6tMOp0'S\D9*(&1@4\F/P'kXl?&dZ*un/`
%&`hEiC96m!h5GBLl'$t>kU9V<_Cc$[[n:L"f*W-j/'rfWQ('L"Bs##G/P7$Ps)_1DQ"mdM>1I_Eduf"_QctAa`d+b0*i8S"/W%cg
%$uL>Xn5cMD:cn>JkH_j5SQ<)OT+29mNXd?MWm[oEKjTY"!#ocMc0V5]]l$am4U_H<FXEISbI)'mi5KhuJ"SBaK,c(:ARb=\djEqP
%hkG--C'B?L&fiec2P6:c^%j6p[kPCedjGCO,7dA]Ja4VgaAU"@>>u9,+coE55AK6#]Nn?b\"UN3E(ns]VlN9C]mY625t[,S2$L'S
%SKS=4&jn%F<?"f8$ghJVE$B"ogMU=i/S7[jC%R?!GKKL*7Tti\^Wc$YHF92TJZjV.:;Yhq.^q=5B$&fX2l_bXZVD"(J[*+IR[%Pc
%]BrP/%\qb,;A\mW2Tqp8/j"8*_/L\pVM7d>p.df;<r`+(Q\R9\62V6$a!n[lXPHSk2,h''_iZ5c([6NVSf[87;qY(E&r3_]-+-[L
%?<`S!?.8Cnh_N_q1[HVt?gT?j-%4=#39Nt*qeffa)Tb'`fI_4j^%W"0WYDYqBGc@>M,.##dOXJJElKDDQ-.J#TWrX?;!H*:GhRhe
%VV11UD^O(=+/0H=LLJN*DX+acW&285#.n/j_H2`^5Jo!B:UOCVpLC<'>`FaC93&&i?--Y"Y^/M"SXq]S($P6m(e.m.<3)+[7q!$K
%,)<"5Qsl[lMcBLcZVTiloK\?qN@BaK^4OMT-@hn!Z+Om-b8OIYbS2l/Q+h8CVXu-@=lLsp8tWXYpR*Zu]36A1T?GLFDm*YcGuWhh
%cOq$77d'Q_0^Rb`2sS#[c"gd#U8;PWD6a[(e_cR?2kh'7B'0$XL[ID2NeDE9FHQ%"huhK`eL0&6!a:/\GiHV9Y1`Y+3!o8;ME?f<
%X]L?WDg(mP$V:*_B%Ap$%%I.T"9??1R]4?)ghmln!>:$&D8bo]s+V=,5,rC#NLfUlKX=`tFarJH>&?75nSaHYa11.+<*pC]QNmug
%];=)@1=*'*a\e2KbanF#WV_1p9b9HRJ+]Q\%pDndgJ!b>BSkh_]+S+u$koUq0:L_ln"QKl6-0qUjPnR_Ns0,+PtUT)Qf`!#Cm:Ad
%FNb>ra=JaiKEe,^i.6Qk"U.T)IT<jA?0ANI3X+j1E^I>qfGO!Ne821bH;YW7C"etW=HQK7n@CGG0hD=Io5pmMekBdMZ)P?')GOd#
%V5at[fD&Z:VR!klN@NIb>r/ED`q1(r8qC8-0&BgACa_"qV]</R%q9^UYEWXbQJ%];?Sd$_)n-&XbmV=MDmrB).Q6K'kdJ\e0\1H`
%^+,k."V$X/,27P(X14k<[=="($8Tg8@tn,n=?IoMMiDTZZfGUB*[nuE/E;>fjB'?VI?jl+TBX(l<]eRC43-t%9N5F^."q+08p=`o
%69Vh*E3)pY@PK?*q</7JX/&L?V"/Ai7J(_Xr\$,fV_O-W\\AiR;dBg$&I)-qqe>%T&22TWVcl/f=4[3:1:8XsB)=\R^>M-$2nf/"
%:I_6-8T#1TIN)@99%Br,IuJ(h/5`t*)%.l=l@MU)].+%igj/iRh*L(E;PI*3O%`/FDDtd0b'hk)VCT'!m0l_=l((H"lsZ<)dP]:C
%27,#Zd\g+3U>sDO8N3C8;HGFMO%<7TPFQf$N([,+bG:=2%PE/93u931+X9\`)4CsS@u[EC0OO%crb826*/DEETmq)VkoiL%<GkQ(
%d2@]>V5X$L9r<=\:?^.\lN8-?7X=@Y5cIA8L@bM-8N(Q:0%]bnA>sXSSPAKfjZG?k]N$J!NfXE.CW5:"XPpfX"c98%CT6b(*Qf-3
%^PM$B\?[j)]$md<)2.W%WJD#HMog6*XU<(DD,h.4=sJ;A>*XqL=_4OrAh[sT,Gu/rrNgCYUg5u%\\:9lBj7($!b6JQP_iOBjQ,"!
%aj8M.1dC]3)lb_rU/(BoTpn6`>*i3l:O,Xp=ItaTDm3^bQ9(qoDS7lE.)E8A;7g1R)Dtg<kR*bL(KYOp'c3'+"Wm#mni1uLc/,E!
%PpVar;P(_oGgU@-:UHB!aiI^(ZBRG40pJtEC*h4[Gf"G=!DTXm"5Wq9]+UTaW@quY3@6=W<O^[^24q=3/";nA\hfcTIHo\Y_P1==
%"\WZ0]!f%qH(no%If@eo]/'ppV5QY/dYEY^WRXP%+E9KGc;$tQ)_J^bl0G2>AZ)`m#u[ge-V1>*4@/O?abQm!0gU/W.,QT)9%peH
%bk/\OqlDgAM]0sTl7In@)rF%KWJ\98$BnZ]mF*uI"!\JIf>EcC-Q9p"_.$nVI$JbH6FOloSgU\GdLtkj*M*t6p]*$jp0q2>\'R3H
%7p=DOfKsYcHSO*>UEqMDIu"\^fXq=gFa>X>bjQ@uDBrG'gl%@.?_iE0DOR_Kjm?.LM/)obq^bVdT.@r&`)jHgi?+Dp1ND1T*';&D
%,0$Ql7t^1q-L"mZNu&(M'#R=PN:bO,c\n^ccV+iTl9hUPC.(FU+c!QiQJV)[C-<KZS*e_OBX>U?,"VV,_?l-caYb$&l@cl"^3J1b
%W'MHg-EuTX_`omG'0Pb$Y<C@cA&ajmT>0o+Jl44akG(e]b4N1AB!#5XB:;SUU)5NkXc)o[1J.;1)JbsH)rm3C+Ylb]60=DMIW)Gr
%^fj4f4sG!Lr7*]7=6`7F(VTZZUK!M:(rL_..]^D9lqsdFpu\M\Xma,sH*$nRbb=WhpuJZ'$<'t+B#"L:DgYKV0=Z)r8.3j<nC9]Y
%n$$n(K6q2+^6fVn1E$93OdMeF=PE&mo`Q^cWRF"j:1%(tmg4<m@COabW)]=`UC3HX;LhaSVQggo8Q-Y7T_/1,C8<n,Xfg/Ei=L1)
%RJV@S6TmJ1lJR`ir%#iV#5P)E7%m7VFP(dl`]op*<3$4q2B/V$a">@9MntdPQ`?$E[DBRMBqsi`$8RnU)?<d;gI+Nm-rm*tMc-QU
%@c.."&AqD(X`7f$?jG$9.cG\\Sr?+WN9/:TK3ACX/_)s^"fc`D]uD?>ifkK=Chm=jgoe'uNl04K>HMR*Dfpjhf,Tu2C7)q`@MZt:
%QC7-Hf>eCYfpJ<b1+`q7fWC>2O+RaFnG_CBJ!(k=<mKoc7Su(ZBA-jTQWTZ:``j7b)!&I\[$u2Grk7"!e7BY%-4re;.CYeEV/ER1
%,Egtl/Os[M\WS_Q;h<5!4faUnF2bV9f,(QeGPW]X,hW63aH!SuW&RVKb`Uj<OQVGg-HB+5pi'J;CN<_?ASb;<AI\76$s*pP_*<"p
%r"`K@:&+7_Fj9I4IUnkSe^sT:$0/:oOKk\9N(9mD,8u)I`:?:d_"7(upLQSY[57OBh.EEBVX2T]:WjR$l_EF;?#@e^UY?M!/G^&9
%pmnO1-WGV]"@EpXWsOlYjIhnpqS^C:ThA'\LftngE>^.uPrbn3.Pt^NMs46P;N#BVW('tK%t)8E-798J60%dFoI\c#Xfr//an/#s
%/1IEV0g_4@P;Jn,Iq6X,k%SRkr=h<o0O#8]F650cZP0io0UsY8dcDM4akkkJb8\K_m]Di4X?<iXm]C([gY;CZ[I_CtB8%9T9D<JW
%;S$r(HhDL(]=#*CCA[P(o44uuiSO!7]3"\6>Lm\2a)mhUL=++mae,aR[l;o'V&sMkXL($XS`eQkaC]M,GbZig4mQ_+T=ujoDE-$P
%Y57@%3M0((4!2PE=Et8lqYA"!2?2KU2uhuLep4a9P,UBu*<<3gZ2E7deLT^OgW.u#[<orU:&`@]FuklBD*L/S?b_!g+`il@^E/rH
%So3rUk/Lukj5sMm?!km\h!#Q>[OZ!P%H1=^$k57Ip@6e]ei%;^f$:Q;h;!_acAWq;q/3o_(;Fa)4Lo[[(dXiW\PMC\RdbFnCOW1e
%F!J:8I(>e.>eSZqKm6OroH9XmbL1EVX6dQ*b$?tSlPl6Rp>+isMj;W3S%3mL$G!,0i:6,G[k?7TjjGG=<L:2?MAIgZds,!cgXY&N
%f;bI7<O0"o:[Y?nQTt*t`P];p;1SP5ld%2"aMqG6rGaXB.,V'Y5MBCmkgr$]Wqu_4cC(5;QZp[8b;E5(/E`XJ?3>6I]uWFHNQPE^
%pTOdcD!jJj>$Zuj21NBdA9_=kZ^KS$\95Hl'"W<QBn#6YGO)N+COTIDG[5U0At@fT8:2L<mXRih]a)$N>2FVHhTH*iof.;Dhco1O
%oQ@!DQlg86jr]mImM9[k^M@=;*rbYc\53gZ`]1ZBj3Z!?j2)"Mg,Rr8cI1lV[QZKbelunp>4<J@q=3LI'eB=Fr"3R`r+KTRo&[h<
%W_HW*i4#%q75g5Wqb.daUFLl+o]Q9R71R`#)qk,q_$r<G'?>I_I48fhnm@^SB+LVah("]Xh9L>EY?lt\GM^!Tm,bPMq6S!(f?LK@
%f?PP/XRl/LKE:qpX1[1J0pc6[SMutM6N50u8Zqp/HanN*^N3`&SNSY-_oJBts.Ie>)$Yk'ld%A6`<X]sq>6H?$lsmVlN5]A\ukVJ
%jX76)?^XHG]qDaCIal'!3I99D%1:\lY(hV.N&U,CK%2%:TY2<d]Xmd=Ep)6S]^[7c'L$?ee.+B#D\Vch7NSW^B:IkXrq_M)X&lI&
%%+]ft>]b:F'2##eorPZo3I,47]@g;(Xa_rSSNTb]N/aTVf)=?q2HWQ1Lj6Uc0IeX0D;ENDGR'R>bJeQh[9)PsDjrT9*,\c\Tl*3c
%Wo"!=DV`X0?Yjl_p%#/9N;q0am]VEEVmY,2ju9cY<``&6@FYus7aH.;:$-,uZ4)B1j"R)W^:bLe?:q5ogOAI\60Hq,$u=VN*Gdpq
%rPJO3g3Oq2^9a+IDh#d%BpE?S=8Ar%Q$<2.\%;=&`h'R5o^rRQRXb+CocX..>H)7NNRuG!dD_U0^uP6rAC0%6BtgeYG?=b;R=hi(
%Hgo_/]30'_Geo0\qt[RF:H^+Eo7@F.>HcpH'dGd#nGM=/?._8hoENA5chUN&i]-Pp::V$6G;jS^oY))gWNC'bkbdJGbXNml4u5+&
%QV4Gq@:S%sdY@UB#7jEf/24PH6apd"p9p8.I6CUe:Z&A.TU37h3>=/.*(UWg?=)ORSAFu+^?&tO?L<1'nFNt+s#&#JhV<@E91+lg
%Y@0OAhT_MXH7,,uhN=R^V8P?j!N!N`0!F)B<MjuiLMo,Cm,]/b_:eXIH2?c*`kHf[p(fRRS@P1@DW9,Tj4Um:aG<UCSsV$$\L3R6
%=FC5'W2)i$f.;r?3VnnF]u-T;&q>>J4r66?OHsJ51)m7thd+JK==<Q@>F8rR''!aKZB5=7@]C6%&^(A7N:Y\d`IBGR=JmEHS:)lN
%'KAH+JS[kT-8QF\hg`4aKX>m]VQq?dr@!LhpZG/PP2DtS7Xe)SX^_DFjG?3edSg/aOH&l)QP+s=JlH?gd8tbK"QHgHUjdff1AY`P
%AA^St]G,E"KV42Inqc@)YJa.I]fi/&S&;(J4LnWtU$5.SA@]]e=kg`K?rZ_7fetO(;9G`hb>>k8#Ahb>GWfNq;@aCr4Ao'eik8d1
%p2sMpi?Jh9T;2V5>+EWsG]@aZCY#liEi$^SpL/\T<>MXha/\Z-H3>HKUs#j_,4<W_KJcd+6&Yl`pZc^YD`!,.!D/eM9,fc-P&R^f
%?EGrfC6<q$&"Q\B""u@sn'MfL!Yg<FO8jJAf*NO0Na=qg'K5DK7plRl=o/%.Af<@MSehd,GMfP<DELJM["b:Y63C?'%JictEqB(W
%X7KThe&g`Qq=<iW2RdB]L>1N+D=6W!aRV'R4(tb8/KQBVrd=D<';cH2n(dr9-G>d0B&)*fI;^RY?1\W`je"d;RajjLSj]!!7Xf:I
%n5K2uQ.t#)h2H!Q9W#e_$_qmNZ22#Xm/Qb;c26tG:jq0R.^'gTb^(ejWb,G'g!fP?oO.!a;Ro>LHI`H=2I&?@&F=,^SZZ+GrJCeu
%==Z5SR+aI6i/Ii2XYq9h*dl%:_,,[a?/C#(/&k3`bCpY/?Sl(%==uo\PRVaMKk#j[bX2;NW@XF0Q>SqKp$h7l-!-Sm4NinBX.W@l
%k0EH=HWsTW:I!p4B>&YR_u8'NbK]blZ7kZom#nB-UP:u9.c"'tf)OBLT$HePnOj3L1cu=3?3Qb:;u_!BGa-m.oc0D`FApa[<Co[5
%*":99T(bMDKC*L"4+C&7!G%tLK>F9OHhm'P3t_+kQQ,/f.)XM+GIr"h1^o`&SJQ:[`=Y#P`]ZN<ChF5nS'1<sq,anMn79l!I!$[p
%k3UKJ#k5EI-9)73GF,dZ(E[Or6&AB46kf?_#(b5_$=kf6QbcMO5BC@*=[Tg[;teXcF@6!LgUsdlWRhQ[Wb4%Zg<16i[Q^K5(VfJ(
%j+CQiX[Wi5VfaAg#HW?Ugj]#^nB8d`fpDT*0RLI7^YhQJ]tKVTq;Um$RcNI`j"E<G\Tufr070Vo7^85]D0P]JG$igpHhQS#]<d6.
%ABQN?[bDV%S@.25-^;N[nRVSS)Lsj./BmKpbkG;oVcfpa29_=eSK"h[GlK3+Y!69Y59)[je("l5f!\U;gGb`f/NgPXikWo`$jP'N
%V#f&q6(r7<s2G5bC2\![IVN[?^KeLbG-QEsL"S0X6HrdTWs;lM:KR/6g(-C=Q8[B5DJVIJ8S(\XED+lB/MD13VF:".9^9a.nl(S;
%``bs<)hYQN4Ng_d<KGoGX7$RXB3S_aI4Q%V"#R_FDnom9]!2]:c1;i"=Yk[LBFtsH^YS?jT"d-5X=bSXIo4<hlJ[V6JkJ&=S:>#/
%F&-_Za_A/.j)LMJ%%+NkplW0(ID-Y?W1NEAbgt2I-87T!O=gUfYWQ:*$9i?uI(JnjMLU(bo5"'KP+9BAAF"k&fXlP:^^,.'%Q`K.
%IJBr`f5,-uISV:ST>HNLW'L1!]<0!GI*RoO)tm=>okEme">lEe*.-!!Dj?ZK%iK"/HjN1!EPV2KT"f\hF5tBC]D8"DomPD>r?e(\
%q-a4bF)\LFL<'"Ym>l_id]Bfu"bo`*NumG-hA79,#')t#@'&3E**3!qkjIiU_TAplDt@TA=gf+$?HGE9]"^W_NuA0m]f<cJ#q[C7
%\UJ`!n7"qk%SWo.SZUuYhO-Rb@=>OYZCa$^hsPZ!ejZP"o,D#F=?+)#m2i**A&$j3@I1YahV^NWPY6J]h(NDRCXmbbG<shbaV=;a
%T0=)=>V)GX%,%_3Cqfp'0%K7mrep@D?=/lgkgTK'o"2$;3+&k,XYeq'0MK&ik0P]-gobiCgr"5@jBsdjQ>UhQDV;^2lHL"2c$&MD
%me)dX#/\tUg,Il@9)\D_C3oKPVD`Hq7N)h%`XAPTrFAG^UnOPIpUj"MY>7+J[A']9A6tCjDV`C+*I_ngW]+k.d(Z'a9]PY<F'(f(
%]"thaf.=DJh6VlKAoDPPq<!"3V5r^jC`?$:mFAFr,P5Tfs&aQ/579\?gj0cZn+K$cIVI\$!aXa5gJ%3JmfA"UD_b4KU=TpUpe\%>
%4'GR.r5c4"[?C#7ZZVN&_ZS=7:\&-O4#fg<;1k50l)d9)oC9JTgH7]FHM`i8P6i=;Aqh\T4SZ5XqIld+fZ89EikW'OlfR?`EHJo4
%[+ZngarHQRfR+4.^7[(F?R1o%l$m\*)r%dVqXS-Gq^KfL?f/!#Q*k2@W4CGE(]R-A,@BkV^-4XDC!7ZGc[,EZ6"P1[mDYDb9ll*i
%*-jINN>u<:Oo=uhL.pB=*Tk7A(#5iQ]SJb"(2ud(Nl]\_?N02e:+*es>1hQ=J,@MABT[5JB'Xf)h8)SPng7%CQg[Ir=uVdUcu\W*
%%X7P!Is0<GHdFaQCL(qXoC;GGS\gBLS*aFP](r[E4$BCqL+n[[hoE^02hg&?'3fT(@Gd`ti1p18WEt;5Dn]0[bItR0Da1rLJ_gub
%b]@!;rN7C@Xr!CI.`Z4QI_a@j9g7;+KSDm5=kSUORE0i]F?aa!lc5YLD1B[oR9:K1nL'Zm)in44oM-jB,C$4Ne:9A:/+:-kYFM_R
%]DDFO%N4DjCa^#5oi&[f)ELIG//0%-A[_\CYGUb!_<YFI5MRhU4hTUs1c&c;,I.@BT*M-9/:g]1S?M<4gG$)Xh7\rLbJm^MYFAB0
%5l0l-/p-9O7`M[('OF,TqJ9u5hmVA=k0qm_Oa*^ZMOqjle+VP@)D+/\Q"0X;ZZj_PJ7';lR'$1R\&m(V$_e]F9_]-E3-6.AXe'C:
%V6%83@e],8,?q4V553b+>"d>Ao$a^>A)j/`hfG))q]Slg7C]47$Q"/KbX&Sfc*-J^XU#*qZ6tPNRr9^E]3FBdhFFelDR9dU_84TL
%%HQj(K-H`4lY#n&GJUlji[GUVLfU_fj7cTC.NGc4UM-_ND_:G6>6YL#Xc?'KGSg5:o@o@L+[%Ala@><@]X^ligt*;5IVsq94!=7Y
%YIPHRiFeTeQ61>-Kkd:!TbF8K[.Nqg>I7dE4KRCCgYfZG86%XK4nN-toP0lpS+EaUYheR'6MbG*l.P@fSGB2A=c_/%ej8SRqg-hS
%^XbuiU_3Gp3Jn?<]hED!3nIsL)LgSW/3O._Y\C22oqHX05hpaKJ#Ic=f9iQ!TU4]>)'4AbITS"7SjR!PllB(Q2e.n"@mU7!KO&7Y
%`tg'P)nVNUPte3Ho*:7W2Uk4*b.X8lR:%n#'3.K)YE?[!e;1EUAYnD"IeE5Ri'5=Hc!@ucgdDhBk2sZVqc!Lio8T5[h7<PAeC+c$
%]3Ccj+('RglG$R^XHfu#)"c]k_DHYkarJpdj4KGuHF);8s5mqmq(isns/g*Qf]Xf:!;>=G7jktS]'TuGjW<O0?16pq9(,-tHi3QQ
%(77Z(^(rU6A_nis==&_O0g+t\Xi#"9rO^762Z9+j$:]Q/I*DDAQ0&:NlE/g5<g?0sX\pSiX]_J*qq9]'H*mP4h4"Vu9fK-NIk8^"
%:T(nCkE!:aN8V39`m\[4jiF.<cn!nE)a7DaS3:+?L>%-bP\HYZGN:_"A,46He#]LeD8c4`#/0_/%krBX#DTaT4nU=DBucX:=8n>6
%0>-*<;?YtEa"]M#,5q<Sk,alraVYsM>+-\$nB0VB36FIa4tLWR]R?Br"=lRTmqrl:TjB8BUf$?6$KA)C(?elREb=e9;d=N0Iu?j"
%Yqj#*$$/Q-I_BjYr.69`_lYS9$<prF](P=4`@DdP<o4BYs4Mb,p\kOBCl3oW,FKA9GLr<gAad@&h7\<Ql8Nlm/sF-.n&Be_]"i4B
%*jk4en$Z9S#3T.PfO!*s5kWUKH0-O4H/O+!?@)/J/EeCa^,F2[L6B^^>eaE+?+YKKs&a\r95AF.&XiYQ#Lu?7Y[?NF2Ckj(SQbHk
%:CT"ZQQL)[QC_^kXIK04.npJ)Qj;H2@mh&K<-R[#BZjDnA1[%jW(]=UOJc;B;r35hIN_A<2C`_Hbh?+^o9Y_9j2m;Z_WRbV(3YQG
%q.DY3$roR/r8c?'cJI"PDsbfM;ii=UE8;*E*$7,2)<`24rU2r2n3Qg?HY^)S-AkuI_is2ah;o2ohsq-HV5)=:q=.Bkp$-G\G5,h<
%rU'+P(bKGMgJdb/Va"aQ0$7HNjo7LC>ODoYa4BA:P].D@kf;"GdZY[]3O?3ppt3JRC$=Nn$'4_X2D/d9DRuq*OWh.gmPHOpGTCe]
%*_'Vd?]#7Tmak)%I$+(F"jelnm^p4.%UO[E)ts9^/lAK"H?P:Ua`"l4s8$0H["9"J"eKas>!2c\Y9cf#LJAU("@f9E*Hk<)X.;A'
%_c!*lC*p'&!m+fkZd$^fkKpLS?<945?sW\0g2S4Q&g@H+G_7n[jo+?=hgb=_?Zn_[3Xj9[_:u;K^^EL;*ZW(?6DW7bm?pL"6H:nb
%]`-^Z!fqdc_SC,nHGR3.^mDJGVH.QS9Y6nTVWon9*Mu-IE`/R?RpMKU/:/)YZ-nqRKp(ZR6`>QE'%Ka08:J_R6+F_n,i?$M+IQra
%Z9jP8K+duGg@]kmUDAt1VL@?C1b'9soj!8`m?sZ9)BpDF4T##Z=6p]D]H5m%/_s493MpOF;jiqP)(n17Q/Mt.O*AuU[UmonoL<LT
%2HGP=Fl@]BP@L(?VK&7]m#W\a0=dLZ%*M%lFX]>Y`XiK*_q1hXJss+blE1B:J5QD_8.*eR%t1.1*$M#.Ea*G8$j)ar"9j"_IOY>,
%\43,GW%i#uR":P:-+$!C/'ecHaopkrhR3Oqk`6KjSBYZgd.%X8YnJ^6V\i8Y7_DKFZ%G;YV8L*Gp?c>6L/]N$#\;U:RK`(.A?[0k
%!!sLmZU,LSJE5G6OFcKHL.rrNVIh2H!/oqBC!1Q[NETgk`sVs.MBpM(/1hM\n[:#AK,f='3MttR-*K&'D)g#h]JNY+V)'M1TEH;A
%DY[>e242a\7*W`,f'8YA[Di4S9hV6*ab.m3necsf3I/C1"-A>M'f8Xd*nLh">?LqoJ=XcgnIIg:T&F0bg40Db4mH(p$*8[2U#i2#
%1\=fb)XpGV8l/(t!8R>@Zm:XOlInsfL1eOt2EZ]+>6ue0O`,mS+$oSJ%Npp4R6Za!'uK%28g?o=^#Y>K<=!HaZ5nos[7]JFbX<iK
%ddT`B#<5TO>+E`(<1-9"L>Y%o5>OJ^3s9)A7r8,P<S,f0rpQ-kkI"u?m<I8,H[TT`pcl$;"Bod^GU$,+Nb=W`DdT4Y?3gMD.SotG
%b+-mT%K0n@^/#7.]HR%N[i)BO)*e"l3'MWP"eN//)uWpBfks4Fpd\*5J4X:)i9Z)K;Pi+5XK>Vi><qfFGo9]`jJQD\C!`uSamGui
%q?cf4-Xt\V?fIVG(!fHsfdl%?YaR&%l0tY4_i#/i]O,E?l>gZ9N(IC([?$oF)O4LUeop]X1DUE!`0:_KT]b7GC`/7+8sA4a#&0cs
%$<+;8ZSajiprB:hh6LIh@08Y$9/*uqOQRQ\Io98#Z='O0bmZJR!45J@2+LLiLZ2.E`Gr4#(W<W^-mP$"oLfi*D*X4LK-`g^h!j6s
%qM.t'[Z<>hPm%I[<OTb.5qEgApCP@7T,.WDTm6QB1U6&W$kf:,@ecViK4\.s<8T&,6r:.iNftgW"b/F,`O&q#kHOG&Y^o$<Dh%du
%LG2Mt8e"`T&;$,K1L!D9Jn9I!jo_Ql1NO9RL[Up*JP,Ab6]d.!s+?q2S2hH`TVT*e*H?$cd!sjOWmUB?2UF"W<#DiKWT)k6C,dns
%R\<dK+[Ws*dq4Zc7bIKUOu'VmMZ4f(GeuU;h#V5D0'MXFbfBB?3m;rJmG[C?R/<8W%4VA/!UceL04i9U^pXlCMJRThO@dTn@&/oQ
%T'TsHmXh9i8rI6C>0KTKH&=QW:+M]*V2</n%2"gg*c3K>[5!HVUb#hML"E\&Z[D$5a>DVU+FIk>"&GTYS5YQDm4gn9TF7cTQ4e:G
%kePQeaUIa5l_/aC1$<IKIV9e27qS/_A[lI3$"LU^.0b;tpS$P3o@4\h*Xj=..q%OYlpFc4R7`>_3;(HT!V=NRa8?\:JSLQ\o768q
%cqT(B*c`S$`NZN;;]Y*=]$\iHU0m+Ns'>pCQ,ioUTpAISr=:^u"F`CN>ee$3,aHl))r5[Fd2KYQ/=a=_D9s52)T)CcRMsSlNoo&H
%`^_8mW^BWhZrH!gaj%fh'Kq5G3p7$R6^C:jdDY!kL.KCc"*GqHn15"sbB3\+%g"-];&]Lm;c,f%csWOua5\khN#3t=k`$ejo=q%t
%&HTtudPts:5,\V7A_*Tq%Y0(d0iV9&)omgP9;^*)igb`oWPEOK(L)qc9nNtRH*0U/5;;:d7P>&ETp&Fi(c/R-E^u+D_*V1uKT=mp
%3YP+]mRKQ#iVUDK4H5OoMF"/=+L$oU+iOq"$./DpTu/g@:)6L"d6uuaL.J;:$^crj(li#.g&hB;fVUIcJO,&+A"*AC8LcV&cXG2R
%Agh''>L=.,pr9$!!lNHb-9<c(-#cTt.0c?;]$(V`Yle*YV59i[2\$i]Q;"'1`&S9h;F5#"7R3PL""$lPHQ\u7b22m.TQAOV]_Boc
%<#"!%D?.!sGIVs:3clJfLQ9+]F>1KijCf0*'-:D22+5_],K6<S<"R]7:8G,s=<,Ad'm0(;d)fb=1n$t*dh!rCFQgZ([6F;73&+WF
%n:;`q1\J6g3CsC""8"ig&ads=(b1+"=pd99j2cM#5aSDr:=af9iLD`&$opaF$q#ahB*YBFR%6X*hDfPg=>Gj_''D)>8qgMX1HWu@
%"8Y6@.DE]^UR<_-THOR2`-%&cN/I2#OpRRbB[`[VJE!=W:BF%)"J!a()G)g&Cbu77</`Y+$o^TYBjEEZ1i=oiBQskCH6_3UWFQoA
%+O4\WN"S(m[![Ut"-&9]@$4p-Gq`=pYm1IU_p*j9hsJHY;F+P0olV[Vj0@k"V5[h<AqU4CZ3hli`agKbV/am21!gUL6k*E+)J=eT
%5TOO2i>W#](J1LOUu@hu#cL"0*1o\[cq.sL(LnM;jnOQHIj"LhC8N![k\cQ@ntMi_7>(spA=.VM%NE*$gqqDq2(AY?GXe>CBp:g>
%";O-1(iYuaJE"24VS(:q#EG-CVU5P+S;,+`J-u?4_CKTY*+=GN_e3!!E1Qb++io2OV'TV:Q]kC5f)T*u_YS=u@q)QI!(Ur1*"9WM
%]qWqQ.[l]]O[b3OVl1_V!7GQI>jUI1!\Rk&WA9;5RP^PX&-4(l@.h$_R`-&s%$MSF+s`K1e,of6XbheZcHUea:/O;V>$f&9)1KY2
%P2eWq!fc%rBV8Nj)ASU(?/,*1:)Z\/9qt#c[i>SjB*XfWVPP_]oYt>"`KFplOZ96^;C^U0S+TP?Jdqn0$[HM$hU$]W`G2\kp!3r-
%LsfH2iW^;:9\Bgf4-\S)nOC%)F5Y[h'j%4HCrf.E@]2jBM!FdARcK0QKSHA<d2RW`b9YObBfMkRq%R@IGhE4bAMN;+%sEbjKC!("
%d0#$FLDeG*fA.,UA>L#X/0L0Q!+L\k"rb3qciV7s1off8$04&a-]Jgm9i6J"Bt,UOSVqQ(+M0%Oj1+VgaY]GWSC8#u-$#$&X3CcL
%BJ9^?>9ZQEN!:I(T)f0q\E!=aDMj>2P/dn-dQtsJZ5ceAh<9iK"8*$0Wi.8I;<&Lk3,,0*E/Np9c^Mi`15DRW<P[!dRCgXFZ"+bI
%,gL+[PR9D%ABM(:1KDAJ-a(%;Qk'WkH4\/c7PN1`,o,JeR'DI5j`.-KU`iMV7rKA-hmXVcML^6=BPO%o;BKq2$M&om6]SLJbiOp9
%hDfPg=>Gj_''D)>8qgO.'.ABu_qL]!K?_`8@r!8C%-`=/#Hbm&qR&7N7=h_T/=boeS#a6$j%/8#Kn/dDQL3@_B_i2Ic(WEP,K4V#
%<&DuVr]tOF1"nt>hr9W7P@]nk1jM'Y+X0P6TV$QSK*r\+1fJW/n#Bh37KKHi/jY?1#jh;=.OkdA3".a>RCHo1#9%Q9E%1U]9DBFU
%KL3;B+)7<&;@GTTFYQ(56-%Y%/EG`Nd.q)uTG(L`8>D$[3=V*K60Etla:\$s$=.'9HqqZ6^kuVm%h(MGbX9!LK2Y_[]aZ;TB7c;b
%0L-pMWpo#-TF7ER>+S4&?kLHKClOWJMF"/=kYq!_3lqk>ESNf&LG&e#/<i]!ahud?&Q.L&H>Gmu%K_gpkd_c'Wkp=S_iMWGM3Z7$
%Cm'[mRQ+N^W%L%<Oh`h;Kc7XEe3%QiMMcsV0Yr)S,E3C)9i4&cQYPkl[(8@u_+&>_2c_Dr6kbA4)Btrp%Jk?84k,$+PlV.oLVV/V
%]l4NJL)ZLuB"t#cM'+>X&;V6PA[4&I@3`46NS_foRFhcH8#'N1OqH=b,=RH?-AaF4RhfH[H/ZDM.Q7ui,Ks\dA/Za'B/D$/K$4am
%.g.[hf$k\,Ab^pnU?c;#3rp39&,i(m77C?.q@a5"3,DaC@Gtr61j\2T\Lq+Ej&AE6Qk5dO7d>V#:dJ@<A[l`'Zoi8@.NH-Agj$)7
%)GML&Bo%ud3T"ofZ4gV(FW#4k+W?i,e%cM#)0?^]C(+djP)>/DW$Hq3#\0sZgQDfaWWjKXd6]h!M_uu=Sbd4@BUgnW$p$f\J\qIh
%9I2cN`Q'E)6:Ys]V(.d)UPU6U%8*UmF&>_DF/r$8L_Di)F3-a8#9acnL5o^9.rgH(niABjcBVMB[WMD)2iaEGh+sPud=Hh'WH$?W
%3cZ.hj6F$]#H.c#TIFmQ`fY?&<*^ccBi%EU>X3aWQs"iLjh"RO$KTtbY_GEaO:+;WYkrQ&77DJ2M]mlI%mpM(FJt:r2i\lW9o=hE
%[LPu/)CLLY6V^KE?G'NF@gAsJ&>RLKoZ!$R`KFplOT_RJ.4'!8H9Q%\"auCP4<-3qEb7iCjo#b5(a3[&4^1cHMj;M,+S3tO)(KeP
%=#@l8+U?F7G+_\]'Zq5u1NCi61#s#`/1pM4C@&_[2)(2\,KJ[I3E[o$7MA@4)O+,Ck?A^[WWJZJ5o4!<1dW"_W;8dg)0?q>KD3]m
%MM_IFlk,Q2Zm@8XUM4`?`hB1#%7N,VYTZ`qei7B>(j(WB!rE1SNjD)T!_Ym5YQSpX:a1T?O'jalU;SW?/W/OC4HJ/"TV!'Pa`6@G
%nGN=ogd&T&2,7"3oJU4GZ/`1C@`$'hPY[.N&T48A=e\7s(#]F(VV5ua)Q=6+5m9F(F:^CQ%\4`6T`IZ%KUaTZ9V[Fi3"8KZTE@'(
%27_(G7P![J^lUj;8.ECs5mN-L^JZ7h-nLA[=?apd/]i[F8"iCj*&Ts>;*j#49D"@+,fC6-1lr=d"r&/0_Qj8J_*r8^/lis[6qY;+
%oLgK\_W;U!OZm;d1VipMfqnd&,e-2A@lQarncor%'buB1!["]<d_=a\SJRM39mrcq!m=>+$P,+p)7Z@-1GtP@dRZ+.'\,idI$Wgs
%BRjCQ.)>&+!0^uWBf(*kc(KFk1WO(_d<Csq#3]Ir)/'`G3f"gZc"9/E50tPi7<KRSRMF1e'[LBrO;p+V`^04@+OI'!J87kcTQ/CN
%1!gULUd^h]EC399F]?23D]CZA.[`biLbfs6;#qJXC]Opf)Y/J!^75FU$u-U\+N)G*%=;L!=]&%"F>R)0\kW>KhA*%5#PM&-EM$iN
%HAZA?50O56V6SE=1!gULA4<%pis(<!^?I/tk`&E&AWgaaGm($2&LD7jjfkD>!"i`NcerRoJWE[T1&Nl\9Go"H_^;APjL[U.c$!BQ
%<'Z!uQN"mTo,L8u@[o('Mk7p[,K5aC<"F=+6]SJT<*YBjQcRPn7ueBYVU7dES-GfhaE_H2+EELaesh)[0)u2?l5;X7H@3;\b?b9#
%S"udg-:ZNF%eO[t[jE179&SomJ9.FGqk6KU!9_-+2,5'h%lcko4ZI&@db*O<$Yfq[3-m*]ODJ5SR77i]E#Os=!bXgt=KKWL^_oO:
%bb$Yb5Ml)NEYnco%VT[A$@/r$Tnn^Dnd%Q80RSQo]lE+<hZu%g$c4`:NKZhh+fD7[Y:RX&:gr\!!]bSeaRN`]1n$see"Dp43R;.J
%C#Et%*i9-*2aC(smU4coi.-sW$nOCh.Z-mDh18uB,C:7UL96GToL?WAk\^#N.Y[r?=2)[G,O*!X<0%P#MB.:8L6;ZLhZu2E/=As@
%8T5T4;?P4?!R-([9A5+4)BoA\+fF$86-,]$"3%M@[9Z3)J_:kJAJ?D7_VNKM3dTi53?dd\'3'p#'-tjp,K6<S<0'gGMB0JFi3$f$
%*PHIV7/97i9dIPh:eD%bD4&Ou'Nu9Yl9j;`Gb[WAar,dSK+8W5VdG?\<"p/sFkkcsB2uB<,B0D:Na(^]1^q=.g$W"g7&.[c;cF=Y
%Yo.5l5R;@:[Y0Ur3+Rc=VpGPY>R"b<J2oMlr0):*e<.T%R`ec,qiPB=!I*berI@HhapN)j@RE#g!E5ho!2DISbSRn1"VmeA9]$<_
%)socmR%en3a&]i,M?1b>)5orA"IUg)9VVn=3"=$.5RVNE-t3o01adhDJ;Z`&1q$fG%j&X4jkG1BQq8b591B8QcnlcGoNF:hQGP0Y
%7+f%=O?"-fALT5M,mKg4nfTiM)$3-%=;!H<j.PodaY]GCK%$BC&i>tLa@%]kMc<uh*h]bmcl<n@_EmesBOit1JB"Q:/e487"2hZb
%o$1t.emnq'^(G5`%(i44;%XA\f$cTmUd!iBe`0s<`=C(DD,DKIDhOW3Q;"'1,WH6*WK?^S34T=t]uM8f.=.);j+fD^6-,./A/KlX
%S>>/i%W]6J&aB(D<ON^^d?HS9j2_D$V%GGpK*Oec5)Ku*9bMmBUQV]l+,HaIZWp-g`lfT)BVGbbK@3?0>RYNqTE8k'VMP=3$o$&f
%aO'BGNZeU:[VtghD2O46P*=3HUsfso2rlqCh?^A_\g'3M_\69JFEQT=O^at4Wm@61MB2(M0MI0>]b,4h=>Gj_P2J/FV*`JH;]3[+
%1'@5XH[IlY1$iQZKFBlFg?aB%AjllKR:FpdXd<KOOBa=ljHSL\Ek^oG)AQ?,D9ql4:)YR9S>,l8&[0hq0Y$8=jDQ"u?7_L6'1m-]
%PYrY@ZG(%![_[JMENWrq!DIYF66/'?HpW$BBp2M\QPMAn4=MKdW8Ot964VmL$kkSAR[-F^j^PH&9T>6*MBSmr5%"4blk#FIlA=L0
%ZW+o,Bf(qTVa2aXEh;YrF#(S7ZIsjDg3e:SKP@8:Ut3SZ_cXF"hC==(/mCPm&qXT3f*/t"eM]S=)[B,OHCRTC`fB.qS2=+P3(<Mn
%^nn<R+B2.j-K:!ea,;7m."MMr!>-&_J.0\t\FR[D>X5pI#r\8iC!c@EVC,b-c#>r"PuJHaenf1?W'rB[nPR]mpdVbZ=qTjc7,$H;
%(nnr>,PAl"W#0r9m9+JIpftkhZo<:Ue3o^8&ks@^B2Co$Rr8M<[1CJ4(4_8h^<^6*/`8o'5M#0,2?sa+1&A::77D2F7KA>0Qt$"3
%/IVq)^2VTW5ccJ7$3Q>$#VDU,,&'C-<$*IjL)T60Of!6iM1A<jH(pQqVU=H:S-DD]\9SS[HGRU1@F6FG,@YD\F,8fU.YHT/XIXpH
%?:@<O$cSmn^)hY>"JGmWh?Z,Hfs<7n%;pE7Kf=m/;PY.OMX'fs*Q8Ls$'c%C<MpJ/@`^Hq8:o<`PS1RC@&>u`9eP*r-;7fVq$M`V
%h&(mJm4mgPk-X?):/XqsZJM:6:*@Gr9g`];oZ!SWJ_&?"i"B#Ql&6l6#+Qt84BP;I_LP56bR1lRUIle0BYk$5KCUJ<*7&-^%D"WJ
%JA03T]bkR(a3gZ:a$B7E5j\5J.]S99h^eu#@EH#P>C-.b)[@sZJUs$gQW7i+[:#e$1"6ofkM_8\)]D>OXf6:3`c:$mP%cb("J\7#
%'lZJ&d/YOG/j/`WY@QUh5:_a:2*2!^A8$8e3h2q=]]<S,4k\jHk*VIMd2N+AmLQS[JYb(@=s26R.8gR77J43\7Bsc"2-V])M)U#]
%(/(OP6kZ!oV3K>\[S+g7->nA(=Q9c?DPP50A*m$aAcr3_Fqkb<9;%)M)gC7%1(6o<O8'Ya/Mp^::P7hOn5)-]8WijG'3(So?n6C;
%9Ou6;=n0L/j2I0q1m%p=5q*[dr3-9P&B1k`.":FmMI/Aqi[580pt=[Trk62so^cq<V<<po7A"\ie&`64Vfs5Gj#1#,N_Dh;',Za,
%J3Q6q@lm0HO(55'3\>j&+,_L(L]0oInIM3+bPt-$emS'aa;4XP@&\D=lr[51>R!8>A+8+pq"I)S@8)FCQkY!`foQC1>3N)q\;GU:
%0D:EqC'/SU9F_nNphCACW/%#n@OhYp.36d'30NPD50i44P0cQ+L9j65$E2G&M3Y`-fHHiCBG&d'#7eUm8kX+gnj7FDH8-%-'C9rb
%NCs1T0RPa$?r\)S]2d#jB*O]V(MX+q@.l@L7;H?l"redEGm+Mh`?R6;j3nXp#!6Np@g@Ddlkm>f?T_fHa%\^sJ;sr"=eJ?[.%7L]
%Oe\Z@'%godC*7;gPI7)pOEEH`\N)j6j^V<Zi5(eXbGlU2Eo5HHLhqT'+FjT_"W!7TDLfk^Jp+*h6FQ5O;"uY^Z-bqtj/6SOKr1VB
%@MLPQ!ISQh1<I_[eTP<Gdg+phB5qZii;t'`YDEfuCo\;OG!Vj;GF48g-+"*s26='h*I_*V/75b=d$.GiF(bm)dY,t=HG)tO!(Gop
%OOLMc+P+[_lU"/dCM^4i=iEUM2<IlFr3$MZQmIHP?rOCN0/>D^!&,\'"LT)A+qb_`;:HHl-#2=54PB+7MN9_7KG^k_>3nd=*05K+
%X&.;TS;L0\0T-_,*/7B,LHcu6l1/n)&M(o-***.GZm+9FJ\t!.=on=6)`9-\\TmliOE`l82-kjRQT9fD&%BNPgDGQp,Tfh.JS#hI
%\dL7qc'p,+?n(\O3!SGtd48%]0%`qo.4?KnD6rM]5n+b^'\FR@k`<[BH?2ag[\A^Tf0i95aJ^`Y$BMY+9^<-Z9=ksqLgfWU6Km*M
%_OqnrNY0(2M3`pR;48Y4BgQNmONQtMBh^c76\d3H&C<S$M.itm`<-j,^u]7G#Aj13*BGmA5o&rH!"aJbLG$Wch<bssE*Sn`E^OX1
%:ULeX(1W6Y7P&AZSmEn"dGi1MCSf&bN<9SC;)6j[(mK.sCg?jsJHcgHepA^K(7l[E4[ZCR$a"!\euQs1q%m%Z<M:0MRoRGjQuqC?
%<t21NW"'h/TN[p%0]0"`4J@-,`NR87Z&Q@uM5+bQ5RC\#\l,(#8?>Ro^4Z#5m;>jN$o0]e&#&[7_<T+$X7uq73'`/p$tBs3#f(rm
%)B`u2g!H_J*Wq0p4NB-IOTH3HAL')(H'@uI9Km/S-?Uh$TTa-IJSN2QC.P)$c:"C:0<hTULGN%!+8=>bRjY4+(a0WH)_i"LqM=Bh
%FA<'9mfkdI:%T6Sh+36NT&k"Cd:>?"5V.)g(n4KAQ^p;(i,M4SZ<_Xj#rXh&N49R2@T%::gsBN@\t6mJ5Mf&3`"#c_;F@(92CP-8
%7XZ5bJP\jV%2K_3H%^F:!J:rm]458S!@j'LA_n;!P>bmjG:^ZjFCQ%B:m8!:+FZ4#DI[Ah$c\FB^tKiap!=W@j%u8I3W*u_6qjT/
%q(sKR%2:\VOON^?FfZ##,ijB@Vm,ohZHH!S_+gp`X"qZ:125JgFZS-n@E8$9*YBYX9IY-=*fTF;I`OT%cBCpLTfp(T^a;Lu8UZQK
%'F'UAMM>d>nWn"<jq6C_kX&K^39&M(gLL.t$lHu8%*oLVY!I@P*p[6<HpBR!EfYpoI@EV^%2uLE4W60Dp_`3'RQj,HUZ7)"'Q,Qn
%?9J1Fo#6D$C:JB&"W\0C\gC;L]LbQSB<KtJ\1Li&77QqiQ?*$1QJi-b]]-pP<'.sejUDG>9J!n4)O(ekXWr-IZrKLJ=j$,g[iGT(
%eis?Yi'Fqs7\h(RM0(1ubu<R]Jk3]Ej%,h4OCOnkOQictQV7,'%?O&K,)M-40;SA$DRN%B>-P"4N.>N!A+79AOU.j4[]r$378d?f
%GcWpPGERb6!t(e_6&#.NFAnHsTTiS>=fM%(XQ2ol3/-E\!]p+db_-)B;_GF=+Z"ZQ1l;oIGTt+ICqU7I_M*`Yi+pH]@Q):."iD"F
%$*7!GW?i,j%,B!u=Qq[[YNW5IjKGtid)!d<4IZgJ8?#$\ljOOIMK-lH@04+G1^5KCDM&'D!bMV'oPj*3J^f;)"V:&\I-_r83qCM'
%.'OJN3D9GY"bA>8J1X81<GXKt9mV"XQc9gcdEVs/J-C$'.YNXOVDuCOk\p1"&-cKnE9Mr`.YHn\3H8sggXD0O"`57fL)N:b7hCH8
%"Yeg1fNM[;$qOu8`:b5&>^X!X\;I?DpjH!eRWoC<lS0T4N\I3YB![$hF/;4+>,2j?C%5;=MClej$]S&@M<Yf!,=6L9g(eL)Ob0pY
%:2%1%Ftq1ujpYS!J]\'ec7`Q2fJLeuGARcKa+qGR_:`ZJ?pEE,C(dq6dg0^&3PARW<T/1sVo7?4=FL.aY;JueGFW)s`fnS"S/0r)
%+[.DS;3;j42Z_).1DmNe(ib(5;>GmHct@"LYBk<K'QjIUKKXApEQ4P<BMgcBX7)e^nPGtVHFu9^:)$asLn?nPSlu]99,sH)*Tj+-
%ES]$M'X=SMd5V+.Q=2('+%k$Hs+P5HYbN&.BDe?J2P>QP\6AA`n(H?-Hn3aIPq-4JEQ.D5`8;$9An)N7,Au/D@bJsUj^MIDp!:bY
%ZR@1k@-G9B=8M2sW;Ur.e/5(rl`3*:kYfooms;@`*P)Gi+]JTn@OKq$K9^<D@*5f6!k]*RFTa`QMG5((Nk4Fo&@A0$_^jM-'h+Q5
%Z;]e<e'OPlBeZ@ScGL7$&.e<+/F`RN>1XTXnnDd6;,ij+(elONADc%C+m5QDO*f'%J@QT`6t9OO6,W#S87;hO>_B!lmru*8,!&o_
%,=NP7'Y_c[TsKtChH1Vj@HK!a(`;/gUDX&C5rXIJMmINi)`t%GV%(TXd6'NTe`EAU=[at2l:9Z*&99#]Od6@X.=d9*VcOrNWY_ic
%3Ir;c70"ng9ZbV+N=RiR'\hc^e[/q^5kRB(#g&>RQor;$N)e3e'lL<Z:8Bo6q8%b%'28HP@#P@&fJtNIT$PIZIKFVWQn2*j6#T<0
%/$mT6&-a;+KO-^Pn&l3^iq3a\=0-q^)+(N&+3u=aCHUH)P1UtnfG*jL-osd3K;:kB`&]Uf&:5)H22?kjmE.[a7prS8\WMUf!`ZH-
%^)a:7K\tGM2"l*Jd,g&7imF6?#tnR%i?a3)E^RJs&m_Vah@<$H"Cck@+CO<a49S.#TM:Pi:9m_"Sl_?60r*^\gN_&(A0\r_A6rHh
%M(Fa]aW_*N"*0[I=7^>MYq\)_N7Bd,qa]76BQ],[/+f\&FcC`bIE.AUM10V>Xd!1X,%L`8X1lJVR32_+q1-cS'""B&_cnhJ(nm/7
%21Pflmq1+fj-i6t7KRGRa/^!YAg[Z)a&Apu7_;FtN/ch(&UFHrTP1@b8iuLPk]/V!7e6_CN2+2IA%IFgPdW.jWY!c#nDFV>/O;u@
%LX@pjQ),-(]=1@ilM)7k.7PYgoAWL:nR99(k!T<(]4d%':l@'.@8"dKj"R"'E=b%&M5SD@g%)#"-Cr2[5pb+l/as']0h+%)dJ>aO
%MrZR^Wc8ko.mEb$KkjCba2``-TFXFVNIr&];Sb5TWc8jWU4\J_d-Cd2:u`\<.TF5APcA`uUFZ?k0($b/)b<Xl[Y[aq_[8580h+UP
%*q!\k`]+C)C)m5kZ7(Y5/-Lt:<T'!GI1gL6>QXQ<@:W+fc=&\4ECb>VWW@tdSP&*-SkWY.Tk?D%]C`tEC%$kjVSO$lpmC?Z3"p^g
%jN02P4MT=Bq*_,iA//FM@lXNB\j#%f[KKuAkZsrp"@4LnfaW_fVIW#$c/p%c:*]:Vl!$T1DaW;GVqBC34RQ!Eq$Ia`WsYd<.PV(<
%6$XhOgqO50TBlG&/ns>`]lbYT*c%lTMfGbXkGY^KBJh:9,4QcqF:D0))`f2u1+6HT6m?:KW&5&e(g+&h<@L?X)Mo9-4B.hXo5C&P
%(AL&l/Y)M$;9]#FpX[**M_&U",NZX7+4h57p5=s6J+j#tKqmu.>TWc(@[9_5`2+g/V&X(jef!"].)#e^'TZJZ<5[m5a\DnkJfel^
%ZSU@GVi_Cr"HHuaU=sj2U_uEaO+dZ:#mX$a:_kB$*k3OfoPK*te!sN,>UlQ%(!p_M*f124ED6Zq`>fBfluXs6)=FG6TtunYanN-]
%1Gs0oMLl@<6B!^rW#R7=,3csZ<:lHC4r#`HS'Msq37/Yg39(j^8CA[S&^tS34s<C41<"ki"_1NM2ImCR5RQIM-cP@>;,+J!8T9"j
%fSHBEgXl'qJMCXh-P'[#Yb3\>icGK3b8#%&G[)/)`MAD0O@7)-!G$5;)s6EG=?Md6j`n*TDaBnh^m.kJ)R'T:<eCGRX\q0YbXrkd
%'K`$%)XR)`,.Vq05AN-X]jX$kD6',1\C,3R=`D#LQp,:]R+C9J9YbLZ`>$XCYY@&W8HZ@\5*gH#F$"8T%/?%M-Jm)o',C7"qIIn2
%L/2thZfa$_@$0haB482mPXH(;K#j\9kc@<MKN?Abl>a@u)\Ek*b%"]$C5?2%FsSq&#!Cpg271hU^t-"I>"lu>).J+U;rEFq1P&si
%6sQAQ=2JPLh9T`C/_a)N]P)C*r"[E;ZL%XmBWHH\qCO4*-WmKKDt[9AJOMM%"`,d+244OL%s2C'0*>.aie44OHlU0LHTu%9-p2D"
%ULdkmh7$X\dst+*/0<(.r&(Ykeine.U/(u':?lZI3P,t=BHE,8<(;gq6DsZ0`aOTQTZOJKV?*ms^:L-[Uk/?\-&8ZMg5aB)YZXe2
%ECf5eV&nUq):pMCLIV=K'I5"o$h3p68M'-pLBk(!p!8C+[EiCu!/;`G0d_-gY[Mn<\iSP;/VuoeLu&?C6]1a'6]'O[M>\'>R.tbQ
%UX'iCL3?-^!_X,`3g!uip5)"mLpuAt]F@C<LCs\1[\kAj:;_PH16O-_0UaJ9ZM*m:3fe,c9J%k3?kc1?qVq'Wa$RNj\kda<K-Z6r
%hCm3FcZhYi]@KI`COaf-0.re%08OiX!t.[-D1:iUU@:=[\2R7tEK9XY0*UfUjGp@97)NUa]%5k?oYJp,X:Fi>dZA;`GRY.S+A:Io
%-)mu(-`P'EeR]f;i\8aYKr%Ar78Bb#YPNXE0gE%#Xr:Tb_fr<k,7L`9]9&-<1RAdgn[;/N32=Bl@.:2\X\Z1&%Ek[Cdh//R]bb1f
%=@aW*UcKidJWN\b)M!+'Q(VQI>KBPnTGq5q!\.887Ee>lKo63hF2_:0]8+AO[4:J+n4IEW5F"(Sa-c+93YMV[ke&;U'5"Mb5?W.q
%^i8"h*GI'=7CFrm(nRJ\!N-^fj2G+N!m_r);[#n:=O_%u!.YuHLWiqD,(n.K:#M_l-78qD#8l=K(=6>12ET!haHgSoES;097\kC*
%fK3A4+Q!pNJu!rC8[tc%jq<F#HXrV^B]s\L9&[Sm3N^R1NQ,b=3KDQ>PIeBe/Dh1/JqTig4IXg=h2nSil4kq7iA-N-l6HgB8TL3q
%=V_:V\TBBsCoNqddp"Z,'o00eZ,=J31#3"JO:K3_#&Q*XZm(Y39A)lL#5]8Tc\UQDd+V:teGc_-?(BdTJ`7knLPm6I7(;_1+e\%"
%IRF9Q]r2%l7jagEbX*[k73&'^9l*p6*!An^co=DOS:\c!5chj[mA(YrQiYsI<Re`%7`3N.5lrd0M4=FB&70l;0UBi7!"rC_(s$Vt
%U/X#]=="mG6jI_6ZHX5>$!jnBn'L,Lk`c<T,A5nX30GFSf-?9tJXt"B)1b*aY_ERVQNVkkTOG"0ogH=e!<X."24bY<X#kD:)/X]Z
%Z,@]0:KRW"#GYZik'UO4fN1;a#T.@tZ=$^)PAp7T/Z"\?Hc2S"T6;*IVB"%$N_XY(g.e9e!f^k==;[onSdg<g8EfU[44G/.e3tD+
%=r@)_4LXnu_piZr3/^1k"PR8eE775#Bk[4fjcmj+0l`B]9]@\N$YtKF'en)uA1&W_FMA_IEN$X8;!\i>=VsVC:d0""-oE<0TbiFC
%mn=qOFqdO-,'XNH=6=jOpa'9NB*JJZe=O$nOX+U6D":CE%Nu:^4Zj4CE3M#%h6Ya?5:AC,V%L'Yd4D_U(o.Sm"pbJ&-ZnCEIWd8$
%FI6/?Mjq\JW32>3[^(pEroC"FK*kD)`*uR<3Y3jVmg6,oO=5j;o*%f9e."N$Y8ps&@=S3Gp/)49GnL@!0N2Jt]n0E?%UUEC"i9dn
%"&CGI,VX5\KS:Z`(ruliFi$69LWEPO>!<C%I-Vn]^lC-T(hSe@QXOTB)F:KYFqP.5fK3s,JY(pO&n8^c'0IhS#9oIr`@n$MV9pcG
%'t:B$b!Y2%GS#Jo;'\1DVSPUII5KZfCK<!=R7o91:cY$$.S*bh9Qg]!Uu;diLBj@fI&eL[\AThkW2DGJ=$tF"%'PaD#t;b*&;F:J
%&qs)Ca1KMG:n%MK2T8`#m%AU0034R8eS'nb/3;4@dr7C^Dn:h6,4PNR1m'S_OKk\3>^"bWA<"X-i.NQN(Bb0+'BKobPYMK/BF7Y_
%H3!!1#I1A)6>*m'rEC99^EnWZ&Y#c(7C)S`\tp>D<.a71)t7MS%II@u"M>7q?/_Jjkgb="Y1Qj$AeliB4>0IFY:p*@DjFgg0Hbuf
%'S;;iBR*1<.$.saMVKkOG.NG)c"?]Tek&@Ys0/<X^/)>k(/NWj6.o-=XW3MdZ#`GM)kUE[U%71Gr5rU9S4_kI#R&+9'"#:s9b^.(
%&Ol,SCZ</C"#2jOesPsj'n`qPWQ+#GrLB1J3Aq6TPBEc/8m"OBX['/Mm6p'4)A=0?a7`Ym7(>Kk=rJ>Od.3>V;'<tM'Y.R'XYHg4
%<+Brf?`$<08I0_UZK`,i.u'ki7Nf82<haV49aMm*7W4Ot<?EI8\4D4;Q)'9-82d3\rDNUK9aR(_h#FE6-$^]*T\4R<"R:`9jqL)f
%X(]-T-oS`'W4]L7KWuK'gJKdR['_Hu77r.9XJC]M,h[ttpWKBj-2!aB8l/Us_NQeqK.LkV>Z(]!AkD$b5dB;87-16`'7+0E0[q!S
%0&"t3\>0D!b`X:[,h[ttpWGF6O_VNFrb&\)RC&Z[+3MO=i:&u@Q]*.Y.T/7>:"Lh6'&Hg;cc\XtaYT(=HZ[%(L;dAu!kf/1!?u!g
%'3VstiW!QZc#t@*ZK/eSR"'q4`W2-tqiZ>AqE/j%L'Cd+_<7J&U+8P(bXO0YnF,OtaO0+<RE+;!O_bN*?7K6tY$Tqe/nYbFa'>R:
%)ee?lg]5gKH=KFel>Zo2eJcNX?Msn2'FrW](_[<H@%Q2k^al%N<P(OsWV92Gi%l'=ooLT6S5Hd:hefPnO50Hh2LV8igLU7[0-EZo
%J_$&K"4AaH[qsuKo`d>E*]F4GM3%maJ>9ns`!eYKblFk]]Z>p<oMGrLgC&2G.`.dFkif4n)3(ZJH3Zu6;>4(UJNW>KCk.sff!YU^
%p5ec'A<#=MlnQj<G1Z=-pYYn8f?U:;kkrBNpP'fQ#T"Nu7OX,_HAT&S3HL`doV/Edd<83Jq6Nbk#Ibt^X#oAgpA8BW[R<.S>;<b?
%6CgeblQor"TnRdBAjT:?bpRg7.Wq_qm>o/-ko!D^?Euq!)jWJ1=nBfS[3i&Cb`6qpO8Jp][@fl11ao191_AY%0pIO0ieRRL4!I1<
%B[q7!HX1h02e?+Ek=\'d8JTa'F:EOWcNHTg9'.M5pj+uu@1O@HfV(1`$f-Sc8$.L:*O?^YYr1b0@5!)X*Vq?O&]h.e)6*Toqa>&@
%:S5^VHS5>f9i^s?.:[RjWY=3da'0n8=&,+_[f8n!Cb[t)G%(<BGuejVQSSsfO2CG\&g!gKK^TN-^V-U9A<QeY((BijJf9lEHEQQa
%kUPP<[f@TR(@/3Te^0d$Zq9AfQgbht-%+kk+HiD\Rg'^SY(*5;;Ri^j/*JPB4'00aB;F%Hq@E5RJ.B`!P&@;r$G&k)hCV".g[,D)
%n>?1m/8DY"r<bRnpq<t;+ruS&O!:?#Cj$cOS3fIc]_*?)?DP_tqGHm5&;gpQ:<b=FQi2^/drQ=m`@Yc9Qd7;6/<X4W82,^5iV)+/
%d;Lup3.JFqDA7<PhVTWk"hZiZ4.GBQQIj(^'.@_3^rm%+]!afk+L<mjl/]2+Ep@:^-uK6bR7$WgV$S6pE5+WNW]8n@e_9;/IFsk/
%f;5o$;&atRe/%,+k44".C.f:-k.eUZQ7o2hs.A$9Ip-U1lToH5))#n^-&.:Nj'lX'k,H*4l>,$K5V=hJ"d5mVdb*AbR0b#XR'B]M
%$fTnULT"aGjku:5LMKO<#mF4mZGZs!9LoQmMR%^XE$@if,<PKj!KG>_r@j4DO0r2L<NUVC?=ugfPCc/_dgPDDX$#J[TaJ.-)B)!l
%&4J(DA-JlL+i;kB6H:ZUJj6Y>RFDQHeN+iCnp,pU$?=j9O'AE<13]E"jls\IN-'Ia6cDjVK4tXDHDQ]$".+<V7O*nq`msOX7u^F`
%-u>H)a;0.E\XOc!lmtujUDSi6'(K3[(3Ha=,4Lj4Mn0/L.GP*>(fFi7o!!d#[P>F+jt]In%/MXl-Csj].SscNPbr$94<[*i!A[,Q
%5Y8o&#fA#[+AJfTW0J6j?aET\pP>4Fnn;Ou:C-nKK#jQ-!a(;O!/si\!-X/#ae!Y]OK%4r`j_7Mr2L2,'MiJ!80#J>9I=FrFce)N
%%'(UEjY7*+fJFicNp='(QCPrWLQ`gAOr#t$3<>%XrW"FqjC9mEgR.0EWC@QW&qFCC!UD+k'9P&[XMIQTp;FdRHh@*W%RB)HVGRrc
%5WtlQ8qH.+]G]s^!eZN<<Z@"a6CRM]2`jku2r`_UGPBs))57h"oj;8Y*)$T$oU-)NS]GRqZYgXDGAm@&gW5j2H5X*4rTNWYaW/`5
%AmQB(+W5;("[V.7-<*^+ZcE7p1u#?#0aFg"BeLT1R10\0(GL2rM-7o6%_KL>8!&1-k-Y<8V<JZ"<&!f&GqUS(9Y#.mR3K_pS)?hg
%:D8qG;WE']1a:u*">=;k\q%eSg$9Zk#7=MlhG?Q\lVV".d(Gr-V?peW#.oXF`"trNG%2X0``3tH!\T$rRgdg#?8mG2pga;\\P(HI
%kR,p1FF,:NQ<3FeCc_&WMTQr+1gJtfoVV#nGr+kahhRCrD[I"e=AJ\#8rANM'X6tV5//@qSEhL_?`_A','CCoCA0Jj.j*5DgL4i:
%=sX_t0'[0Wa^Bh:#T_>D#SWmIAX:]M+@KE89"!?Yc#gH</h!=d<cfl9`&Lg`MYr3.BOE)7BRbCH6g%Z)o8Au'kMuY2&%JX:[+ar'
%/q!B>SP0f;B-G5\Afia\6\>[+FqjPN8TK#k6f<@.ObGXYZKN0JeZt`iN1"Q9`kAScZFAi8Kjn\N73Ae!)%r=ub5TZe?$2aCb0;$2
%-Hs?pg\Oc/`U.+0519m*K\SqQ$m74$cZc%K1O:%QP.O'n31E!p(o-8k7sf`P327K#MBcF'S8(1E6GounQ^DJA'I'7/CY)a=b]!(o
%E3nW3=BCpt>]J/(AWk$nUI;EB>8;pH'P*&;&%6XGJ@7p3AsiG#F<$\:!]?_r*QM>,@2gXA86fILI+1Y,,)'8K$5&8joF('f@7+:k
%aW;,6H&<d>QQ:`k'%ZpP!ajkm48s$GA3rudn6!^.L8'_k%Lj=!6UPf;^0nTaK19Esd$uN7Vp$[,)!Ll9\2@lLTJ&BmM0GnXe&f8L
%pKHG@eMcW*n*Gn*G9H9'A(Nt;lQh=UnWF@8)RIdN#a[?)&=R+">VACG1rWPiTf;3"4A?6t4IeO+@E&643S5okp,!"%H6.@\BmU<.
%FqO,"6c-TDU`Z?.+M_.U&:1Gt^4#/e^J@W(j$;.Q(XX0G6bSM<L0dX=Z/8#h]O7dna66R@mujj@HP2kt7t?!@B[X.;S(\!M+ul(-
%j'[a0*P"?\l#%'"31\GSCaba+kaA402U(pFKY\,t=J9mDO1)3ug[0b*CTKqbJpbEtd\Lk^,p*9(MIn#Gq[[[OPuclmNhK4WY9fmA
%X/Fjk)5,I,BZ(*lX^*>[2TP4N*SsSoRJ5(QVV:mH1*"li<e`O#V#X)&mb=uK's6+Bot82CH=FBea3DcDQL5"Fq9ti18$]XQ&Ttm9
%:_\FtQ@ocOQAl1P8PXP8liB_KM?4OEoQKTi@n2=bjJKs(=:)V7W^2KhE7P.PK'ZXCRC`Z.%M[7rOT(tb*Z,`SF/TS<m)Zt\]gu\Q
%^?X`Ah!qTs*&ea/4t\kld,DCjHq\(8#6e.,9VV"+,h0&&*`ic4ef6*gP.3&!',6O+Q3$MD#=npQBYZ;n@&PQB)E;oi[6f`2=/NO3
%,?G3d?lK5X3daNj=U]-_)lmVcFtf[,fj-;P*-5mRLp7chk0YGT'S;PO_s:%j#*$h-9geaa[l(+2.Q:@2n(B>.c.eWrJl3klk)A?b
%%@iQWPQAHblpp]u%f4FAeqF4[CE8a%$TrrEA@:_4WE7H3@gu,EA7/f8k;Cj&S:3cHia^YkL5fGdJu_cYPe8oD'X$Ra((h%kKJGSF
%H&b(`<\Xd-=W0/i&XptPb)iZP$DEgbBBYi4*H;#_O2/H5\!'=M@t^Nna\X!QB="!pRSIiLBWf7sFaOOdUooSi(J(<'LU3d>PS]ln
%XjBP_Nf290U_bkdemiP%PSId6#AC#?p9F<O.W'E,5MN[$AQ7Tsg5CeiGRNruG?oNTCnHZ4CH8n120Q<iX-Un`HqnU#)%N6QVUH]h
%'c0m64U(OI89Rk\_5q=@i!9"P+eY\?lcB[l:7:)_B'h*\+b\?]Ob,X\41%G`:&nsHkJ/p:$F>4U/IFWd/LO3onklaB6HGp;>9kIo
%0oSCkFuPb4=Wcs_h9?NjC2n'T_Mb?\k\W`aTjhi9''+""`4b5'D(C_Rn6VnqDCtR%=KE."4P2M8>i]`_SnG;oSAo9][B:U'TrFWA
%4'%Y,lmdDOPF^U2^:UC=<]eigHJr,L@lq"#,`s)I<"[Z?(OLBT[ZB19X!UB!nD*pb#c=mh'aH36?Z0_i/O)s!=Y;OVSi[N#Dh_97
%QHK7/;?dug%Oe.CC)XGj7V3o0"1i4rCd+A<#C6c%/e)O5l3)I9S_U7V(@"1HZZ.r6g_dkCMdmQ-+Oscq&7u]BdlTS+Y\\MnM<m>Y
%1tu>W`>/aE)afXd[#gDQ$=eCkEuL"Jf`n:M>.D7bZd?;Jph[<R!^I&^;a(RJJuse_JlV-hXK'sa#)(Hq:#PEdejKN,8VbP8hF&9L
%nBXm^lWpcNm"$'kNBB*`Z"G'fd9r#<_*oHeYo6)[M8sD=e%+a\?glh$0cYo)-Dl/g(]ls:VW)[e?n12cm]rr067b<_9.?47VakOZ
%a)0_+Ea?D.@#N&;Jgh&&(FJr!aU$+X[a<2(FgQ<B8Um#p(u7fOJXdiZO9mY0Ah:9c\T#Ir]pqpkMWm"Ck9"-edpM/VqcN=^13nP^
%IMh;'HY4kf619'I$:":15i:-SgXDe`:AG79-=e+=;&K5<Pt(OOBiN#2Ul*H-q^L/#E'1fr/Dt#(5(E<u8q==9Y=t;]W)Q*:T0uYD
%*Wh=qqqb1[R"-NTq7NrPHV+;CUVn"j<Jl@g6/6tQL1PRo[NKqa<J#W$`VBt=+'WaKi1BYo)KM*Rhl,E0h.jkZmB3jh&ZbVudjASc
%WRDVDRu)QhSb`D2[hN^A/Xo;Np-[3EckO,b>L;5@$_>OI`Qc\1n(i>-eo1P*2.Dkpf@i0+)OtGs?Eq2m2KUbhd2W$HK/+Ep3SjC4
%2t;R'f8`#OdG(sQD*`NP/TeFB'fUGKHgfO$>6X1#=#3<cp[*CBg[;EI^-S]X7q<rl4fL(dq#Di8\i(]cI-47a9N)O0aDn4E[\#ZQ
%dLDu`13gU:+:k`r#3,7E[Xm?s;Ea*Tr=#.*o!KO:P_9IY3!bWhkN?rmM*^^fi"Y]U1jE,3Pm!+k_cDNOjjTDfBWHb/=##j'U,7@S
%gT-PV,H.F9NpM`H+S'6^BY'(Y?"Ao[N<?_kU5`?qo4Qud^q#l-[E%5F5S&[UM2^ter@>`PL@$fMqG'gYSKM4he59@>l$E8D%-$Y>
%Ij_]YWZoo%VEf,?I.FQi%IeB>@@^L?o)c`o!]L]<OfWn?E!?41hOd1qJqu\2'U_01q%L/+6&8Hi*4M20`2-;1jPBo,&fY8+aSJo<
%8a4Q\diHRJe7M0`M,WsQk%)>+!(jf1M("N0!g<qR%2hQ+eI,g8";,:WjLHY-%c5E1AF$(L5uYcQWh2rLk92*[1RAtClXt[B`FmG[
%$&j=^d_$<L<m4-G,PMIJ"8?@pH=&$BlKOpobm<%8:3o$1RP':$^]nh\Mie;dgKNJH-uh(<OpT"*KjAO1<>YbrhlSgIj=1[A6]BCg
%=b0T[QgR`#7.rPlE)^Wh2(O1.`m#d9rXlS'lkSje\/FlBE`//P2EF;Y0'(L_'5Xs)YG.%K?6+9t=*4qV%e(2DcCYh>!2d1>[?/'(
%"un+kMjfpGCZElf%Y)@"-m3>5V&5C`$Kc2j>2]6,i'F.6mh(kE1A_J\a]C8dN+?14Z,;GpIiuUoYT/`7m7@fmH:&7O<6Zm&%m?mE
%5q\81-D?k/-[`g:>)62=ktu4\_iOQcY8*qW]j"'+f?\6R!r)+d+Lpi[jl`&Ar^=7WlHSZ@Eg<\n`,Y*UQt3pek:hEWeE:jg\=CAE
%VJl'2(Gj#NT0]k07&Gc^(\JqfH75Ad^Ec?$p#_GaEn+5/^o"PhG'n1&PVgE`"i10HfS4$jgN6U^q$?kf@C3GoJ!6?R]&;5[N1qLH
%$P*+1X]Om@a$2&BU/:3R3&ta4d?OmJ^]p:h43YTkNl6=L`?QG>=0?3XYrG6T+Y^@B2HGiZAMeT+k28N:h\=&W(uIiIrUC2Um>!-M
%N7gs6:+Y*G_4aR\,HS-^&!AOnCJZI6Ic&02a6qel^,jQOT?U?S--K5T&uRi[i5#8IIKT[@1,2&<9RcuO>,P@+,9XeGHW0nOiX3WX
%j9r$mN0ArF%^$fef8`OrK?OjW^)Tt6[-[1r#.oEl?)#4KVbiu53Xt,'&Wo"')7p_+\+#\pX`>\_=&^sWX3dI]Y.S]42snWbqc.Zk
%0.uPEYCH&4_sTs9<3N5#F;ZFUdDO8a0bM-@>Q?Lf?*\^02Bl99DP%WnGuruq5P_KFCV``sa`<uh6!Y5T?o=GsN8$sUCKV6]0PlrQ
%k<5P=K2aatIG#;uFf(gd0Q!3M+Z!5]-&eI7F7;OPF<,hiL+E`d6K_[o<sc+X$@sbj?k:+\&(OfDXO0m_LrCQCrMhIr%B1$YZ)XJB
%'NAc:QSDgQG<P-;#Sj:];5hNu?AFNP=o;j+<(<_/>^E1[E5cPscN5mi&6Me(E9%MA-s/lb[Ra\<W#@dkSSFSb^+]Q*1U$sH'6PAP
%[>9MP#i6?,XmrUL#i-!OI\:3tWq:R.+bij+9M"U[,^W6V6?H&?r'X(5<bP`3XFn@38?#kN2)+B=\/YT>Al\b^$SE"W.-!=M8QT`:
%r))P?T6+`+aGJIed9OpWEnmg"?/)OHIR0\S13=`*J3]0Iab$C!lXugnosM7Js,\-F"sjU;I&LS73,R`pbLpA$V9+XNp)^RP#g!l)
%ok"m?*Ic5#BjS(3GYn-,`1Q4'i@Hqm(<IqF@UB7-T%B(1;c&[?bd<AUm4a"ebl"`Ub1E0c(f'Op%TWlp?`n(5DWlp_2N0h=46+S@
%++i7r?QN,Mmha4fTM)[uZj(Md&+">R1'j$X!OEhr#gT>4gCX*_/Yb,!fNNCRH'+dE2JS!dGhKoBkLRiUpd9"Ir6+sj)RD<9DD*Ih
%B^<3D9-M-p%T5ZAQj(Li&&IZ'cfi6tB;Y]$jXg[",eC6hBPeB/h,.EK))[!j-DR5R+[Cj*#[Z1T$b@hW,6l.8c6%A.4RIhs^u!2r
%$j3aWFD&%6&C_%=W9oQH_NV$8l\DeIZafmuI_u*`Ps(%%$$VQiH;Ub?.l<V@dQF_k$[BXGIT'd!$+G*,9Ef(RCAi[aohG6ol\?3f
%A947uS<FLgU.??>f/j@@3A)2OS(MFD8;tNR*6WBSDdA<%US$`jTiN[:>[q3(NIGPL7iAT!l01]XRB\SmIIfJ-f!gS>"L!])\e%Qd
%/RA]^]\.CU6SiJ'3#K.7bOTK>h%hu-Y(Gr^f'WQE/KQ:].li%a<dA\sTf=;Z#2HSR2]C/((kc3-26g"G\r7MPjV<aHSd%2q.>9PJ
%@c8ST8=nXLKL&\a-Eoc%5P0aWa]9<"%M(V_]+'<5fbfOA6<*-+_?!SH=BjG+HsA]"=>Um><kgG^5)jYD#$`<'AMng"*.j,J:-JR&
%#WE#h7'FRlJ/XrRA!f')a;-_q<'d2g_'dE*%V?6I*`o7X*H,sRO!'E7(?p>l37.fA81;g14Q*$s3lg*iM#emh#XJN]=C[(>oQEm:
%G(:Sq=<B4L$(GmunnhGOHP[N0JQS4G3.H`<aWaI:TI?oI"7l<8hs]VJ&[FAK$DhOX7n)fs/_lBq3ssG/Z4,K1iT^X9O9L9F2Y?d)
%#"PRuhNtdl7[,l1Q3,T)`6"E;g);;b[pgo-Q>Q=f*Pur_1@h"kQ<(?(,/5BYikA&Nhp--p4"1]7L@E2S`33YT1ok&Z0aFi,8NT;7
%LVp^!'ch8]bC%J6-f_qmCaTQ\WHfX9G%"K%oaa\;?.)<?bj^i>dC>?0=;sS-PN#4&bP]T-pjMN6P;+V%bQiS?8<TPJAh^S_?jGTB
%1!P_7L9*X*(eSfpYBUB]-&T96_^/#-%2C6&l3Fq_p_2S'bXt45#;7Xq=H'dd'FbBt]1]CdSCZ>_Io*p"N+o\c_%*X[b6ZMCUCn3@
%:je0_0%TdqVoOr5]:#:<h!$RGFm!YPl)j>6S%X)Gn/=dp]Vn>F,Nbk^*<C6`M<Pa;$QLhD8X^T]f!J7G-A>J&+eF:1*9H7%JNW@)
%\X:;A92]A:VKfRYYoU5"NIr/t+bXUf:VNlCg*q<f!sN`%8bS7JgDGL#r;#^HXAkb7P'CId-:Q6k?e1.!-!$QRR=JI8LG_OG8O')!
%<7k&6&4/e:aK'i`nKr\AVb`@7qQ!!/C,=0dcH\H6,HXsCKaY!4X@oqE6e\D<Mu<bkRhF(>UnAs:`VEJPc&5`afT5X/1QjIYU8SV_
%&O#SGGTk-.<(>N&?`mGA#\b1u$UsI2Zr%O/H#dW'j1L.!]H(c//1H^N-rX'*n+(pe]5lm%R9p]+0<?Wn;0H9](r>/5,-Sl=0rSN3
%2?F=PNkrjM7;i<*j[.@Tds1TF>utt%&1qu4B*PVfQ]I9kpL9[`V?1]jL`Y(3b_q$D;R]!&<T=5"S!6m59#F&(LFQ3AR5)*nXK[L'
%?u2-_(epdf#b)@d1KsRJohs&T9YTCfeD[3A+W*<_4I2>NXUjeZp-]VF,j5D%>U]3'[(l]a*);29j._g"c9aH:#%/[Y;rIdJS#'5=
%iU+\A(Ys,E53Z.-%_1uRVam<UNT+3X>*AsFj&rkjAe^G!9l5VOEmH"T'1AB.)-8eI]0M$,+<I^cjb$h['Y0cLn8Cu`L2Wi1SJ`%A
%gP;%;`n&3-ZrWG9bIE*1JL:hIp>^Sa1;>6qo4pEA^g8OLN&NW?KG-O^77"(A2m&f>[3bHPDq-l`#n,DS.QooFns^7Va'\_OX["Q[
%"%d%pc=7oO&-P@.ZqH6I7p(l3SMECM"N<Gmdlp1*jNtRno5i_(?elPT]##L-9kV?S`[AY(6s^jqqZuTN7"sSJSQ@c&qn(8g@E>P^
%Ao^VAY5eVZ!.`/'bk.U%a-slVf^r^80hK,\X_)gm`s)R_fU%,r=S++a4J=2t^'&u='m-I]UEFtfA5EM5]9Q]C`H0EZH*uo!I6U,$
%NE^%G$KtFRGd(D))&n2XoOQNimSR&.E@H#+=I'm;en9-pbp[CTNrH/\HHB,PR&3>sJhR2K]HD_>LP&.`-Pk*3`s?fY'EY(r'bD\u
%U%;3XMHVr+&t54's)nq,>12LqE&qjoSRFL,8<j]2EtQ:/Jnt0!\j0,&0CD!1ObODkM#-%;P5bcV)p%8\lo`7cS'B;J`D;s"O3/I>
%c+Ej+BfoKSSidI&TQlp.9h)E6-0mgLJWVj4M$\Rn7;-g0auuZ9j)7EMP6!]$H;fD*,i`O<jmB]oY7V/t!3r7:K'!6XNd2#%_bOK3
%<%iK+lT,e\VOeE/JeXMQhoe+KDHRA;ERrR*Z@!WlW6Pqnhl(6r'.a%l[?AK0#K^f>,80V3?9/Ri"[;cNr_@:/Gd(!Um<7aWK2o1[
%ptTk=:Ws#<)J)N]@WrA:6euhd6ScdooF8hP`YjL=Y26bWeGY$\5LKe'Q2'tqcm::^#,8MrQ6&kR_1E+a<u)q/"S'"fNR$Up`3F'n
%hS[+!]\R-ge"Un$Ueu-gUAA(*:Do7/"5[fB[Q^QLhA3&'NMY/kL'=t9enH`QogV7@.XojZM:'*OdoBMi2%bZ:;E7THG^$V3gN0*P
%U;R@%1\CZ3XIjCBo<&#&Dlju>b$Zk`cH?VHIM$:@p9Z=Z'TDE.3P-*TN!6N^QH*-po(+QZofOM#PJ$3(@P5'Ul+J?E3]lccAnu(4
%ee'IC,,u_5m#,g>Mq2`/c(KTq]`H^nHM1,lWQ^KCH^-+;I,li`L4P+6l"W!s4Nls"EKAHW&Ncb87,7d\&N-8L1_[&:P;4s/)(W/T
%@#QC-hg4aASke<#:a?*n,9XG-Tb/KLQ5a?ffq>H*)`k"4't8qlDB<Vp!QT`*LEL=djrt57Gl@nn&Sc#;Yk/'.`C#ACA"%'3!I%Uq
%".UGhDU?mMVUPU\8m\ifp*\'H,7d1=QXamm@)daM<'1r9]`A=CeT$`P?9\j9=?&RnR*u@&FkfC$ce+<PDoKP=%[Dui]_p"RhhG/S
%\tB0pr(IZl@,u*+0A)rHKUV,'nlFIXfKPF!%q*Bf>M&WnetCO$re,+!$-7$*+3::^YA0"mZc&)F*,3.F`I&*he"[fPHeuTS7qtEt
%0Mb-$AI%6DM(L'#3M?K:6k.]si$#Tns1N>[(bGn^dqMi.?$pHE59*<ig!In[L%D]J.b[b:@s""*\X`D$]B_<+7Rj"[/UodS&P)/?
%&&$p]!!Eu((aXQKAd94cf8)P:^?^PJTZO+[-8]%EcOLZ5-WjVTEPX31gNs0I<L$S!ot/b]=k[.s5N.Y&`dJ7g1%NY/qRGRG\G%]l
%W"GQ0[<4at5$gHYI6:/,OM1AC`t<m5p!h$$/U6$'`n22OlJqQLeVIA^?#+qN5/mcOCUl&[W)HO.%7@7Ka/RLC7-K.*'CQDW-0DG2
%$Up([_3VE"$f]1^heLM<l3(8cRd5_R6>e;k6/-`FFB!30c<>5>fT/MmI]I#?DtPu@iG%.<$Jo4]H-_Uno*@BIC-h_f/Tc+%<n\C@
%mB,,6\`n<D5D0,7DOjqcK(epkFB3>q2d14Uf^D%&O2Bhh/ug>:TLK\CgaI,p_2uKqNVps+icpF":kPTXJB,K(G-CXNH\ur9gcVDa
%&<=1A>4E%qMFCY/dlRaocrl?ZTJUtFE0;'r7A(L4kHi6,@$V+$8<5(dN:\ZeV@A2I_*Nm"(3Q.[OkmO\d?(9>M[!j#U^5]M/9jFd
%Uq)mH^B!R-Q=\_4[*+I5q*%m5h1B:K;)74s1nFo7`;pRc+N9u!,2AGAcWU66[\905bpA5t3.VZ8/jR>VK?T!XV(!$g+BO[s`*r)=
%T9Wh.QpkithtWuP"n"O\^bP]tTBl&+D=;-3GD\sqm;9mMkp;^M0iZ`g!,^_>HF!gc4pAlhJ@]kjMHCWYj"m\B)d;?93)<h-\#M.o
%IR`"H#6oDbW#]V:MbtT'oIPJ^=H0@&1pFfq<8MI\2+:5UD_u!sq?,KM5,O5Kk:--2q_p8ha&nnpjrDfPrZ(XD.J(78-5A8>-@8UW
%)*\JQT+ejCN23Nl+:q!3GM(O'#siln%&bO-Eg"Y0nA0j'g\V+9mI_*&'<osb24lCbpbGM!JG&mJc>(XVAlESniNmk-X4=G5L6">O
%?u\QkK3X<@10#BG$03^AO80K'e1K6!p7^5m1b_>,7!OH"m[OQq;mc8b&&K71i*BlpJ\<WZ/&YlF/((L:#ef`Od.&DsK0tq1j!iB@
%[G"+09fW7c,Zd23AtuJ]qA>8s8&pN=+(#P!,4@SUis.!VmMpTNb+nBae+4%+'23H5G<!m18Au)H<jg9iGS(d3I\%ZO8=-O.71H^L
%9m1K!rW"ZblHf]7\UmoILiWnuLak-@VnKYD]P(W/rdI&cP:]V;r.V?f:O5^]W9iUKN],/1B=mX/CbpIuJ48iHPj2M]Y9[9ag]/uh
%LqkoAJln'u"LlFd^KrP2#oJDSXO8SY@XsJ&huVit&2t.3A=;q.M,$T2N:)n,O*jI.9mq00K<?9ReWBk150QRZhE0rr.9\QoJHheQ
%YC.@-9d&F[I`qX,cCTI`La6PthoYFdcd`$:R+thKdI?t676%+JCZ>tqO%^I.AbD/PZ`0h-G@VT%ca0rra(1fgNI8ETlF`Vk0o>"R
%%7ZLdp#eniqt-51(VRORI0V\FG\e;X`(9)CU8J*gqSg7c1FK&&!7$ZAlnRBC<re"GYe6fqZbB2Q$#tl$5%oGT&8!i4n8:Dpl,m]2
%4FlAm\Htc]VejC8G\X3KFFXsa!,9*$*=0bGA$CKCM9r"_4cAp88.<$9W^[OThY/:52/u7)s)74I1,Ar`'lY-^^oY"1K`Ea_'11=,
%<R4C$h!1f#8C"g'LTgpE9K0U&)oLn)Ma0iVXV%OEHC0>.1U?llVt]!;9K`m:0;ke"nCs[i2gKADP&/<1h._;-B=RkfR:!\>IcXg(
%-m/g$gG+hZ0djiA_Sp):7/T;HIO#4*>kC;><3gtNob6-tr?PX4b$-BTX95-2/1g!B"sJiFYusiUX.Id,75"8/?a3[pJaV"d6,C,X
%WGp;Kd=\sT^L/V!E"]uE%RaaV0N0(q-rO$F.DVUeV#)!"PNYC8R(DFZ1:&Gj"uIPbKT/YE<f&$S7'O4kr`Gs7'dIlm-gXE.7u:1f
%E7=t\d0>5?^ZmhuBJd&o6u#ZNHlemN...a-2@G<\\_%n]1a7Bf*\tH&KRbk(QPo&(`p`WkhgLMo$%qE%-XJ2#(dMX@%1l&QkqGFC
%&6VBVfjkV*0A?."n#a)SfHlYm_EfG.(t%;UNL3rUP!QPaKOf9SUtYcqa*Q`H2G1h)j`$ue0<A^4=&2f=m2oVN4jfHr#j-p[?.(WG
%kJ@,XR_,.^LnN0&#)qb,_5JsCC<?GRrnmD=;VT%%:QWCKBl8G;JN7+)$kN[nB4-k_ET;^KErN'D-Puo[#\HrTWea".NJ9Qdl=Q]k
%AC>:_cZ1<V1<SL:=cFG$D-'T07<cH8\q/hHDPh>['8_rdl,L_;XhGUF`o0#+#SVG!m<Y,+*["*9lB[jVQ8`AaLpe8W+e,(Z,Zsfp
%&<'O$;!;s&n=;!Ei:[-gJTcQOc\B:]e^S"2"CnS$L*Rn9=p__^a*u[Z1`7#Q6:`Z+4db7b"VGU8,Gd4IYTZs%1r"GMlTMaHFo(dD
%V"&h?_4F$*NemA#+]!FT$sIX<XE$I>r:^!q]$ljDP:$ePK5<h&hQhS$aDX"+3iCo_#^;,W@mFSm,=W0O/hruNN^oY4lOXPY9anM2
%gs%lT]aeR?_U;'H!%PsPU=e,Y:2'0H'^s!ELV=X`&:dE*=bVuPR)P_#Ujj"sWs_Vj5dX1k1F,X$.M3Gr$>[um_/>]M\R*StjkN"u
%2Dm9N#n(*=&en/3/Q1%2e!Ai%WlT=gb2[D=(,U\=bE1=mkFXKGo3;n[MsHA(#L5C&$%b&_80EP`dY`R,?P\IgKn(;AM@aJP4h4U^
%eYNe97-k/?s+t:;iV]iIM.D."P/hMHJK9f<H#KsK'X^`((l4ZD\,s^6cDUS-*FF^.DI_=V`'7Yq_b6[F)cJdL%sR?\^:>EM7O"P!
%Db7nYRcU=N!luJAMrj+u7$pa`GN:4u3sQm?\_(F%8uqC)Q;b`mV4jad$@`PrkrRMJM=%:jLpkFOB"+J=%"])JO)VstZ7`l%A;%dp
%+(F4O4@_Bj;fu5A+7"gWX61?B!t\CuK@_#?-CIC93aZZbH3jA`,Ch>8';j0['X2Fd*lFA'D>Nb_n8s0n8[piEMUJ,*lBHRBON^%T
%%oEI)8#5;B1-SN`ZUpZQS0NXjNkMArD;88*M2t.Q;MFb"(>/AYA;p,-e!2,$4*Y7$@:XR-+e5m(Q3gu%M_$Qe#:_%kd56Xe?puML
%Zf:3!%U$a"1c6*]c]RkB<@+Zl5G2tGC(;tK"\Tu6Zj<',WKXjObo2#3L8GuMMiUbM30+9Wrr&YlU0,"9m+,n9?W<1a]a/E$qZZQW
%;9!LCFn?MmbK.f,o8"Ua9!V]QkX3_D<lsjWkh.+M&rgo3`7[b?Tj3>K*!+Td:."K<c]Da?d^pVt3c2'n7QtVR'<(C7[#A:YpJ!tP
%C5Y^"e?]e]Lf6Hh$V>62H,YN9l=+Ye&2X../`hKJW`+\%Nf3'P"'<@$:Ifks'/Ll[jPu7%159RH<[n-rRkp-WJjk')XcT!(=d4<\
%O0oJN/p';:;%\&gW8p8dCPdc__=L7_r3753NFr'$mYmqi,AIr)7!/O\m)P=(XjpC`i)%>.Z%3J<k%Z!#*Z`"q73X$[7\"1>B5\Q^
%1@,S;JZM$iD2Q#rDYis_cd#n\d\0VMV\^i<F]52%9IE9)JX7D$<H6k3,I/N6nO#"<a`BM8IY`R>g2p\7KcYm<C!a#=;!&@u<G+Jm
%&DW^6=mN"%:.M.I&GD%'=*!A5hn[DFJu,,dX+bu#YCK@cg?6KuJLO/ql`sUV+h0\\@l.>T++pUdgZ+@1XdS)&I0As-<%,9\6a/>M
%,f!_En8\`HDHRc1s6.8k$As53Tnp*KG`4tKXXPr3X4Lj'0*)<)L,HVqmPWbQq\Yk5Sk0QOf0O-SJH+d,1+8.LFI6@tjb/@@,&F!m
%r8FiQ;-p`$&g!d?F)%TA]5%$Vh+N9^V7_P"[G%4$Li0?n^1W]rJR<4MO9^FfLrLKh8<Ag=TU.H\'Tt#S_^EDA]S^SQ+T&M9ZMk3b
%7?hai_F#"O7^]+_RQX.7'"/Q?7T[hu,AJSAp2)c1<[UsB+Bo1B"GrJ-9qGnJ\]K"(/Pr@o+X8R^n?R\&HV\66W2;NJ(u-2\FYf%m
%O28tKb5(9,(eA"+aQEmn"Lk:1)]rLh3hI\Qr^KI%P622\A3@!,L]].4/k6#?e0!")8/af&2^C7,.UKLp%hslC3P=*=")kaq&)2L!
%J?C6haSXQb@Ec_O[>N_3mC`lJoin9;7bkIr:Ia(g<HLhlWSNYT1Rok)_+D4ab\^t:n&X?%'0WLN4OS&B+[cnc,^Z?r\k3(28=X`"
%0Hs/U)POLI"eGL!TiSp.g2+]UCS/<hPNn(@Dm30k::X,!bNf6X<?#J)<td3ahkI5O]^i4YbO6$nrnTe+=@JZ<IR'D:>nkhj2f1pT
%,ac0!A"I!lnT&5VK#Edr(M0A(Z9pH<98X<g6-'OQ`]ir*+gO[kd3'ba-SeD:\[R\%8ePSsHee;2+OHn^OH>Tn-0$a-e82a*BZkY/
%doPG%-j_%4iLuf6hZ7Q#Wt,DT27E'TqXu_`e57iIPm'^1jnh]-8tU%O%Y9_;!FK\W@,IXaAoB6M"J&Fg7^'UN7$lfr42dL^HE>fA
%YYQ-2f,+r6G=D-^LTJ@B96S3-[SIFs_1"IK4]FZU,u/=4S#ME%5WhZ8+DoaP6IZB0%k6M`5]7ceTJ)$l/$)j66fc)i4=T^FW>!XT
%?3a8D)8clPAf^6,+QT?bM"?oJ,fN\qeS)D2-ItjQ>D?f(;Ge>)#JC2&2hcY_*!:Qfp`I`+J_h\CY'pU.%8+`tBN/]AB-d5\FJA<Z
%-tY;<6&hBKonsf')@gTMV0?lPLLX]bem.BsgDd19D1Q)2Xd"Ko-^Jp:SAnt(',8mGb>5^8Ok+4VaQ3QMJNM-g:aTM$HT)0n\S@0.
%bHG'\C!.p@a<hc,s)LFLNY\<M7,'EI'2UA,1iaPB!F<*l1#mNU+^?WgjHZLM"c`9IfnDK_dC8+)rnmG+!TD^3_>2!NEML&@p0KtU
%l1jR'"3sj&A5tDP%T@,?^le0'QTBM_:s$uQnDSXkF9^?-dXdsJkR;RO\s[q(1^o/999YY/Xp2'O83_P0p^/=7DCg?J]lT&]"mU?O
%)'J#L]X-,ej8L8hK4L4u!K6`:/5?o7gOBu5;f=0;.`uHk[ZLt&\+rBFj>g_KJ2M%2&=dJB1^f#I:M<]:O91pH"9#5Pd]r(,r]eKj
%(q38C?b3/:TET0#gV?[g@j*s7r2s6g0s;Zs.OJ!hAt1P`q;fmJVQM`;MpS^jR,=$)%%K3uI\\+q3Yk:)&HH;p2CJCTL^b7++ccra
%JH!:BTr:t2quS3.nNS%4oG`mh[e7LpFCt$6arRC&0aMY3KPZhHLsV/lQ8JOK4Q$NtI5Pmg9ji>(`($;jGZ3(mo1]aE`[H5"@PFb(
%EDhX"dDIVX>W5G-8-@i,U7BPVL(+06=U3\?`1sn@M.#pfO3CrW4/B!1OS?qM$o&8a!)NFe)<Ii>3Bn;=\,i8?OXSDi)OXq%HI&G`
%kg?QBNEV2GICeOZMM7\E-QS1GEKmh\m<&dVQ%Bs,B:.5^g[>!R_hX%;d@4(V4`gD6b/?-^#pLk5nG%MK$dNRM;i146?HC:\&tC%L
%?E*HN\jaMC</0[*hiOUe8<8lVB`;i3?GPaC9XbIf4J:ZDKpf:nLmOXeF:G>!@BV,68i_X6NMr-iV_KVdG^gSWD9.+^L0:WLEU$=W
%^['>:4G7U^q_KI,60aF5;nT/a$5Q>+Kja:3ITs#rnI/k@a[_[39<MJ`_YLgI6LsXGlL-7&VctEn\c!fO0OE5e5+-mf+BP7j"!W</
%o6?+4*C73#n][q80RdM2%1=J6.e"[Ed3IhSR[c!gRDANrKirP;C9%aN;KZo)m\Ah7<DH:YY%Kh+O^_%W=m<5lL)Jh!RP]QG*E6D_
%Tn6di!O96\5K@sDQFbB\4fnOU)Ek1u_a]*dm[kJZY<3KicH)h6GNPOU`6g/'EF>+Heg))V3Bd9OS54WQ>)upaiVFV)h;b57N0(_M
%YA&TT*Q0D3M61PVrXdj+s'ITTN&b?N*2Js`o'nKPnpF["jTOSLD^2L1Spl?pLVGqJ$KUcFc4Cb"31]hM<c!>R*V=fjU=[kTYjLC.
%%as0A4Q<`J3)=Lh+a3WLW3bD_7#>*g'c"Y$+-bh`,MGiOS=3jA,":tDrJ]%:YMOTej6AdVjl>VhDT\lXpNib6YEZK9]ctq`8\,UA
%f/KplB0M=Q!8%sFmh[72c6D[(KR3gF6(XFfq*Sf*!aB@XA8f."LG2S1PEG[H9'b,0Hf*[@OK7#!=h4@/;?'eG>q8/&\Fdf/CcN#L
%/Q[lR\m('46n]o%FJf!rni`UBYkWsiDMSojJH+a+O)sIh,HSQ\T@Gk5=.[a@.aAiHOO`FgYUpr<=8_$@^p/,@Ik6P.puB[BT&9M&
%LL5N.nW,nAs8(^+It%Cm`uk?I00fF.:ZfuBYPdPOnUL6OO%W8tXgETQq3QU1dpL-khu2Nks7Y4GO.Mqm]DhR)n]P9/Oam+d^]*PS
%k?i\lr%0j'r:.82rVG"5&-)HTrlahu)peK]J,@E-c[YiXc_()B*"W%tDh!63nGN,m:VZl(f:W(jIL,Sba/j`diHjLE++F(JDh%TQ
%a7.*7q+hF;q(;"D22e)4Zb6n+guI?F4oY8j[m0OsI5cTqhu2LUJ,S]hO8nb%?iKoFLZe^4[gt_%q89CG6N9.GmdeQ9rqrDfoDpWD
%%j1fKiT2_f^8F;8C:ue&%j-9!l1sL,s3laiT3j$l'Zd&in\=PWM>TD</9hSo"Y<S=Jqoqk)`BsQh2Zi$hL>k'M**iTFE0<nU)HY?
%RinI*I5Gu;#t>(cYOZ+@@-I6a`^$-(q@;jYN-9dV(5jJE`G^R_6A6::l?bOBeuVmNB_l#<m9'P$237);k1nn)hhPCZ!&$EiT_T3P
%VKG$#&DS?,mSS:,X@Wc,(SqQ6j:U6,YQM*hD?)@_,icun@f5YMbY-er24T[`nW'Dr`1VF\d1mTGB\MJoV:p1'-E4ocbf)>78mo`J
%0o!AUmO5qgT0(T4[M<.#9)hisE&[U?,1a/h<oIl?!L+;l7R+.VEug&(Uc:;h[`IMcqlgMQW6rl!A$O@iUVgm6gQZtD%3@K$'`8L$
%$.n4^jLT^9j-/e-$duNEh$)CeY(Z6G;KsI:8AT(^Ih(sWRbF!-*[$XK82#6.bo.5":.Y)d%%iGC#V8s(>McUN)1=2r7q<[ZTiN`L
%o!I"mJ;@N_/rT;L$j73>4)3lLO="nm_FAZ$2]u>4MB=Fbn$T&Ve@?H*"#HOL"lg_F%SPXY009H6c4HmI\K65+DNFh#q<&$o.TF5n
%rr`_fL6NNDQOO'A1MSV<9H_APlG96VVa*?"ctF^#d)Ml;1kU-'Scm?:-N-Oq,#V)K&kKjZG;\P02-/XHL-8L-U'gAeo%?EhIQYrR
%THjdnT9I3iHE%1bjOgCS%uR!uX[.Ma'Y^\mUD=D:.]KTm\u9BZZESO`D4H>bB:m6*1_'<mU!Sd-oB>9mMJanJ65Gn=5c4p4qt-?n
%XF1-kmtP$V(Y.O]$)K)k9p'cGm]i-o+@Sr]maI[n9V3,$A$?.S0cn2t1'Bt:PmF&OW#HO6OO.DkLDN%Z80h8]km)6oi3D?/#5Ba2
%^97,[<*o5V`CKD*?Ia%RpJ$NokZ[.0f^KWNNmEU:Zqqn.Aoq\M%#b3]^)',h`rkj0P.>=.E5n$*aK&oC&Y0Le'Mcp"!-T]e"Xn#Q
%-eU:hbMgSp[jh1%;K!Ng16\^CeWFN7CZaRUd[INfQM`Z_]kW;c41(>:gT3uR&<,>i_c.Ms1[5CI(0/^"2a$HL3?>g&/2Sk"AbMEG
%R\nW1Lps'hBCu+%=Vm>(Tjs1U"Wemjf2r)?L@cI%X=t(HgujM]9GB[QI@`Fir,$M6!dSLPLKGp/>grAG:3Xo2e[2c):`<u!B;$J"
%+^:o0NpL,j8*r_%0S0r&^W=]IO)L)2LbD*:hm-(8,3(XNk\)'?3$?<eP)tKTJI+:YF1HAUl=6tg9A$MVUS%D1@Jgj_5M-Xic%5`r
%eU[do7;XWV#19K;nlr$#-.'`sDsfMSqZS8-,UNR7UWaf/Kb`Y97(WOXkph8L@%&'k$#j8Z_:ahc*doF=@0NFeAgW>&KJ^Ql\e?e"
%d>Sm%KRDG=)6d\\gZ.UO,`WRilONGBGNcB[+skJ+Gb&Q2o-K]5]P>=sTg;C?jBhE`"0a?,4*o-%>':TVNNqqXL1j>!LO7Xm//bfP
%":.T^"C'n#_<d?.2P@!X['0?hpsDHf05_GW.$W"Tgh.=M=II/_k?To][aY.Bq@LWdJF]q)2_.Vr"F92/p?ZKu!mJ3s2H/u.?>a-I
%m6u)!MQH,jnO<PeI8kDthnI-LY6t^-IM!K>mi0E;TeLVl8/ND<,XX/8(e\Fg>T34GYhWX(AlZG`JC*m4f+;-VABEd3bX3.pB;sA,
%9o+pn`IW2/?]Wf(atDF"a@1\2S:d-"I7Ak`qerIiOQ&g8%L?I]&\^1#ng_r-kO/P>#5RaNV5/.fIVS)OFbNb^$'AKU2^;VNKakn7
%+Q0C)ii1q1%.RQF%IDoC]-o-oE::k]\[/'KD=Pf2bSjt)a"e9!=Yn+G;!.H=!tJYBHo!9jVN3'j)j?0leJ?8(rKpie]A.C.CK?;D
%d$kY3H#7hR+>"'ni]J`SLI#c?@["ou$j1J!1?h<]$mO`9566m_(h/noUE,K"TK>ND)WpB;*f_@9lOnSLO*62G@-<P\/\kku;/jrO
%\l]`3`Y@_CO7T\3:[MT;59j,7Lm3Eo<Ql/,,FUT&:g5%gFR#idgJ'_sV%m6>`McR0C]#_a"=PE['/`YfIj%(RLoWQl1/=W,*L<9#
%MJfPcd]9;@@VBE8fF-tj&>^CGQ+"L($C&OYCtH+Qi+*.BSlJpHc*A,9,V/4`!lJdNZbRW7htdUC,GEQP8!cq*BQQ1+_a<7iEFERK
%7O>1aF7?*dX.'4X+AZ=tH#DP^Rq"V-%:gm-I9Q.VJs40DH;J9$o>$`e/.>G_]@WFncN90,:o1Z<0KGXOSp0,j$%.adnL_;jaIapX
%Y`GWf.rVjcd7ba+M2YQ_!X#_jhW(sF69$*p[/aXh,`kX7dXbXLAL0(Z!BpnXNKI&t=V)(?a;hCY6R)`o5fMr?/5<6_gg<U#ot!j@
%'TW:?#KC`'!6o>7;*(O[n0cukDu_SpSUd5oJ8U-:'MO)(!Yn@2&FbL]MC'R0NmMNug[Qfu;Fe@k<,Z=-Ll$fIos6nRO\qo+*p3UG
%=B,]qD?.(!k@7Rb8bL5PWVgC;+qU3N!!Q8]>=HBT`5mJV*0pc=7dOEUiQh]PYAJGY!Qe].>7Vo\J4/;GcW:GEFerL#J3435%!A-$
%<r<5W)e3*(KrFA0!g3:hJ_9,h\AfD&^Rf9X-TgK3R=)5`O6LqT5Zk6(LF2Su5bgp9Z7Bm]`8e6Kk:baFdGEO2))h.O5Zag`Z`6%G
%$UDEL.>7%7XD%p(M;!JJ84j.$!YAkm(W78*KG^]GctB&GQh07Ye`A`K"$Q#?r0<36C_+FRi5Nm8,fes=26OllT)d$u:FIU604uIX
%+n?1!jZG$s"@j$D=Q^6bP)Z&e*`p0%PZ&3U[mCbg!V$<;qfsoL^*kd6-pJ!:s1%*YKq^$Z[#1!#Fpug[StLZ8Onkdj)&8T&?h,aI
%pRYM*?!5T^AJuXhMd+r=B%1rZocF)$Ca`69Ar#W+C%#(XDNPrWpA\,.e71-!A+_BPeDG=DH,T*MO:=?KY-Iipbe\X`cDK@?T`q?[
%IX8XMgiT0[J=*sXk-5ARe3W8f[rEi&:+#8!m*"qZ$8IVIT?CHQ3fs;NfPB>F6ugAR#YmT[(,ulL_X-qH0Ed=<.<>jule;rtA$lGn
%![9^W.,Jqd=7I;BP1C05=Wj'fq'[YQH8*);j:$PQ%M]I^a\CV[/aT^\G+B@:VPq-RWO<A[hSS<k-]R#N.tK1%(A0>$;s$0LUscir
%9]L@85co)MPjej.*K'KD9'X6E/W(XG"YsX2a(5Cd59%;!&oeJZ"0U-QD>2iu18iA%=W0ERP,m%^Sco=\]T%656*<)GRRa6S[E&\"
%PNltr'kW;`Z]"</+80Tj;)*jVgK3om)+C$SbHntr"`2)CL<AbL*=1]Fq.-*<TW'J$P63gFP^?bu*ZoH;@@qpTkb'bhbu#D^8*[iD
%Rr&Roo,eg<\c9]o@`!_HHUlAR_.T;S^HMh)nftr-fG/=`P[1PHFl))b;?Pu>G??-'14)UZL#sa&=b%3TZ3J0.7'_o0"gTu1OgI?B
%#A]jYaW1nd2+3fd`R:L%>i/J%]f),[^Hj[E#fteXn@jm-'QDRbDmIWq@(2gjAT2'_&#6AKEBZ(^^="Mab@'<tU#VYM2Cuml(TPA"
%I=+AhC>9+VI9)XVRV3Yprg$.$Sj>Z],VE`ocN5[#h5X;KBkPp.#`fMI(+ZH/E+b0=ZFZm8>Mnp_8clF"!sbQFbH.19)BA*S>-n<U
%[a`N3mQ$7G<&mk0a0n5D6HegU0-!=`cI9WZC3Z3`#ig]>DbW<4ACDc2ZdX5m]Q8-8>ONZ_R$0V[Gg5JJYP&8_I/om`8,Haj#R(0*
%W/Cu<>s]r)NG''[keRa\1n0%<(<Lk'jK`f&AP;(e'XUIB#Ud'(m"LDU*8n0=@i:9(Vq^,p"aQkq\oqjElOo)p(l-][4_r?+ePtpp
%ZnRuZ3tZb!5nOEd48jt)jMALJ!_3_G1?_:MphZo";j#3<=@K<X,d2oH(a;fYD$Nat_QQW8(*+5S4i[<mpY`-k4P[LQ9(IEr:([sD
%_O6@``d!dqNq;pkca2!Y6Z&_."Zb@=V1X.tX*%I7=T)l.=F"piDI%u=EbAYuMrT<0gAnHG4'g1;H57nuoPIG'&0P7GIr)i*8\+`:
%M'F#81im'j$MF%9198k^4-Q1eCBe/=Cl@R2S*a7N0a<46%)uS5T2"#K](o5fPmR,+"G-&gC?K"?6kDm8KsY9T%7;C5=-1A;?u\=j
%"J+rtM?5Q+@g0aeP*^%d0HE6VpO6Ne1VuSI(:YhP$JuDq_UG:V?^==de4eZU^hZuio>`+*P$/:`Z@cBI2R)D*-'r\;=b&=tX"=Mq
%<Ea5tm)!;P0^K+aB%9B($WrD#X8cg7XM64d&>mPP6=lt*OrE[U\R^fQSChDnS;s/,e&)^4p%7u4"+np)\Mm[(aY+V?]3#tpfeG-9
%k[f8;&[n;0*qdM]'&1m:[\nnQ<l=Uu%:#0g%mPTYGI?VD,24`'o1Un*1fK:mE6ja-+h4-C^/[s#":TY-#I[\SW^l&(gn&qIX_5Dl
%'F366eT/I=p-n58PnL$M>rF6cC:jfkcT]4SB>6sM4-%8SjL0AYE$_p@Ws?#^E'F('qlEtNh<m8[[Ek)b]DG9i4hg(MWqunb4B&Ui
%NR=tu[<9odCU9)1%r@9m")L-rV?#Ll)n+u[XIJ<X)Bsc(ba%@deX:f8/6>W591i/Pj1uU)jNWh?iUWqgb=APk&Fl-Khu0$@Pt0q1
%m0k^:8t!V;g_Y&*RX-OLXf,ouA:,Vf`jHEhR5TBO>i>AFNW4$"DZ<0h"6)PFUej8'[`(5IT:jJp773!9.5WYC2E)L4dbWruHU"#5
%Y.oS:V7+56!@g6j,Zn<G?iVag:PMa;S++9_dB&6uOS+rAY\_a7pZ6k:M`Ab)r'hdR=*+^3!SrFF6(aFX"I9a.i/t#+6nScT9@"P^
%4hdlMVg>Q.ZV]K#aD^MSrViAXpq-?jNc?D@7IGK^DMp)%/<s*N@E<CR^TS(uRje_i?bl-Y$Qn,LhO7d[+--qE%?qqjR[i^@%Y(q>
%dZ2M[8AF%,A7_ue_ctp%V/,]G9(6nQ+70mJV_hbp<mLMV>!IC?Y\[?Q*K[\B_MDBSIlO65dF9<j#'Pp$Y&_Kg*YnJ+45fYlnWqHc
%H<QNE=kOpn<KH]A_V@t?n]nutB!NW/T>!F6r:an$\"+')T$>7AAXRiV38D<(Ou/<P9gH79K,>7'LpWd.\kp>eOhL]QaQ@/k[]YAq
%1a>_j$oH$SNHb^I9u%pJbUhOIO_P2Yq+WD[E(??N)_nF8-qjJoJW)u_XoKIL5WR^F`V?7K\\Mu7M<O?2Lt/ZUY7";4X\<%86BMp*
%BbY5CT!_],E/5;!O5c2+W>5gl)7c0N!Wp,-;bIhM9oAR^($=4:48o6qkH%(D'sg1_b)stKZ,.S49FamW=iDBd_ebEs$%`pDjYhiL
%cPH8j&9X^Ie=AGBT#^dl5G$`kan@igH';/aa_@Q7^q`V!?Y=KJE2ugB"^:%SH]j<LoYk]2PYR@2cl$D\-At_hSd\&9E3aJ$;Wont
%V_P$t?;hPB6UfO9U9AdKr/=;;4Yn;Bn:DsL[$&C;hiCsLDV6-r(k%)o=^ELp^la@T5Y6p>@u+3n4U+k5R9X[4b=9IkK;FG[NPi'$
%E=J/Z(4sl=>*0AS,,m-3s&C/]qerM2SZ_eHCNQXm7J+f58BFh>)(R0b,aGB]==eA.Z*?qJ&3SloZj1lN_M>pjeARpdJjkNr(CEt(
%iFlQ-&k,Gh&8WJFZ38EdeNrZ4MJjAZXrSgFLTj)>l,Bql@hm&bELnG5#i+;nF29aKS2n52&1$?k+DccV_6e8cl=[3H4[["VM"B<R
%H.VM+<=>L(";C@%SYa`i<V!I#r@;f'/m+tX-rd"<!R/$e0\A+,LuPR!hA:u)l#%j</3PHS2)%(ciBXQ[ULL+5n9q6n*1.9!J45QG
%2hQKJGi1<%+PtX(JWrFRI&sZ9cg8l_6Oi<BndR<i)Njs</qcP!/IdNRW.*5E1]/+_AuV9-eL?aQ4Ua,C,t;YO8T^1:k_U:3+6[nh
%'`9f:ApLTuKn@1'RG#Mi%L5oMTIH@UnYlRMQ5R62l/2co7H\OXoiFSJ1MW*Cj@h5td`'*c8Ytgb&G%(W-%fnh;tL`XbW]3\=Y<V>
%lia%&A7K"c7fT6Qa>]T130oD3Z9]To<=pYjHDLZ5,bfs`"YruHlSZWHOi)0*88O3Ugd13]Y+cKcM_BFjE?J&(h$1r]G]6Cg&-nOQ
%/MSdUKT'Z95h:)n2-P+Z)kXC#J+X?q*KAoeS."j!;GdP\").kbG%\r-'0MBC]HP,S\0H9T^7MRYR92LCJn+jJ1"QdBGresM5h)NB
%Jo8mmS)(FG%2a5Td&?.XAi/YQ,@9j;:OX*u3Tu+5?R2(C?;u:[dP'G(b8F#QOCKg!+h4-D*irb@<5imJ4#dV56'fDrW#Y$_KI67s
%RK7Mrn/0tRpg;"33,+>NktlIu69lcj"W)Kin45!;%[8Hg,(bKdC6*!QGaCm-V1DBmR!Vt2qRl\u%=1':d*R]L*#6:LT?``uZ<jet
%XX6-.$Ep0nU[J$?G?D;P`2duaX!;m@P8$#(GS*L*g'LBe\f67Pm"i'(Xl%M39)$$'U(H>_V$9)RlW5F..<UZ90fpIi;F<FWj93`]
%CoGm1/'V7@f.1cH_sYjr/WR7]LCA,R]dR/T#M9&`:*Ahs/EQ9hLZ!LVb>7dFs1ioWrST(urh?nHa'F+DQQ=#<]p[8a55l,K*rd7i
%KB!epgb=Jq`Go3]UC^NAGU+BpjbtBI?KmT!$'3J6_Y;[p!i8s9++B0Y1G2s()MZ,]fR[@(.*+u[Y(9d`O3t(_Y7P=EdYLG)1+693
%QQOO:?t.@?nC(l05\*1"nd[LU]o>^/gk)3mi-a;kgi6#Krq%ub^*So#`$@+lKMd!$b>FDC3ibPM:o4gd6b&FuL^Cm\n\K%S$#5ZA
%B>*C$(aGMRdiQ2fp^kA\8bSbc1m8N5+FWWFEK*.u4JW*FSs!*W`k$^NbT(?$h8Eh&+miX\fa#A1+bdp6ViaZID%/jCEo78A*\]3:
%2%;S>0ohLX7j`fm&^-^<T@$c:!,fLN=uC1C:U4;$9'*QR3eap69Ia+M/]EAIh@F4uS0/aMT(Ju.I3<DTi<g76j@6MGo?Fj2Kj__g
%43DXH5R[_Ui9;;:goV9-OD,lPlIe&;[*CA$:1@d2ng]Ui99qOoTrUWBM(F#P0M=pjMTa/EQ&H"+>:a%e)7QH%$7_8n>Ndl4OhqRE
%k1ZR4NRBQa'YVLMauHk3fcY(5(oaqcY25Yeh0$%j5$;YjQYq]aJ)*NB0F)HGS;f\VJ1<_^(k$8Nqs5h('m(J5>obZJ"2+sTAJ(s1
%]gX*k'Z1dD*PF-#@a1tinA)+lDdae:1j\Y)JOc\rLnj8QcP1!goWbuC"TqrI(Y+9@S85,2TbN1hQ:E*alTE0rr2^ie`E$"]\ilsX
%+u:Rr;sf\=kPD.e42f.mZNGn?SiQ!_cIp7+JesYe[fps#1%<muH^(KKCkQjf7Jbk?"8Ei;[p.a="@j8V*35`i*80'_K$ER[XYj"_
%nomHIh'8#)cQ6SghBq'JN#IB^lrZ0bAL_jqa;\%VV%)P(*0_2E&DRjLnRM_fNoW!q-lLQj&<d(t+NV>XV1]]fZTtu>]EsJjL.+N_
%^i4\3BX1T7au-QgeGVlCp/Q!u'a-Ik@oC\I54F9Li&Q8kdi91S;=tB$/R0F$nVF[V73#T&<*F@`WjsSdI@R0Zm9nNSJp_d8;c(dp
%#E6Npc>KgbAU/SY50oiAb5U=H%cKUq-qL)rY(j"`?7c8"H,(]GJ:&t?@&OBN,9[4tBn>?Q1;ugqf3=uO,G3gIC4fPME%sR@H),XS
%0A[<I*4hQlXq:p3>'#',RCNqHn&c1M<Q.ieSB3[TXY5G0m.1Vk8)AoI^E?p;7J3g_f2&?;p>a>QT?TC?J3Kco/&)+\D4ubVMi$N%
%As:1DL2X@-1p&FP_E]L#AocEI^k3,V-"`sIPlZWE*n`G,?>tEU'.,8iOa??-=;hPWcAHF%Fp:>_TqcX/6oLDqpf7Zu0qB.d=&&M!
%BSW+/:lQbQ.rsrKf3=qYK4L)@epc@;`ObcFb5/iL=sseWOb<"Y886)Rj81dB.YHb*1fGb4iuCdTJTKYo->goK_f@tf-2`MOf&6#!
%3lR7s<tqRnq:0@p-m2m.9i0so*=MiW9sefJ</J1GA35L%fk<nkB/llR/L.qtXQj+8",(]JC3B4s7g>iBDX;iY/Ep;"<^nJ^Lh*@'
%+9?m'T@LT.c`G:qp&H,Bom(X,k9<5r>h8c5Us&s=A`X_jM4o`[MPAbC]p(p4C4f6u)c>$+j-"d08rS4W4AklRpM,P%nQ22.;2qjI
%8%tcSVI8lmRt5n>A@[b-O%)AM`%h$21ph/V`3i!p?5AM5(!e@[JL>>>i[Id,-/Ofk!$)<60g+ql!p\1fZL:,@l6BrK8SmR0oi*"n
%Z^1_>gC:,L&9OWg@]Lf!LlY"SaAb&B*Z=-$,YhhZ&./V=[8X^_c<.IYoe\bZG@Mo*Z,,[_3t?-j0mZ1#%d;P9j8`Ut=uKtMhD[)S
%K:V<V28Yq><k+fLab(1NH8nZdrFkrfi:?a^$]luQZq!^W@_)247cXkBon._aA-n7;RtsWk3q"R?_c`rhQ%PLf5Whs2JWMK'#Yu+q
%(JODqYUi\E-"M]7rMhpfg4;YRefOD_rh-.GFE-OjYZm6s*4<T6QDeQd=\g(\[e:Sjk<RLN[%6SsalpO%p+N3ik*Ng\+Mo.L*Oe%Z
%a&tWp((JR+p_e[D-uqX1F,E37Tc@1.cP\ludia-/L2":SAsF(gW!'tj5<bHO:BfbZ@KI3Q#k;KOZ+1gjcgqH-Qj_:i!ttcaR?tpB
%E)BUWoXh%;F1pJ/,3&9.;nc[,GN.`95]E2,ohR;;<]j,4"6`<7-`2Xq\%dBRh/>7H+lTU^O0P*t!Eg_\VE2dIdtT$?KhV&n(oqKU
%aD[l$h85>N%hXC,m%euU!s,/`I5Jr/j%IL(*n4S;T;9`jb`Gs7;laVE)#$7B$8r?4ECr@i9@sfsd>\e;3nDbTKL(nhB\U-K'IS4[
%/9L*/<3)Q5P#Yp6HOC(gq>ja;Y3oS<gS&PWG^Z+K0pTFoMLn^iTWcFeK1Q]h=AIPjW9ipt@SWflrfG0"FH*cIU/S@K`h1\)5C@qP
%k&3EI5_dmbR,iVC8WY&^$3j$H\ad"9UkpdiRY\'j+E&kp@Q+F"iP?cp@pBMK%]=;=!^[*lnXT/VZV6r=hDit.Ph/c1'sSU4_LnRM
%'-dm!%;N?0H)%a_I!(P#,,;S/D&Ab8PrT>>cn&42+>%lfSo!1%P*.1iP]O8iPC0*<U'KFuR$\;Xi\H.LWY4mG%s7U93Bp%?WXRe3
%Y,Yf=Zr4t5@q)6f`f";p/M%Z4!'*()Eug&e<RbIu2k*3Y60mXba+N'(e!R)]L.n:pVdV`Jr`d,Kg_c2pC`1')ZRGUCFDAgs?p_b'
%S:WM2&aO(s]_KMX\T^6l*2GH#I.bg3NJ+3$\!m6q:[`bu-h7keKD)N!@70IkFpp)+<Wa"Xgko]N5+8]#;+ms\$Od/jGk1<(;><h(
%X''?\aAmQu6TV]KiJ>n1<n'IE2_K&KC_elYJ(M^-AA8$TEl_D=*QR>Plbic:")B2..RK('ffNSn`pgHpnl>=2>BT4A3lL8Lghl@i
%a_j5IW.jRY0YpVk=k'PN>oTEM:t"@>]V-1C(b"WmI*qGA4E5lf4"H2$^d'#`-VUZ!+LKleks5EF'Ir;4!hlE?-,P`<:i?"kht/Q5
%Rp]QsWq0k+$9>Gg$&nUABmpq527qXoC&k1C)/(]CH.P@ZUr+CG(#r%uo,%(u-Te;9QP6fM_#g0j"#8fWRjKkn<TbfL(G/BNR4QD)
%<]roL$e[T"[^r*D'0TTN4u/ViJHhI"h"-E+DLI'qDa[\Qh^>=pLkWbsOcQQ',mH]b4Uii2'SYRVk%SWQTa]n46i(Bn/31>Hbb>lY
%]lAY)@\]l%q:dgq'4Orhid)eg.\%[HeJo],@EPX,7L$UNHO!6Kb>l348m_<1>BTkfcq"Gr7O6[`<B%pf<RO;/(J\r#b=Yr<^MVr]
%Y<gQ<$UG0a](HqOX,p77^l(HtEt+3Y=7XHZ,Bqq).Z;i@*H2/t&mAR9(hi+"%[)+t87'^6Vp6SDAf$k0kKae=i&,@?/OV7>dc<1-
%C3DUgUB/IcBP;2B:&g_1gdk<DI@]\icd7ZCB7Q<^\Fm\VP5&`GhDoY/"\GGYjuX0e('XRblrUM7Z_WGZ0"@tL2d_,DHD99>^&kiQ
%iGJ027[/9bX[!QQ^P;uQARcK5Q^7HeI0H@m3U]2]Z%$,3(:(VnJu`?t1[_44[r'nJ`2_+k![4:h)+sKVSln&E94,cs!>?I=`[kl-
%/ZUqe$:I*1%8$/(?"`?&W/9kZSD^L$-u)c][Z+Y/#/T>_DUopiMW=(B"BTS[q\nP(<CrhP6FJabJa<2;fN:*e^V[_ES@WpI61gG_
%I1>bbl8so-aSGlQ[]Mh'*"DDlWh`,@p<RHqGo\V7CCnAog<CPC^o\+o2HC;uJ8+BmX33]ek8K#AaACjgZWWDne3m=Zgf=+?(SR<%
%ko1#M+hKH'ATM9lU)O5[#/VufJZ+]I"*;H^j!,+lH\a^oO:RH5)PcU.4jQ2$AV8^@rN0(o"cks27!FQ/KQmaJR2ZtTSC)U"Q/gN$
%)N:&,_jL4YqS8UfTK&'^JkgLlQpmirn-P]CW=F=VD/IqBMNA+T=Tuh_,SLC8*a7L$nF?9@d!P-`"H.L*?NJC`@#mqji%^&K)Iprm
%O$<aZU?DAIPobO<qZ]!#=)[rTVdZLWq?EgsW!beA;[+TE^Sm7?8.O.HlI+_p`23eC/7e;t(p-^L/tbIMb6k)Cp]hD1=aJp*TCcAh
%83\;5WdZ6I(jmarW!a4.SKfOE(_&5MW;P;@bYKFiH_I=0mf=&)esoE?FR0.pJ3]B`]hu(HhUFV2?DM7-l`V\4"_U:XS0hA8U%`df
%Ts6:QA'SDR\!R91Y-g)O$eCC0X$djARXK#&Gp2h6H79grl+&;'l(l,t@O%5"i^$"-C%.e$l"+Mn&Y3EsJ>\:?=F1BdF"n<X6Kgd<
%iXrsu#KNf88>U7h%d`i[NlMG9]a;=Tb68P;/Uu+l6P,(*['F\^lFG9$^&.#@r^smYT4EKsd]C>upLNl/U3e#.#t26,Yl$Q-`^u8O
%Hq!9R1S`^^//QA*>s392Da1RtcO^j'nZF2VA6s/h$?;+tZZMK6RJd`8EO:N'P,Y;YUX`SWB/Cup80=ILl\Np]PUR"R@)b8L-?&.R
%]Pr$;Yq;@!\aagfgee14F3a-_o4PcJ7b/dWF<L;9(<I#,\@RN_!0$8g=R['M,plb;bg&]&@ISbE(CNn,N*<]7>Pni:5SP9-!J0*[
%c5mN)08G0P+]YJR;CX@4"8`;Pk"WgYnqsObrMh%7T[Ic1cb+:E<>;;P!jMT)P+r.)!QM'_5Hp^Jmr"*TjV[nO_U!?e2F3\sB3HL>
%8H[Ej&bS628ifkT&li@l\f>cn("j,0fhj>$h&5s0$+#1m`M`$erLi>@3LkmBNU6WZG-e@!hkB:r\lRP#Dmrqa"i$n\``%$n$">sW
%OGX9-86.:i7NCDKq-5fJ$=(@R!YLVE[u>?M3a?VOKT[,EhumbkAbh76a/U&+2$%!@K*5:FQJFQaRPOa%CT7#YM*>Ak2A-?,?9dKD
%QXp"_jMpo@UMDmGnNG@S9QuNYKnZce,BgD.#SXo@hC`HBK4ULq4'W1].qSYf4C1mljNQ0TP-_K99U5<!^r2$i8bQogD+8ghekaBB
%6[%t_DQP)q0_@hmbVs9@_-S5G(FGspCcXOiZUL+<_PYfL;^pBF'bZ[?D#k&od(=AY+LZj=J]UnpeWG*;8QgXn@o3T1g]LJjqf"sj
%;tirXosOSSELD&MKJ?"jL;fQ#Nhk/k:qP4C"G0<A.kUT3Z).p!-A$7QkF-t^PVe<`Lo"Kqnp'1[n/s"#]Zqkt1ZT4Ze@2.fZFt70
%ZXU8>=o#ZfDAU[mO-#e108F\#Q6aAd[&3N:6#U]C>?rT,'qd:>#n3pbHVFq-@snJ^NLt>]es]9q8m9<mp'K#JNM9ImDk$JmF2r_Y
%IH-7n3gq:(>&4B+M/'-_PPBjUD.RN7K=2;4pr.X9Pkr+mV;tX&?cc6>a!k:1c%u^Ul/g=Ihia)r%HVtqNWAMU!nWnS5D##:%1IkY
%hQdb>UHX7aBK8'WHU.r-G*&0#;@mJ4rL`V[!F3_rcj'M%YqRqS7kkC=YF<h:c7EO+po[WO#IUS*n8QfZ6<`.CVNDMCRS<C`]E,>C
%'1,#C;AW>"!?W_qU?:bN:eSc?1,(8lPs;Q0-Esn"6<9FUb,FZ$A%q0eq.<RG8R+`d+&"^5&C:6`2&;!7Wko0AHCq/F,$L>3nB(F8
%*a>oEQ#mn_YZ%J1!k[Th4od2YIY>]bkqnjK=2Z_9lq'31J<%Z0c7]H/J-aAZLj[?l&U,Di&uSYReTU!P)7$?C.sU[&HkFNt!)$_-
%6;SR]!89t7I1(&I)S6V&D6b?rQj"Lc2G@eHdq#>Nibo-MB.*W]e>QQj';D7[=JQMlPb%Z:8eN1R9Vc*;a9g7)TJeKNhjKqV0n[?Y
%lpk$/g4nfRN3>aFHnpl_Srmh+P`bElA&aG:57/im$q'4a`>Tj6NUnN#h^GLYk\*nc!-8X\FqI=Q[6Z0(C@HG0GmC6_hHjFH>nHr?
%8iq,,,Y([mYF;*(h]DMq>[0pgJ>i4>[[AiA@]lQU-Vd,;HNQYlYk5hD&n",,3WNq*a)$EB_3B2dR$U7H(+i6Wfs-2Ai6";3l@7gO
%LS^c6r>$jMd$B+.dLgKQY9<in9P-=T^5uES+iCXU#Jd[+fj+fJ7W^rXB=7ifh_;mEM1O(l>O*hPN7QgHmVD-.F2R1mYT:p7J/_iR
%;,mk/7pO&R`W;8Y%@ig<CiPl0+RG(ZXDnrjU)lGj>d3g"1"8199a[!(T',DbX;:>h"lo*iJ<P-B_O5Kc@]C$T*Hu92Do-n\Q&5u>
%7>>Q"S6Mei2+=m7i/B0;aCkWTL9dAmB?(j.AM0MJZ3Q].FA)E"bRcZ7p-BN4=TMsT)TC3G-_(9V!,@=+3D@nQiSr#<29<O5j9]u;
%["f&_l<8QQi"a@VSY?s67g9]NC*EPVjbH08<2sf2BbIB]KjVX,FYi_ulF-QS/<jai]9["EGhK?t%Jt1cBI!T)X$6!Ik/WUZMeo:g
%Ft8Od_qHr*"2<+.'lSorOOXGd_(`kc"Fhri&.F`(8KXDPB/oku3>/T&j$#)M-k_L]l]5r6Q?#Nu*#KJS%L`E+oXY,Zp,8K\(cATC
%D&Z40Jbq.Xjf=[c/o.I0Gq.^8cAM9F]M4$7(h-s5;Sbsa!;/eKS-apIVO\DA%NNb'abc9<d[2!CL-G/)WQ9S/d[-$^8dlq7eL4FQ
%'g&0h"+))"T:!db5cPk75V:72mlq-tDZI#4+dX.uX!$V)UiVKliE'Ia_IuB/VbgsY+Vt+jk[Y2uLe\mcs0YZtXLSuu[RaLIUbTjH
%JY^seMU7.eG1%k`Cu#qm1BW/,Jne7"#"oZTneNh-bZN'ik#=W?YLt,4be(ZJm(?qUU](iV1)%_SS"\AO60u)(K5X8H&hJ#r'a/l]
%ZUD219AknBA9kC21h^=aeJ@f.rCG=![_PXs7[=-!CC,M2'3@s9jpf,?T?9a=IO((q(6bJ)3VRI)bBte[S28;b$LV?>1j1/Xkcms&
%!1RQ+8m'R5*goG9FEHHMi@W<Z25s-GJiurP]o2[p2.iL+pd;+*>I+`7B1T1A@-AW&Lfd?,>*?2#G7Bh=URu\?iG;a$dDTmH2d2h3
%aF$!`$F=a9#(h.WFM"s$8$W7"o^^9[N7eWn6U6W%djEAC7S(">TH.(e,,,(4N,4Qjm589,h.j8`9e4NN<9o=tHC-(J^],,;J\:)s
%"i)SLG[cm=XZT?NoA7C%!@h_MX&J_?,!&TLA&%u$Mo&fK!64?-XIrur[eWp`!s;23gZo&aj]66+RQm:$)("+ImeWn:J_,*bo[^M)
%_P'5`jGH)!4[^UTJA+9'g]h).n/+6-4UX*d(<d<M`?!%)1"lKOR?oh,0o(\oPcE%$AFdY0Am%$g@is.Cg&o*jI'LSY@%a8d#7^pm
%0+_/2OtTpP&]=di9AnAM@9ZCpnVunnAI%1ZnCd$O`oB"NhSNf[";\ID'2%-h0]+TC09K,7Q74f56n1YJ0Z1`dU1\D\@@LiF>+H!3
%2P8Oi#K$B')BU).>&"u^=-NuFesJZ+m;[\bK&,=9K75u6`+ZMjI?3!3;ng1hDAi*Up#W>?a?`M\Za1(`2!S82B&#W8HQKj1,c.^S
%%c1BJ3I)^O"`=FV*kqaKQ8+"m7E-mJeK&`$BlDT]CKD$_o6YZ2p^i*]LX,@"G5D-6k1GVgn*/5dHeHjaN^ZG[9c&pI5&3:)Ln4WR
%:1.+;VngaR+_DVk<)]\Y6`b^saH++@o;&-94Au9[US<j3N<YP/pY8!C)N+tC=h?]MI/c_@O3*,&_riUJaTENN&B6BFnA.tuHiXl"
%o,)kPVe*%n2A)g^4n1gQJK>K&KCL8BFHqU%6S/8AC,2C:0ma3IZl8jB(L5^V8[doB>m:h@B#3XDCUVr"#JfEbjjmdE[=:m9Zbq'a
%C>GK;&'n^HNlN%dp].s94P"aDlka<83TPhJBMAp%@SM'l22..OPpEZ?JRD@fqrjK7O2:4'VN8.P708+Y]4QJ1I$/u"<7q_tcd=L"
%K?E$)qd<WW=)Z&7Qh/Zmm>WE2NBf%X9j_BVd,]7*UbF%_6G#]-H;8mI3[_t3#^d8ubA.l%c`dN),AbWImGS^lY8J!ZT[ecL<KN<f
%$BK+;[;1.n:O<Ug+5uLcICif)qtdNus)1QG)QBuD#daW'CW[Xh\aI\P0ik3Mdu(W:@s?+hek"L[;AtG/9FWM<C4H/Zeg1DC)3CuH
%BNnSp\(#H0lmA+<f=m+d%h)?fk8OYHj]CUk,!LJ\qP%sB=&B?.Dd;5!fICW8rk=A=T^A`h9It1*5j]L)W=*5mP<A4OZ8I,_?l/@S
%%9,WL4?.49HW:KbEg90qHc,V]1D.B%cpG1\0@6`,MAfL0Dr2oOA.NKe]ttPCC"ZtR.6;g[a!3"-JC/s,I)Md7!<f)s%M=P"r1rV$
%C`3WZ!4ZJ_N1DUL[!SodJ<UgAhrZXr_32bO^\;hd\n&hO@(]F"hB5n5Ve?3\4Fh/NZWT\nE!RCNDbZ?j_"Khm]QJRcXQrAtNin$Q
%#-Xj8TB>j(2I?.A19q#CHaq^LJ8+g-:\:i@i6T5$V/D?k;G<N:WJW2R)K?jW\5b?8+)I;bV#SKBEi#TAihJ3-QG!6ZkMagZ0bclZ
%Q=O"6-n6X.7u\L]F>X0#ZipI#\;Y?&lS:HQZO:>3!#;H6*KUF1!Kq7/+>UmfZW(`D83%e$)'`E3N!GW%_3C&kU=9LAF:rU=8coA\
%5^n_a<?0e3A$af!\@_Pe)fEe/^S_2SdU`G"s)/I4V_M_m1+`ZmE)+n`RM[Xb-1e6OXpGk(pus*+'9-=WO>k<nbS;$Yho!W5Rm!Fm
%am@BeL^SA38h9&f>q!BGp^ZeVXOJ#Ic"Ba,$=uW0MrB&#btW:'!d-ICHg65AVP.P>(nsBgk>sM`lfR%j5Q).5WN?LO=U)T'9-1(r
%ct5WZ/Y!4;oa-%=X]'-Qj<@?n3c]uUC/*25<4'T\a6&Pfkb8\W;u0>BIF9o5LYj3MKl.mYFd+)kRh=1,74.WV:%U`A=e;Ak]5O[;
%6X$`BA=qH#MrF:qjG!fNK9W'LUb2`mAVGQY[bfA"#PUWfp*?A?&2AMuC+aA+"9Q9>76h4+XFM,u%7j@6J;1HRBF!c8;$K4YG3$3q
%e>(9U/Z?X#j5`1R]GnL:6ufb)j(g)R/q^ulMb)#XC6UI#PC]SII2QKR9h?6=r2RgJ#Y;5N$pXh2a]7Z@$/m]cS(fk-bJ\h5B3\50
%]=uY&DXZU`oQ!E^?9m.#+9c"j^%6?]@^[%h1W)Hb;FA$i\`V?g"-)"Ug%`*\jH6$Rg/JVC65#CILVX6o[c1]5d)N<'2aNVUot>ga
%YqWn\XU$MN+OG'15Frm/&0I9sdoY<>)6`dXc"L9GY<tj39._RDannZd0^`LS!"aa;k'F1\"6$!qgid-+*BHug@A1#q?/3Ho`ee]c
%n0g8SPsZ8J5%;@,N:2Pq]"*1(6q*!le%flMaB:jh#`.f/3tldJT97!`FWM.S23$"AN,7%!%5g,41`/O!%2S\kIH1iHMk$Ztp;>n7
%q80,#)#ph5eY4'A*s7EoF.#@`aYj9VYfbX^&[pSnd0!L8&:_OY-LHu+rOY*[Sn-)L>:<gbocCcl+hrBNc0#V!-Uaus0qEcrQIHa&
%7bk<#d$fr$)ms1sKWec2DG@N#G#cf1$3jB[)IA>"NHU:HjiF%(6WoL63maW,)FH.penle<<3f*qWQG>&Z_qj[IgB,NFqL7uOQbZ.
%Q[AU/;cBL1#$PIAh$2M*WuWZI0=Y_]^+U+AC3]-H#qF1ZV!Wp^L6el3A@Dt;**3eiadc:8)Qm7<O9@uE7&oHi2*p*<%V>/=g9Um@
%$5`mkapa45WB!+4275jqPbD=5_sgQ@hA3V-:qt_+'WI7T_uSIi0"ULTCQEDP<YNGFiBM'!b77;lgI0eV/3"PII0S_en5!9>D*dq!
%7LdhdLRVcYp</\:q@-p[:g%YFM'EMKF*8m7;(:CXpU8`&32)1n'W>JQGjN5.N!ba%6.VBApW;4WCcK-eIM\ZOGG]u*:hUMFY,B<&
%,a[sMkU>E\YhX:D9VCRGVXo_fL+2NqKT?hh)hQ:<^>^pU3md#-?4:\ZT$f3JDq*OoOj])k1YbR>%16$5oJbkqW:+<uAk@.b?igkn
%!^D+b?:2^ZYSkHk"uCC]9SbMio/u<%Ki6X@%ai&[aH]Ik;(67(K,E+T:B3"B`WmZ&XP!W>L*gqN1TQLjZ%Oo*-PtKCgSY9.\D/aQ
%JME)Cj>"\kU"cpc<Gm(&"i5X=-7"t;lg-KN)i+;Oge99Sf99l,[S#NnS]5Z`'krd8?<>,qH:PYSP_,nVa;Uai9F>(ZTraXY-Tu8/
%?KjG:TO1"Z/u&$Agk*$Cg-Rlce,bH4o8IkQf00oLWcFPk?U=F4AZq&V`up&KLQ(g7o#`AVg?"Vn)PJj&[QIr(mEmmOg4Hg:6K2cG
%oMDWAY;Y%e2c`lVOP(cjA]&L!aQ9;UpXA)5^4>$"k1`IuqmKY1:718%MlVM4:asFlU^=q<MH@T5W@-Em@D@[@.r:%/[Y0G"r`O+*
%I>gAX-<b"lNCgGE]UVj;++fcEOf6gs3sg-)ctk)jl%/8ML3j?W5MEfdOUO!`Ke^hUJ6H5V;%n6g[CYpQ:;aEbdm/""5!5MECSPk;
%6rBZ)BrjW`iGgJ[c,iJsFa!8MZ&*(CY[q>5L`g#U#<fNO/4,h"4G[8-ZA7nIQQH7V;p(aS;^O=/l^S6-`2(mY1M_Q>Ys.:]dl:,O
%U:9u5&`.;ULr#\?4fJ(,PBqcX<'2].2mq"\+<VlHo^#Z+I=Ue0^"d//,8'J.1rI7CHLLUg6NhtFoBd<Ib\n$$n*NSW]q\-D(R<?r
%HpE!8a8Z@G`g(KmiNBcHR=YSWn'@nh#T4.;lmOts!"/=^b[Uf!QYJ`,/!-"P\guOgK%encNFO54-io=F[@Jke0$rm,Z8aI]o$5O5
%"oC[0_:ufc5r1,8$/>"dD=df*?Z-U6Ak/%+'5VVe6tcK,DCm,h)X-:9Jla-+RI=:q@rs6[<I4[0HkPrDP44b8iK$3QG^fC2++F%U
%a$9QNrTf5Gs7uKR++O3l^\m`U58e1MHf[29O8lQDO?W,8=<IS6++F4NTE"Q8n^D]3q"MQ%G5n>8kMNHBrI=b9QVli$rSt*]qVh7:
%T/KPtRj\41gY[JYl1g&6r'15CprgA@\bOk(4oP*;?[r(Hq5Mt,8&,#_LS'%kgL#F-0tac/reoXm^?F0eC\M%[q=Ar@J(r_LqQaEH
%^HOi8J,JuCG<c)I?[qn;0-?ecj53&uo]Hb"N_00;oXi:"s8)>:qU5\^oKR`uo7r[IN;B+Q\Z,8qcp)pQor$uFs85Y7?@I@"i)(UA
%r/Uf*V8UAj7,_E<&IbUsi-q;[mt9uk(SQ`##>0;<kjBG26;k0P7:LUu4Gg/eTW<G]'XlbG#au:0["H=!E</-(ZM!1S=_Q05KT=M&
%\NY1*Hbg131)]Zg`+O''nN4m*LcHIf,hPuq;0.g1P6e=+Y=K[!D9PP-Mb6B6V9k/1%Zp$/J>c#CeRh(J%:W^c3W0LTjPo,bOoq4b
%)jE6>k!H+d-7CKGOgm?(R`I`hcMR]G0*LIUl%e(O&JN,sH=AO(X,[bQKq9@2L$'DqKK$LIWnVi!'^pc7:kbX1Z1V1f!\jW9@d^LP
%Yh.hsBOUoYS8tD86bOm*^Hm.:k',<*iYG!m*QL2>E-1*Ae\g*)+g^]sn8eMGCVfKsh)G";W5fXID8Z'f!ipA"4k!)q%0jp"W*L?4
%cP'cQ)PduAl%cMC2/gI]LV?(L`b`)"./;tr]"^k5^me::hcjUG+EJ'("C^^_S?4d=JXPAGgVuF_QGY/gZqTO0S&8u-T%PdtaO>c;
%YL?5V,`ojh1N7Va;Fhfb_2CRS8ZAr@-5`-9G)Of-9s-O%:jjeTe(]Vi.JNg(2.0l?"ipIJKhBXh2(_3XP[r18M0,Fsd/k+eO'U)j
%FYq4:F+X[&q,!cDjA[]U1pWE^)5e-Wc&8+Eq[^$!1)@q-'HlEIoHl;/*M/X6c5D9[4!5;*W-#O3:J`.l)B68qD[lY4OAk4PD1R'P
%Y:SE:g+]!_5b,%T*.gg,q/W&oE7;<rc>s7$4M$qVdfjE2KXR!.5)XBnV%DfJ3T.YrnR`O[i1Ze*Q>abRZH]*Qg1J`eDI!Lr4[MVE
%7CQF,TjnkSh8;naRN/ngKpu4u"A(O9./RFMp<,@P@'=PFAeNW;=h?!mJg9!"1l4uSS4"=-IjAh%+/=mo;5=&kD&:^e0FpN$hU^ge
%l0j47B<m5YCk2",aD*d[<";YZb.2CS%*"[M*A9/K`!E]ZE>^28"]:C-Xpm8`kqeEtAf\%cBaell-H'?WUYHA]YRmLurJ0(5G'USa
%[aYduH2dX+6BNmWGqlpB9iTad&:Sbjd:aQA7(+2SMPbH_2mJbk6>WF<DpBaNMaVTmZ_.!68rEf2YWY,hbi`gV5!#f%$?gk`0<2&D
%c<A?GQb'`$g[t4_5Cg!iQ*_+r:ULJooeS'/fr*?0[A$:8\*^"f&$,:!^eP&=1g?'n=ds:IgVdnhKILb#7i@m5k-(DT!uWt!ig^K!
%@C+u"V6fk"D.i5F*G=c7\>-\1,;`t<gZeK]Q0Us4O4t3(<7aTIBC.s5g1H9"3,8UjU#)<IJP'?pT!d5Z.GGBd79aX&ZSlp*M`Vs%
%+V['T/KM58ZCS?=3"FY]r]0@DG(/RHOb.R6BX;lj6-LDp`j](%o:X@J[Q4o*G0k[l&Y<prPuSeDn%io]PA!rSFDYb(-`hLiGR/Vl
%Q!Vb^5=UQUfP]%c((L[#enf+AKi]^MQSisr]'A\.P::nXYT$(W+f*<cCB$3hec4CVe[/@t"2XlOrWceXoJ32(1o"On2@qPfLYRO8
%4M65NDm2SqrdA,GLUo=.+ZE?NRuoNG<Hh0<>JhGVdUG4aCHOFi>^j>sAYkZ'77\+FN].(I''j8LP]<Wj(C_l-37tAb0qV@GXuX6D
%02a0cKNGY*&_/9E6Z);[dh5LEEGpg,>\Au8I1)lA(`/QjaEq_()3`Tk>#%&,-#oGQEsBhB^810g;$9[kRj=]W@L>DP79[X*V<81O
%(nDqfP8qcnE7Ge6\lp5'Y;4F;eN2bp8l`&q2/Xa4Nn(6CoLXDrrTao&B`2tT7]R"l&gMEN.)(^T9_@Ua`ng^5+IQL-2#F7o>;X!)
%7a5^D8=UhFj4teP8YXIJfPAJsmCgRDH7Pck8aJ8I&jA+&jtbspk"7V8j,R]O-bfqpI3h^P)b0kPB:]Nr5=$I.IpE`T^gBU]]Ohkq
%h'Ml,GD=MG>\YEQHA/TCQA1-`#&)k9YF2*RRMdud)4/fmdbPe,qaq>0p6qg]n!Y*T@@5e3)=QqH'rjY>)nOeAR(>G4/5EA-p&M\p
%/M10Ee^4PU=LL11Zafhk%Z[3-L3cu1F*l?tGoYkt9;-sc:5]8>)^Lh(2+2,cqe"j]0GJC8U\&:mb)#*U_@[](&#8:\!7LMHh4%!7
%P-S`oK]MQWTQ^-,)^;8s\sa82+![U7qUt=/acj>Y^B]k^W,fXcK\Z$)Pf?4SIu[;%*lMLR&q2moQJ"(QL2@7-;UV!<+m/&ga3:NJ
%1"W+-ZB0o\>;?o$-)5'V-98:d(m6?:p'#iJ/TLV704Vns\MVF:`-?>egQpNe;FfISEPq&uFk[P8:m]#,N8BY5RA:O18OLD_K4u`G
%>7qQe3e:mI-4(3dK5HI7DJ^W>VBFtd`0E&.K8>H%k2e/R:):]\V4`ij>2"gn#^&0X],lA/U?SSLR?(0^=S9Mebg'K-+V@,$7&X#s
%C-G:pC2>*G]BV,j@CI[FIrhheb%#B_H9GB-,_QQ'S`TUL,O1KrV7I(%/pa@VX90c6h2C>`6R8NkSDf-a#U2kbe1%B`<q\57#.%b/
%%T--/b.uddL>eBhHFu%+Wh+C*.#BXQ,Tqr_>cF,s[7r>QbobMY19Q_E0fc:Xl2b($W9r3^8$uG33dU;-apmA<WQ94D=is"bO_#6n
%HpeP9&YZQ:f4JGaDkY*>KK:2TGY<=TR9H_)cG2qHDUT`j@NO<kG!<K(Enks$UPbFT8!T,8/VBEP6Cj/Cjmg<rT;+2+K&gSUNq`nE
%U"6>#+%]Y8Q%][c&KPmmIGgk`lNo%YBR+QRNsHpn,1QDo;>X!n*C;Of]%RsT5&'rC[]W!8_paeS+5tGml3k#kdBQe5ft^)`j(`Hr
%.N`q26_^"4%J,^PI4K/JG[255A$LY0@O+:2P+\!\m_C@%i4]WP*,(@DC=\p3S<#AV4eLs%of>&cPg)ktOC5+tBSZE:,1oKfT1&Bp
%*EM1]dWQ14nT*qmbL"V]b2%3V(@cEfC#3,oCm1g#c/&G%Ck8IdfBBN*dn>tX.!hY>DSrd!8D92\L9&jKGJTT,ct`qe\X"S=DeKEl
%XP9-^0fD&>*t8f&\[sCBE\0X%f8_9?>!]U9eRZb/!h#YmEp_pbIc1jV_ig^t>Uua)5a,saD2T&.FBFKB9<?@[+;(EnNP%YQ(MdU!
%3mYB>46ag[XDOqpeD#+"C)RYNOEp-&(B@Y;_l=\L"XI79#9lS(eP]-d&'fE<5)R'=aN<lgg=gE[Dd<qPg8Z\"nXMc5Nu%pK6S5^M
%<J;>^7r%2R9"Z]BqWR%=!?R\V!V)!nYdh[(FuQbK0T=l]B#RY+aP2DZ>Sr_A612U_9pXr8n*'_#,,6`M"l0^8A<,C(j/#;5LG>JL
%%Y7WZRla\?L_41L&QCp%ADMAaD:^NK)!]KP:Yg[Bnn\^RR/GNMO9\BRb:Q2<1.>:Ll8sK2<h)JN@?E_uF%#bF!6KY/&EtT1_lVrY
%eAf9Y>X69"(]nm4jQ"dJa''O3eV687)`"&P"-iJBj:AT-T=fQ-mBgdFUjj$rY7P/3X+eA`_9c?\pN&1`DamIb"f07Y]<%!jeD/@G
%2c0COd+]Ra*jDh\5k;s$aPVTWk$_=<J'3mi@l*p"GOY)u,8EJ4@"R'%Jn3Iq2T/2[br'[chgj]JV9@ao[;9ni;<2X\=hb'YX997.
%2krLcahjV+6Knfr"_Jn!hil%MKgU=hGEKW:n)(mlrU-TSgW-5LmiVPB4Q"t#J_ONQ*\Y8l5Q('5o)/LCj3,?tQ^`c.-Ucp!rk/6r
%k4/9<o%1A6bK\5nDuTgRO89B)Da47!j84'#!KaDD#6~>
%AI9_PrivateDataEnd
